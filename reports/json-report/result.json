{
	"projectName": "MaxSoft-IntelliAPI",
	"timestamp": "Jul 18, 2018 at 11:04am",
	"successRate": 42,
	"environment": "default",
	"tags": "",
	"executionTime": 165965,
	"executionStatus": "fail",
	"specResults": [
		{
			"specHeading": "Create All Type Question using Question Service - Negative Data Driven Test Specification2",
			"fileName": "C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Create All Type Question - Negative Data Driven Tests2.spec",
			"tags": [
				"create_question",
				"create_question_all_type",
				"create_question-negative_tests",
				"negative"
			],
			"executionTime": 34894,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1904,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1904,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 379,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 88,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1437,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 857ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:28 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1904,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manua"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"creatoredType: Invalid value 'Manua'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 0
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1322,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1322,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 138,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 55,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1129,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 815ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:30 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1322,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"creatoredType: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 1
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1445,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1445,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 133,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 75,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1236,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 829ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:31 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1445,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"AL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value 'AL'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 2
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1379,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1379,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 160,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 51,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1168,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 782ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:33 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1379,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 3
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1375,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1375,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 168,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 91,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1116,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 761ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:34 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1375,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 4
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1280,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1280,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 113,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 59,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1108,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 755ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:35 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1280,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 5
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1280,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1280,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 107,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 54,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1119,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 851ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:37 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1280,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 6
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1317,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1317,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 114,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 43,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1160,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 837ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:38 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1317,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 7
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1417,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1417,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 138,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 55,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1224,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 857ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:39 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1417,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character (',' (code 44)): expected a value"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 8
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1238,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1238,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 76,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 33,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1129,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 817ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:41 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1238,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 9
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1155,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1155,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 81,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 38,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1036,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 791ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:42 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1155,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 10
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1288,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1288,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 97,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 50,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1141,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 863ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:43 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1288,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 11
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1332,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1332,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 105,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 41,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1186,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 917ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:44 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1332,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 12
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1139,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1139,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 88,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 35,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1016,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 755ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:46 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1139,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 13
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1409,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1409,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 116,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 48,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1245,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 912ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:47 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1409,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 14
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1117,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1117,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 101,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 40,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 976,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 756ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:48 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1117,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 15
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1220,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1220,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 82,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 55,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1083,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 792ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:50 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1220,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character (‘@’ (code 64)): expected a valid value (number, String, array, object, ‘true’, ‘false’ or ‘null’)"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 16
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1229,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1229,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 76,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 54,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1097,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 723ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:51 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1229,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token ‘a’: was expecting (‘true’, ‘false’ or ‘null’)"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 17
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1339,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1339,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 99,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 44,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1196,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 882ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:52 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1339,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character (‘@’ (code 64)): expected a valid value (number, String, array, object, ‘true’, ‘false’ or ‘null’)"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 18
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1414,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1414,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 113,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 40,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1261,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 874ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:54 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1414,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"\"\""
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"'correctAnswers' cannot be null or empty"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 19
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1230,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1230,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 91,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 38,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1101,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 868ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:55 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1230,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"null"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"'correctAnswers' cannot be null or empty"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 20
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1302,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1302,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 97,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 44,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1161,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 854ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:56 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1302,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"\"a\""
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value 'a'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 21
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1117,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1117,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 80,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 42,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 995,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 760ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:57 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1117,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"\"@\""
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value '@'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 22
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1192,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1192,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 88,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 42,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1062,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 833ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:59 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1192,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"\"a\""
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value 'a'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 23
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1216,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1216,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 96,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 47,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1073,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 833ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:35:00 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1216,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"\"@\""
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value '@'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 24
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1098,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1098,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 84,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 40,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 974,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 732ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:35:01 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1098,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"AL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value 'AL'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 25
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 1140,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1140,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 77,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 42,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1021,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 746ms\n\n",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
											"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:35:02 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\nsun.reflect.GeneratedMethodAccessor131.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:74)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:67)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:49)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:41)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:91)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:105)\ncom.thoughtworks.gauge.GaugeRuntime.access$100(GaugeRuntime.java:37)\ncom.thoughtworks.gauge.GaugeRuntime$2.run(GaugeRuntime.java:86)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1140,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEX"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 26
				}
			],
			"isTableDriven": true,
			"datatable": {
				"headers": [
					"scenario",
					"api",
					"creatorId",
					"creatorPlatform",
					"creatoredSource",
					"creatoredType",
					"deckId",
					"tempQuestionId",
					"kind",
					"isDeleted",
					"learningObjectives",
					"imageUrl",
					"media",
					"prompt",
					"promptType",
					"timeout",
					"rationale",
					"boxId",
					"correctAttempts",
					"inCorrectAttempts",
					"lastAswered",
					"questionId",
					"skips",
					"userId",
					"correctAnswerList",
					"answer1Id",
					"answer1Value",
					"answer1Type",
					"answer1CaseSensitive",
					"answer2Id",
					"answer2Value",
					"answer2Type",
					"answer2CaseSensitive",
					"answer3Id",
					"answer3Value",
					"answer3Type",
					"answer3CaseSensitive",
					"answer4Id",
					"answer4Value",
					"answer4Type",
					"answer4CaseSensitive",
					"answer5Id",
					"answer5Value",
					"answer5Type",
					"answer5CaseSensitive",
					"tags",
					"message",
					"description",
					"fieldErrors"
				],
				"rows": [
					{
						"cells": [
							"Create a question using an invalid creatoredType",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manua",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"creatoredType: Invalid value 'Manua'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty creatoredType",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"creatoredType: Invalid value ''",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an invalid kind",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"AL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value 'AL'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty kind",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value ''",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string as the timeout",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"a",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the boxId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"a",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"a",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"@",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character (',' (code 44)): expected a value",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the inCorrectAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"@",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the inCorrectAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"a",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the questionId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"a",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the questionId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"@",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the skips",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"@",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the skips",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"a",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the userId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"a",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special character as the userId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"@",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character (‘@’ (code 64)): expected a valid value (number, String, array, object, ‘true’, ‘false’ or ‘null’)",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the correctAnswerList",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"a",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token ‘a’: was expecting (‘true’, ‘false’ or ‘null’)",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special character as the correctAnswerList",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"@",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character (‘@’ (code 64)): expected a valid value (number, String, array, object, ‘true’, ‘false’ or ‘null’)",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty string as the correctAnswerList",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"\"\"",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"'correctAnswers' cannot be null or empty",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using null value as the correctAnswerList",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"null",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"'correctAnswers' cannot be null or empty",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the answer1Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"\"a\"",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value 'a'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special character as the answer1Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"\"@\"",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value '@'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the answer2Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"\"a\"",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value 'a'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special character as the answer2Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"\"@\"",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value '@'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty questionPrompt",
							"Create MCQ Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"AL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value 'AL'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an invalid promptType",
							"Create MCQ Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEX",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value ''",
							"null",
							"null"
						]
					}
				]
			},
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Read from saved CSV Specification",
			"fileName": "C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Read from saved CSV.spec",
			"tags": [],
			"executionTime": 22726,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2591,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 95,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b376757e4b08588e2006968"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b376757e4b08588e2006968\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\norg.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\norg.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\norg.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\norg.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2496,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b376757e4b08588e2006968\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 0
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2391,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 91,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b376759e4b08588e2006969"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b376759e4b08588e2006969\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2300,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b376759e4b08588e2006969\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 1
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2600,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 115,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b37675be4b08588e200696a"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b37675be4b08588e200696a\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2485,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b37675be4b08588e200696a\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 2
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2600,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 95,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b37675de4b08588e200696b"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b37675de4b08588e200696b\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2505,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b37675de4b08588e200696b\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 3
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2566,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 86,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b37674be4b08588e2006963"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b37674be4b08588e2006963\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2480,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b37674be4b08588e2006963\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 4
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2395,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 65,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b37674ee4b08588e2006964"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b37674ee4b08588e2006964\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2330,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b37674ee4b08588e2006964\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 5
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2592,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 108,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b376750e4b08588e2006965"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b376750e4b08588e2006965\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2484,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b376750e4b08588e2006965\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 6
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2491,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 97,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b376752e4b08588e2006966"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b376752e4b08588e2006966\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2394,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b376752e4b08588e2006966\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 7
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 2500,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 70,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5b376754e4b08588e2006967"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5b376754e4b08588e2006967\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2430,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions/5b376754e4b08588e2006967\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 8
				}
			],
			"isTableDriven": true,
			"datatable": {
				"headers": [
					"questionId"
				],
				"rows": [
					{
						"cells": [
							"5b376757e4b08588e2006968"
						]
					},
					{
						"cells": [
							"5b376759e4b08588e2006969"
						]
					},
					{
						"cells": [
							"5b37675be4b08588e200696a"
						]
					},
					{
						"cells": [
							"5b37675de4b08588e200696b"
						]
					},
					{
						"cells": [
							"5b37674be4b08588e2006963"
						]
					},
					{
						"cells": [
							"5b37674ee4b08588e2006964"
						]
					},
					{
						"cells": [
							"5b376750e4b08588e2006965"
						]
					},
					{
						"cells": [
							"5b376752e4b08588e2006966"
						]
					},
					{
						"cells": [
							"5b376754e4b08588e2006967"
						]
					}
				]
			},
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "MongoDB Test Specification",
			"fileName": "C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\MongoDB Test.spec",
			"tags": [],
			"executionTime": 8646,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "MongoDB Test - Without data stores",
					"tags": [],
					"executionTime": 4791,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given a user need to connect to the \"deckservice_qaint\" Mongo database and \"user_decks\" collection",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the MongoDB authentication as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication credentials required?",
											"No"
										]
									},
									{
										"cells": [
											"Username",
											"N/A"
										]
									},
									{
										"cells": [
											"Source",
											"N/A"
										]
									},
									{
										"cells": [
											"Password",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user executes the Mongo query using key as \"title\" and value as \"API Deck3\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4789,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "MongoDB Test - With data stores",
					"tags": [],
					"executionTime": 3855,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given a user need to connect to the \"deckservice_qaint\" Mongo database and \"user_decks\" collection",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the MongoDB authentication as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication credentials required?",
											"No"
										]
									},
									{
										"cells": [
											"Username",
											"N/A"
										]
									},
									{
										"cells": [
											"Source",
											"N/A"
										]
									},
									{
										"cells": [
											"Password",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"deckTitle",
											"API Deck3"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"API Deck3\" is successfully saved as a text in Scenario Data Store [deckTitle]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user executes the Mongo query using data stores as follows",
							"table": {
								"headers": [
									"Key",
									"Is Data Store Used For Value?",
									"Data Store Type",
									"Data Store Variable Name",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"title",
											"y",
											"scenario",
											"deckTitle",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3854,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [deckTitle] is: \"API Deck3\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Saving And Reading Values From Data Store Specification",
			"fileName": "C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Saving And Reading Values From Data Store.spec",
			"tags": [],
			"executionTime": 11679,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Get configurations of the testing environment",
					"tags": [],
					"executionTime": 2,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Configurations of the testing environment",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"Configurations of Test Execution Environment\n\n",
									"Operating System: Windows 10",
									"Environment: DEV",
									"Base URL: "
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Saving values to Data Store",
					"tags": [],
					"executionTime": 1,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"Osanda Deshan\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable3]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Reading values from Data Store",
					"tags": [],
					"executionTime": 1,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"null\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"null\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using payload text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 2663,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 79,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"No"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"N/A"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2484,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 2241ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTM3LCJpYXQiOjE1MzE4OTIxMzYsInNlc3NpZCI6ImMxYjNlNGJkLTdmYTEtNGQwNy05YmM0LTE4NzU2YTgzYThiMSJ9.ZUBSCNWNJDqqZxVTt4mu6kNNIUXm-JearBoAVCqrVdFlTiiLtuSmterz9GvC3cgfR-1GR3J7K2qaNSsbee2PHvoj2TxlVH-v5NYFfChbz_MrzZdS7iqeQ_CKglcgOEg7UlnquBslqiXU1HXZMhQi5Gs3vyOObF4GJmMe7HIcxBk\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=037cc0b6-a1f9-441f-aff6-fd64a0a99521\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTM3LCJpYXQiOjE1MzE4OTIxMzYsInNlc3NpZCI6ImMxYjNlNGJkLTdmYTEtNGQwNy05YmM0LTE4NzU2YTgzYThiMSJ9.ZUBSCNWNJDqqZxVTt4mu6kNNIUXm-JearBoAVCqrVdFlTiiLtuSmterz9GvC3cgfR-1GR3J7K2qaNSsbee2PHvoj2TxlVH-v5NYFfChbz_MrzZdS7iqeQ_CKglcgOEg7UlnquBslqiXU1HXZMhQi5Gs3vyOObF4GJmMe7HIcxBk\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:35:36 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 93,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 6,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable4",
											"$.status"
										]
									},
									{
										"cells": [
											"Specification",
											"variable5",
											"$.data"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [variable4]",
									"\"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTM3LCJpYXQiOjE1MzE4OTIxMzYsInNlc3NpZCI6ImMxYjNlNGJkLTdmYTEtNGQwNy05YmM0LTE4NzU2YTgzYThiMSJ9.ZUBSCNWNJDqqZxVTt4mu6kNNIUXm-JearBoAVCqrVdFlTiiLtuSmterz9GvC3cgfR-1GR3J7K2qaNSsbee2PHvoj2TxlVH-v5NYFfChbz_MrzZdS7iqeQ_CKglcgOEg7UlnquBslqiXU1HXZMhQi5Gs3vyOObF4GJmMe7HIcxBk\" is successfully saved as a text in Specification Data Store [variable5]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable4"
										]
									},
									{
										"cells": [
											"Specification",
											"variable5"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable4] is: \"success\"\n\n",
									"Text inside Specification Data Store [variable5] is: \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTM3LCJpYXQiOjE1MzE4OTIxMzYsInNlc3NpZCI6ImMxYjNlNGJkLTdmYTEtNGQwNy05YmM0LTE4NzU2YTgzYThiMSJ9.ZUBSCNWNJDqqZxVTt4mu6kNNIUXm-JearBoAVCqrVdFlTiiLtuSmterz9GvC3cgfR-1GR3J7K2qaNSsbee2PHvoj2TxlVH-v5NYFfChbz_MrzZdS7iqeQ_CKglcgOEg7UlnquBslqiXU1HXZMhQi5Gs3vyOObF4GJmMe7HIcxBk\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password and save the access token inside the text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 2152,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 78,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"variable6",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable7",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable6]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable7]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request headers using data stores as follows",
							"table": {
								"headers": [
									"Header Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Header Value"
								],
								"rows": [
									{
										"cells": [
											"header1",
											"y",
											"spec",
											"variable6",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [variable6] is: \"Osanda Nimalarathna\"\n\n",
									"Header List: ",
									"header1 = Osanda Nimalarathna"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 44,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n \"userName\": \"osanda12\",\n \"password\": \"Password1\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2023,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1805ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTM5LCJpYXQiOjE1MzE4OTIxMzksInNlc3NpZCI6ImM4YmEyZTM3LWJhZGEtNDQ2Ni04MWU5LWY2MmM5OGM3Yzc4NyJ9.AKDDFRuzwk52dJmqfEilXnJcoSmTt4s2B-yjYn0AQWiOB73VsMJ2erL2N1Lwa5votCbMCJDjJKlhN5-dPjGZv-d0Nqw8jWaoP0L1Wt0KIJetS0rNwkSobA6U5savMw-mZzLPQM9oGrsi156ekRBwP4N85NxnrvLLdzZQREZuDnk\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=87b3e26f-f4e3-426a-bb4e-61f9ce455987\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTM5LCJpYXQiOjE1MzE4OTIxMzksInNlc3NpZCI6ImM4YmEyZTM3LWJhZGEtNDQ2Ni04MWU5LWY2MmM5OGM3Yzc4NyJ9.AKDDFRuzwk52dJmqfEilXnJcoSmTt4s2B-yjYn0AQWiOB73VsMJ2erL2N1Lwa5votCbMCJDjJKlhN5-dPjGZv-d0Nqw8jWaoP0L1Wt0KIJetS0rNwkSobA6U5savMw-mZzLPQM9oGrsi156ekRBwP4N85NxnrvLLdzZQREZuDnk\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:35:39 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"status",
											"$.status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [status]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"isContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"notContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"variable7",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable7] is: \"Software Automation\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 7,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Query parameters which will append to the request URL: ?username=osanda12\u0026password=Password1\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Path parameters which will append to the request URL:/osanda12/Password1\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using request attributes from text files",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 2360,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 74,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"variable6",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable7",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable6]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable7]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request headers using data stores as follows",
							"table": {
								"headers": [
									"Header Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Header Value"
								],
								"rows": [
									{
										"cells": [
											"header1",
											"n",
											"",
											"",
											"header1"
										]
									},
									{
										"cells": [
											"header2",
											"n",
											"",
											"",
											"header1"
										]
									},
									{
										"cells": [
											"header3",
											"n",
											"",
											"",
											"header1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Header List: ",
									"header1 = header1",
									"header2 = header1",
									"header3 = header1"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 49,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n \"userName\": \"osanda12\",\n \"password\": \"Password1\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2226,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1947ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTQxLCJpYXQiOjE1MzE4OTIxNDEsInNlc3NpZCI6IjNmNTMyYTYyLWM0OTgtNDUyOC1iNDBmLWExMWU0N2I0OWFiNyJ9.MaVVoWhlIJfHklKhjYg6xjbveiQgwc2-GYvnuPHljngmQw4_WZJp0cyU-yJ1wguapdXVMG8qybFbwgZRXnOai5sG7yvL_WRhuqZP64kjFOXVsuzuWlUu-LoqZYIHoBMhWUhF25WYQI1ybUo3F_4LIzfK53GoMSoHR-VUBsrDHGI\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=50fae1ab-cf3d-4f74-95b3-38f42ef4c66d\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTQxLCJpYXQiOjE1MzE4OTIxNDEsInNlc3NpZCI6IjNmNTMyYTYyLWM0OTgtNDUyOC1iNDBmLWExMWU0N2I0OWFiNyJ9.MaVVoWhlIJfHklKhjYg6xjbveiQgwc2-GYvnuPHljngmQw4_WZJp0cyU-yJ1wguapdXVMG8qybFbwgZRXnOai5sG7yvL_WRhuqZP64kjFOXVsuzuWlUu-LoqZYIHoBMhWUhF25WYQI1ybUo3F_4LIzfK53GoMSoHR-VUBsrDHGI\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:35:40 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"status",
											"$.status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [status]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"isContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"",
											"",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"notContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"variable7",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"",
											"",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable7] is: \"Software Automation\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									},
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									},
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 5,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters as follows",
							"table": {
								"headers": [
									"Query Parameter",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"Id",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Query parameters which will append to the request URL: ?Id=osanda12\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"Id",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/osanda12\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Query parameters which will append to the request URL: ?username=osanda12\u0026password=Password1\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Path parameters which will append to the request URL:/osanda12/Password1\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace API Endpoint placeholders - Scenario 1",
					"tags": [],
					"executionTime": 2443,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Purchase Validator API\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 125,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/#skuid/tokens/#purchaseToken?access_token=#access_token\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the API endpoint placeholders as follows",
							"table": {
								"headers": [
									"Placeholder In JSON Template",
									"Replacement Text"
								],
								"rows": [
									{
										"cells": [
											"#skuid",
											"com.pearsoned.smartflashcards.expert.elementary"
										]
									},
									{
										"cells": [
											"#purchaseToken",
											"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE"
										]
									},
									{
										"cells": [
											"#access_token",
											"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYBk47vwbsMcq3moKMi8UGLl3ua_VMC6DDo3yJqImC4q-VCjaMZ-4rMHk2d8o7bVeNL_i87CO-z7NBzk4J18oGjXA"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 45,
								"skippedReason": "",
								"messages": [
									"https://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE?access_token=ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYBk47vwbsMcq3moKMi8UGLl3ua_VMC6DDo3yJqImC4q-VCjaMZ-4rMHk2d8o7bVeNL_i87CO-z7NBzk4J18oGjXA"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2270,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE?access_token=ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYBk47vwbsMcq3moKMi8UGLl3ua_VMC6DDo3yJqImC4q-VCjaMZ-4rMHk2d8o7bVeNL_i87CO-z7NBzk4J18oGjXA\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 2065ms\n\n",
									"Response is: \n{\n    \"error\": {\n        \"errors\": [\n            {\n                \"domain\": \"global\",\n                \"reason\": \"authError\",\n                \"message\": \"Invalid Credentials\",\n                \"locationType\": \"header\",\n                \"location\": \"Authorization\"\n            }\n        ],\n        \"code\": 401,\n        \"message\": \"Invalid Credentials\"\n    }\n}\n\n",
									"Response Headers are: \nVary=Origin\nVary=X-Origin\nWWW-Authenticate=Bearer realm=\"https://accounts.google.com/\", error=invalid_token\nContent-Type=application/json; charset=UTF-8\nContent-Encoding=gzip\nDate=Wed, 18 Jul 2018 05:35:44 GMT\nExpires=Wed, 18 Jul 2018 05:35:44 GMT\nCache-Control=private, max-age=0\nX-Content-Type-Options=nosniff\nX-Frame-Options=SAMEORIGIN\nX-XSS-Protection=1; mode=block\nServer=GSE\nAlt-Svc=quic=\":443\"; ma=2592000; v=\"44,43,39,35\"\nTransfer-Encoding=chunked"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"401\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.error.errors[0].reason",
											"authError"
										]
									},
									{
										"cells": [
											"$.error.errors[0].message",
											"Invalid Credentials"
										]
									},
									{
										"cells": [
											"$.error.code",
											"401"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace API Endpoint placeholders - Scenario 2",
					"tags": [],
					"executionTime": 2057,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Purchase Validator API\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 93,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/#skuid/tokens/#purchaseToken?access_token=#access_token\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user save the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"purchaseToken",
											"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0"
										]
									},
									{
										"cells": [
											"Scenario",
											"accessToken",
											"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0\" is successfully saved as a text in Scenario Data Store [purchaseToken]",
									"\"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\" is successfully saved as a text in Scenario Data Store [accessToken]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the API endpoint placeholders using data stores as follows",
							"table": {
								"headers": [
									"Placeholder In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Replacement Text"
								],
								"rows": [
									{
										"cells": [
											"#skuid",
											"n",
											"",
											"",
											"com.pearsoned.smartflashcards.expert.elementary"
										]
									},
									{
										"cells": [
											"#purchaseToken",
											"y",
											"scenario",
											"purchaseToken",
											""
										]
									},
									{
										"cells": [
											"#access_token",
											"y",
											"scenario",
											"accessToken",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 41,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [purchaseToken] is: \"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0\"\n\n",
									"Text inside Scenario Data Store [accessToken] is: \"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\"\n\n",
									"https://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0?access_token=ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1922,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0?access_token=ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 1663ms\n\n",
									"Response is: \n{\n    \"error\": {\n        \"errors\": [\n            {\n                \"domain\": \"global\",\n                \"reason\": \"authError\",\n                \"message\": \"Invalid Credentials\",\n                \"locationType\": \"header\",\n                \"location\": \"Authorization\"\n            }\n        ],\n        \"code\": 401,\n        \"message\": \"Invalid Credentials\"\n    }\n}\n\n",
									"Response Headers are: \nVary=Origin\nVary=X-Origin\nWWW-Authenticate=Bearer realm=\"https://accounts.google.com/\", error=invalid_token\nContent-Type=application/json; charset=UTF-8\nContent-Encoding=gzip\nDate=Wed, 18 Jul 2018 05:35:46 GMT\nExpires=Wed, 18 Jul 2018 05:35:46 GMT\nCache-Control=private, max-age=0\nX-Content-Type-Options=nosniff\nX-Frame-Options=SAMEORIGIN\nX-XSS-Protection=1; mode=block\nServer=GSE\nAlt-Svc=quic=\":443\"; ma=2592000; v=\"44,43,39,35\"\nTransfer-Encoding=chunked"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"401\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.error.errors[0].reason",
											"authError"
										]
									},
									{
										"cells": [
											"$.error.errors[0].message",
											"Invalid Credentials"
										]
									},
									{
										"cells": [
											"$.error.code",
											"401"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 8,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Text Files Operations Specification",
			"fileName": "C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Text files operations.spec",
			"tags": [],
			"executionTime": 6367,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using payload text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 2310,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 85,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2206,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1974ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTQ4LCJpYXQiOjE1MzE4OTIxNDgsInNlc3NpZCI6ImJiZDYyYTNiLTJmNjUtNDRkMS1iZDEyLTdiOGZhMzE2ZTljMyJ9.Oss89Bx1kOhUvOVnwfUownQsuXl87jz4xrbQpjO-TN6-WW0PO-YlYCSXXYv7ETiodo0C7a5NKpJS2UriNMPGOvr-zhdTkDJ2o-scuM4AeSq_LzhoAo4rOaEqT2m7vMhslnHfBN6_oJCse0qxQIZyVelZvW3-1BlwE3KtvNeaZz4\"\n}\n\n",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=1a2c3a0b-0464-4899-8ba3-647d5c8a130f\nLocation=https://pi-int.pearsoned.com/v1/piapi-int/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTQ4LCJpYXQiOjE1MzE4OTIxNDgsInNlc3NpZCI6ImJiZDYyYTNiLTJmNjUtNDRkMS1iZDEyLTdiOGZhMzE2ZTljMyJ9.Oss89Bx1kOhUvOVnwfUownQsuXl87jz4xrbQpjO-TN6-WW0PO-YlYCSXXYv7ETiodo0C7a5NKpJS2UriNMPGOvr-zhdTkDJ2o-scuM4AeSq_LzhoAo4rOaEqT2m7vMhslnHfBN6_oJCse0qxQIZyVelZvW3-1BlwE3KtvNeaZz4\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:35:47 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 7,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values of the response into text files",
							"table": {
								"headers": [
									"JSON Path",
									"Text File Path"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"/resources/text_files/response_data/status.txt"
										]
									},
									{
										"cells": [
											"$.data",
											"/resources/text_files/response_data/token.txt"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 12,
								"skippedReason": "",
								"messages": [
									"Successfully saved the value inside \"$.status\" into the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI/resources/text_files/response_data/status.txt\"",
									"Successfully saved the value inside \"$.data\" into the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI/resources/text_files/response_data/token.txt\""
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Get a category",
					"tags": [],
					"executionTime": 4057,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get All Categories in Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 62,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/categories\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"No"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODg2YjRlNGIwMWNlZDI4M2YwNjU1IiwidHlwZSI6ImF0IiwiZXhwIjoxNTMxOTAyOTQ4LCJpYXQiOjE1MzE4OTIxNDgsInNlc3NpZCI6ImJiZDYyYTNiLTJmNjUtNDRkMS1iZDEyLTdiOGZhMzE2ZTljMyJ9.Oss89Bx1kOhUvOVnwfUownQsuXl87jz4xrbQpjO-TN6-WW0PO-YlYCSXXYv7ETiodo0C7a5NKpJS2UriNMPGOvr-zhdTkDJ2o-scuM4AeSq_LzhoAo4rOaEqT2m7vMhslnHfBN6_oJCse0qxQIZyVelZvW3-1BlwE3KtvNeaZz4"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3995,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/categories\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 840ms\n\n",
									"Response is: \n[\n    {\n        \"id\": \"5ac35bd8c89e2c6753b72612\",\n        \"name\": \"Sports\",\n        \"createdAt\": \"2018-04-03T10:47:52.252Z\",\n        \"updatedAt\": \"2018-04-03T10:47:52.252Z\"\n    },\n    {\n        \"id\": \"5ac4511cc89e2c156833dc6b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:14:20.777Z\",\n        \"updatedAt\": \"2018-04-04T04:14:20.777Z\"\n    },\n    {\n        \"id\": \"5ac4512fc89e2c159ef758b9\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:14:39.270Z\",\n        \"updatedAt\": \"2018-04-04T04:14:39.270Z\"\n    },\n    {\n        \"id\": \"5ac4514bc89e2c15dcf9ac02\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:15:07.771Z\",\n        \"updatedAt\": \"2018-04-04T04:15:07.771Z\"\n    },\n    {\n        \"id\": \"5ac4514ec89e2c15dcf9ac04\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:15:10.327Z\",\n        \"updatedAt\": \"2018-04-04T04:15:10.327Z\"\n    },\n    {\n        \"id\": \"5ac452adc89e2c16ff2beff4\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:21:01.626Z\",\n        \"updatedAt\": \"2018-04-04T04:21:01.626Z\"\n    },\n    {\n        \"id\": \"5ac45300c89e2c179626b3ab\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:22:24.428Z\",\n        \"updatedAt\": \"2018-04-04T04:22:24.428Z\"\n    },\n    {\n        \"id\": \"5ac45372c89e2c17f7315cdb\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:24:18.660Z\",\n        \"updatedAt\": \"2018-04-04T04:24:18.660Z\"\n    },\n    {\n        \"id\": \"5ac45374c89e2c17f7315cdd\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:24:20.986Z\",\n        \"updatedAt\": \"2018-04-04T04:24:20.986Z\"\n    },\n    {\n        \"id\": \"5ac45484c89e2c18e1cb83ab\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:28:52.699Z\",\n        \"updatedAt\": \"2018-04-04T04:28:52.699Z\"\n    },\n    {\n        \"id\": \"5ac454c0c89e2c1926d3880a\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T04:29:52.393Z\",\n        \"updatedAt\": \"2018-04-04T04:29:55.073Z\"\n    },\n    {\n        \"id\": \"5ac4558fc89e2c1a1e210d4c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:33:19.478Z\",\n        \"updatedAt\": \"2018-04-04T04:33:19.478Z\"\n    },\n    {\n        \"id\": \"5ac45591c89e2c1a1e210d4e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:33:21.848Z\",\n        \"updatedAt\": \"2018-04-04T04:33:21.848Z\"\n    },\n    {\n        \"id\": \"5ac45592c89e2c1a1e210d4f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:33:22.238Z\",\n        \"updatedAt\": \"2018-04-04T04:33:22.238Z\"\n    },\n    {\n        \"id\": \"5ac45593c89e2c1a1e210d51\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:33:23.372Z\",\n        \"updatedAt\": \"2018-04-04T04:33:23.372Z\"\n    },\n    {\n        \"id\": \"5ac45594c89e2c1a1e210d53\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T04:33:24.432Z\",\n        \"updatedAt\": \"2018-04-04T04:33:25.473Z\"\n    },\n    {\n        \"id\": \"5ac45601c89e2c1a81e16286\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:35:13.908Z\",\n        \"updatedAt\": \"2018-04-04T04:35:13.908Z\"\n    },\n    {\n        \"id\": \"5ac45667c89e2c1b21967bd4\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:36:55.315Z\",\n        \"updatedAt\": \"2018-04-04T04:36:55.315Z\"\n    },\n    {\n        \"id\": \"5ac4569cc89e2c1b77442918\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:37:48.389Z\",\n        \"updatedAt\": \"2018-04-04T04:37:48.389Z\"\n    },\n    {\n        \"id\": \"5ac4569ec89e2c1b7744291a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:37:50.768Z\",\n        \"updatedAt\": \"2018-04-04T04:37:50.768Z\"\n    },\n    {\n        \"id\": \"5ac4576ac89e2c1c12ac8fc4\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:41:14.169Z\",\n        \"updatedAt\": \"2018-04-04T04:41:14.169Z\"\n    },\n    {\n        \"id\": \"5ac457e6c89e2c1caa43d69c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:43:18.316Z\",\n        \"updatedAt\": \"2018-04-04T04:43:18.316Z\"\n    },\n    {\n        \"id\": \"5ac45807c89e2c1ce0762acb\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:43:51.028Z\",\n        \"updatedAt\": \"2018-04-04T04:43:51.028Z\"\n    },\n    {\n        \"id\": \"5ac45817c89e2c1d1ae03485\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:07.227Z\",\n        \"updatedAt\": \"2018-04-04T04:44:07.227Z\"\n    },\n    {\n        \"id\": \"5ac45819c89e2c1d1ae03487\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:09.680Z\",\n        \"updatedAt\": \"2018-04-04T04:44:09.680Z\"\n    },\n    {\n        \"id\": \"5ac4581ac89e2c1d1ae03488\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:10.144Z\",\n        \"updatedAt\": \"2018-04-04T04:44:10.144Z\"\n    },\n    {\n        \"id\": \"5ac4581bc89e2c1d1ae0348a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:11.292Z\",\n        \"updatedAt\": \"2018-04-04T04:44:11.292Z\"\n    },\n    {\n        \"id\": \"5ac4581cc89e2c1d1ae0348c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:12.669Z\",\n        \"updatedAt\": \"2018-04-04T04:44:12.669Z\"\n    },\n    {\n        \"id\": \"5ac4581dc89e2c1d1ae0348e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:13.739Z\",\n        \"updatedAt\": \"2018-04-04T04:44:13.739Z\"\n    },\n    {\n        \"id\": \"5ac4581ec89e2c1d1ae03491\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:14.759Z\",\n        \"updatedAt\": \"2018-04-04T04:44:14.759Z\"\n    },\n    {\n        \"id\": \"5ac4581fc89e2c1d1ae03493\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T04:44:15.785Z\",\n        \"updatedAt\": \"2018-04-04T04:44:16.792Z\"\n    },\n    {\n        \"id\": \"5ac45821c89e2c1d1ae03495\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:17.172Z\",\n        \"updatedAt\": \"2018-04-04T04:44:17.172Z\"\n    },\n    {\n        \"id\": \"5ac45822c89e2c1d1ae03497\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:44:18.553Z\",\n        \"updatedAt\": \"2018-04-04T04:44:18.553Z\"\n    },\n    {\n        \"id\": \"5ac45937c89e2c1e199850b4\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:48:55.071Z\",\n        \"updatedAt\": \"2018-04-04T04:48:55.071Z\"\n    },\n    {\n        \"id\": \"5ac45991c89e2c1e8f5c3856\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:50:25.128Z\",\n        \"updatedAt\": \"2018-04-04T04:50:25.128Z\"\n    },\n    {\n        \"id\": \"5ac459e7c89e2c1f0fcbd078\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:51:51.236Z\",\n        \"updatedAt\": \"2018-04-04T04:51:51.236Z\"\n    },\n    {\n        \"id\": \"5ac45a12c89e2c1f5e2ed595\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:34.592Z\",\n        \"updatedAt\": \"2018-04-04T04:52:34.592Z\"\n    },\n    {\n        \"id\": \"5ac45a14c89e2c1f5e2ed597\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:36.877Z\",\n        \"updatedAt\": \"2018-04-04T04:52:36.877Z\"\n    },\n    {\n        \"id\": \"5ac45a15c89e2c1f5e2ed599\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:37.615Z\",\n        \"updatedAt\": \"2018-04-04T04:52:37.615Z\"\n    },\n    {\n        \"id\": \"5ac45a16c89e2c1f5e2ed59b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:38.346Z\",\n        \"updatedAt\": \"2018-04-04T04:52:38.346Z\"\n    },\n    {\n        \"id\": \"5ac45a17c89e2c1f5e2ed59d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:39.080Z\",\n        \"updatedAt\": \"2018-04-04T04:52:39.080Z\"\n    },\n    {\n        \"id\": \"5ac45a17c89e2c1f5e2ed59f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:39.780Z\",\n        \"updatedAt\": \"2018-04-04T04:52:39.780Z\"\n    },\n    {\n        \"id\": \"5ac45a18c89e2c1f5e2ed5a1\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:40.472Z\",\n        \"updatedAt\": \"2018-04-04T04:52:40.472Z\"\n    },\n    {\n        \"id\": \"5ac45a19c89e2c1f5e2ed5a3\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:41.163Z\",\n        \"updatedAt\": \"2018-04-04T04:52:41.163Z\"\n    },\n    {\n        \"id\": \"5ac45a19c89e2c1f5e2ed5a5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:41.852Z\",\n        \"updatedAt\": \"2018-04-04T04:52:41.852Z\"\n    },\n    {\n        \"id\": \"5ac45a1ac89e2c1f5e2ed5a7\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:42.532Z\",\n        \"updatedAt\": \"2018-04-04T04:52:42.532Z\"\n    },\n    {\n        \"id\": \"5ac45a1bc89e2c1f5e2ed5a9\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:52:43.242Z\",\n        \"updatedAt\": \"2018-04-04T04:52:43.242Z\"\n    },\n    {\n        \"id\": \"5ac45a83c89e2c1fb9c5960d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:54:27.087Z\",\n        \"updatedAt\": \"2018-04-04T04:54:27.087Z\"\n    },\n    {\n        \"id\": \"5ac45abbc89e2c1fff42a0f1\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:55:23.473Z\",\n        \"updatedAt\": \"2018-04-04T04:55:23.473Z\"\n    },\n    {\n        \"id\": \"5ac45b2ec89e2c209ec50abb\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:57:18.756Z\",\n        \"updatedAt\": \"2018-04-04T04:57:18.756Z\"\n    },\n    {\n        \"id\": \"5ac45b9cc89e2c20fcef256f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T04:59:08.534Z\",\n        \"updatedAt\": \"2018-04-04T04:59:08.534Z\"\n    },\n    {\n        \"id\": \"5ac45c7bc89e2c21b9103144\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:02:51.879Z\",\n        \"updatedAt\": \"2018-04-04T05:02:51.879Z\"\n    },\n    {\n        \"id\": \"5ac45c94c89e2c21f2739604\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:03:16.760Z\",\n        \"updatedAt\": \"2018-04-04T05:03:16.760Z\"\n    },\n    {\n        \"id\": \"5ac45d3cc89e2c228166cf08\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:06:04.159Z\",\n        \"updatedAt\": \"2018-04-04T05:06:04.159Z\"\n    },\n    {\n        \"id\": \"5ac45dd3c89e2c2320dd6f8d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:08:35.564Z\",\n        \"updatedAt\": \"2018-04-04T05:08:35.564Z\"\n    },\n    {\n        \"id\": \"5ac45f93c89e2c23f5c20559\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:16:03.580Z\",\n        \"updatedAt\": \"2018-04-04T05:16:03.580Z\"\n    },\n    {\n        \"id\": \"5ac45fb5c89e2c24774f5480\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:16:37.570Z\",\n        \"updatedAt\": \"2018-04-04T05:16:37.570Z\"\n    },\n    {\n        \"id\": \"5ac45fd0c89e2c24ad65e85b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:04.211Z\",\n        \"updatedAt\": \"2018-04-04T05:17:04.211Z\"\n    },\n    {\n        \"id\": \"5ac45fd2c89e2c24ad65e85d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:06.555Z\",\n        \"updatedAt\": \"2018-04-04T05:17:06.555Z\"\n    },\n    {\n        \"id\": \"5ac45fd2c89e2c24ad65e85e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:06.954Z\",\n        \"updatedAt\": \"2018-04-04T05:17:06.954Z\"\n    },\n    {\n        \"id\": \"5ac45fd3c89e2c24ad65e860\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:07.721Z\",\n        \"updatedAt\": \"2018-04-04T05:17:07.721Z\"\n    },\n    {\n        \"id\": \"5ac45fd4c89e2c24ad65e862\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:08.486Z\",\n        \"updatedAt\": \"2018-04-04T05:17:08.486Z\"\n    },\n    {\n        \"id\": \"5ac45fd5c89e2c24ad65e864\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:09.716Z\",\n        \"updatedAt\": \"2018-04-04T05:17:09.716Z\"\n    },\n    {\n        \"id\": \"5ac45fd6c89e2c24ad65e866\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:10.437Z\",\n        \"updatedAt\": \"2018-04-04T05:17:10.437Z\"\n    },\n    {\n        \"id\": \"5ac45fd7c89e2c24ad65e868\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T05:17:11.521Z\",\n        \"updatedAt\": \"2018-04-04T05:17:12.619Z\"\n    },\n    {\n        \"id\": \"5ac45fd9c89e2c24ad65e86a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:13.022Z\",\n        \"updatedAt\": \"2018-04-04T05:17:13.022Z\"\n    },\n    {\n        \"id\": \"5ac45fd9c89e2c24ad65e86c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:17:13.794Z\",\n        \"updatedAt\": \"2018-04-04T05:17:13.794Z\"\n    },\n    {\n        \"id\": \"5ac46058c89e2c255f352104\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:20.662Z\",\n        \"updatedAt\": \"2018-04-04T05:19:20.662Z\"\n    },\n    {\n        \"id\": \"5ac4605ac89e2c255f352106\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:22.927Z\",\n        \"updatedAt\": \"2018-04-04T05:19:22.927Z\"\n    },\n    {\n        \"id\": \"5ac4605bc89e2c255f352107\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:23.295Z\",\n        \"updatedAt\": \"2018-04-04T05:19:23.295Z\"\n    },\n    {\n        \"id\": \"5ac4605cc89e2c255f352109\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:24.386Z\",\n        \"updatedAt\": \"2018-04-04T05:19:24.386Z\"\n    },\n    {\n        \"id\": \"5ac4605dc89e2c255f35210b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:25.770Z\",\n        \"updatedAt\": \"2018-04-04T05:19:25.770Z\"\n    },\n    {\n        \"id\": \"5ac4605ec89e2c255f35210d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:26.902Z\",\n        \"updatedAt\": \"2018-04-04T05:19:26.902Z\"\n    },\n    {\n        \"id\": \"5ac4605fc89e2c255f352110\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:27.935Z\",\n        \"updatedAt\": \"2018-04-04T05:19:27.935Z\"\n    },\n    {\n        \"id\": \"5ac46060c89e2c255f352112\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T05:19:28.990Z\",\n        \"updatedAt\": \"2018-04-04T05:19:30.011Z\"\n    },\n    {\n        \"id\": \"5ac46062c89e2c255f352114\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:30.359Z\",\n        \"updatedAt\": \"2018-04-04T05:19:30.359Z\"\n    },\n    {\n        \"id\": \"5ac46063c89e2c255f352116\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:19:31.725Z\",\n        \"updatedAt\": \"2018-04-04T05:19:31.725Z\"\n    },\n    {\n        \"id\": \"5ac460bdc89e2c25f6cf090a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:01.463Z\",\n        \"updatedAt\": \"2018-04-04T05:21:01.463Z\"\n    },\n    {\n        \"id\": \"5ac460bfc89e2c25f6cf090c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:03.730Z\",\n        \"updatedAt\": \"2018-04-04T05:21:03.730Z\"\n    },\n    {\n        \"id\": \"5ac460c0c89e2c25f6cf090d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:04.114Z\",\n        \"updatedAt\": \"2018-04-04T05:21:04.114Z\"\n    },\n    {\n        \"id\": \"5ac460c1c89e2c25f6cf090f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:05.150Z\",\n        \"updatedAt\": \"2018-04-04T05:21:05.150Z\"\n    },\n    {\n        \"id\": \"5ac460c2c89e2c25f6cf0911\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:06.538Z\",\n        \"updatedAt\": \"2018-04-04T05:21:06.538Z\"\n    },\n    {\n        \"id\": \"5ac460c3c89e2c25f6cf0913\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:07.658Z\",\n        \"updatedAt\": \"2018-04-04T05:21:07.658Z\"\n    },\n    {\n        \"id\": \"5ac460c4c89e2c25f6cf0916\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:08.685Z\",\n        \"updatedAt\": \"2018-04-04T05:21:08.685Z\"\n    },\n    {\n        \"id\": \"5ac460c5c89e2c25f6cf0918\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T05:21:09.713Z\",\n        \"updatedAt\": \"2018-04-04T05:21:10.713Z\"\n    },\n    {\n        \"id\": \"5ac460c7c89e2c25f6cf091a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:11.069Z\",\n        \"updatedAt\": \"2018-04-04T05:21:11.069Z\"\n    },\n    {\n        \"id\": \"5ac460c8c89e2c25f6cf091c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:21:12.426Z\",\n        \"updatedAt\": \"2018-04-04T05:21:12.426Z\"\n    },\n    {\n        \"id\": \"5ac46147c89e2c26c3c4ec93\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:23:19.552Z\",\n        \"updatedAt\": \"2018-04-04T05:23:19.552Z\"\n    },\n    {\n        \"id\": \"5ac46160c89e2c26fa2605ca\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:23:44.503Z\",\n        \"updatedAt\": \"2018-04-04T05:23:44.503Z\"\n    },\n    {\n        \"id\": \"5ac46196c89e2c273f50d1cc\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:24:38.526Z\",\n        \"updatedAt\": \"2018-04-04T05:24:38.526Z\"\n    },\n    {\n        \"id\": \"5ac461c3c89e2c2787bb4efb\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:25:22.974Z\",\n        \"updatedAt\": \"2018-04-04T05:25:22.974Z\"\n    },\n    {\n        \"id\": \"5ac461e3c89e2c27c552859f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:25:55.006Z\",\n        \"updatedAt\": \"2018-04-04T05:25:55.006Z\"\n    },\n    {\n        \"id\": \"5ac46253c89e2c28a121be4e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:27:47.107Z\",\n        \"updatedAt\": \"2018-04-04T05:27:47.107Z\"\n    },\n    {\n        \"id\": \"5ac46261c89e2c28d74c817b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:01.451Z\",\n        \"updatedAt\": \"2018-04-04T05:28:01.451Z\"\n    },\n    {\n        \"id\": \"5ac46263c89e2c28d74c817d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:03.832Z\",\n        \"updatedAt\": \"2018-04-04T05:28:03.832Z\"\n    },\n    {\n        \"id\": \"5ac46264c89e2c28d74c817e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:04.205Z\",\n        \"updatedAt\": \"2018-04-04T05:28:04.205Z\"\n    },\n    {\n        \"id\": \"5ac46265c89e2c28d74c8180\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:05.339Z\",\n        \"updatedAt\": \"2018-04-04T05:28:05.339Z\"\n    },\n    {\n        \"id\": \"5ac46266c89e2c28d74c8182\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:06.842Z\",\n        \"updatedAt\": \"2018-04-04T05:28:06.842Z\"\n    },\n    {\n        \"id\": \"5ac46268c89e2c28d74c8184\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:08.459Z\",\n        \"updatedAt\": \"2018-04-04T05:28:08.459Z\"\n    },\n    {\n        \"id\": \"5ac46269c89e2c28d74c8187\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:09.512Z\",\n        \"updatedAt\": \"2018-04-04T05:28:09.512Z\"\n    },\n    {\n        \"id\": \"5ac4626ac89e2c28d74c8189\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T05:28:10.618Z\",\n        \"updatedAt\": \"2018-04-04T05:28:11.743Z\"\n    },\n    {\n        \"id\": \"5ac4626cc89e2c28d74c818b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:12.127Z\",\n        \"updatedAt\": \"2018-04-04T05:28:12.127Z\"\n    },\n    {\n        \"id\": \"5ac4626dc89e2c28d74c818d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:13.631Z\",\n        \"updatedAt\": \"2018-04-04T05:28:13.631Z\"\n    },\n    {\n        \"id\": \"5ac4628fc89e2c290f868caa\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:28:47.514Z\",\n        \"updatedAt\": \"2018-04-04T05:28:47.514Z\"\n    },\n    {\n        \"id\": \"5ac46325c89e2c299ea5b2e5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:31:17.316Z\",\n        \"updatedAt\": \"2018-04-04T05:31:17.316Z\"\n    },\n    {\n        \"id\": \"5ac46367c89e2c2a4e808e82\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:32:23.088Z\",\n        \"updatedAt\": \"2018-04-04T05:32:23.088Z\"\n    },\n    {\n        \"id\": \"5ac4642ac89e2c2b05436163\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:35:38.495Z\",\n        \"updatedAt\": \"2018-04-04T05:35:38.495Z\"\n    },\n    {\n        \"id\": \"5ac46441c89e2c2b4afc6673\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:01.906Z\",\n        \"updatedAt\": \"2018-04-04T05:36:01.906Z\"\n    },\n    {\n        \"id\": \"5ac46444c89e2c2b4afc6675\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:04.384Z\",\n        \"updatedAt\": \"2018-04-04T05:36:04.384Z\"\n    },\n    {\n        \"id\": \"5ac46445c89e2c2b4afc6677\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:05.135Z\",\n        \"updatedAt\": \"2018-04-04T05:36:05.135Z\"\n    },\n    {\n        \"id\": \"5ac46445c89e2c2b4afc6679\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:05.883Z\",\n        \"updatedAt\": \"2018-04-04T05:36:05.883Z\"\n    },\n    {\n        \"id\": \"5ac46446c89e2c2b4afc667b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:06.570Z\",\n        \"updatedAt\": \"2018-04-04T05:36:06.570Z\"\n    },\n    {\n        \"id\": \"5ac46448c89e2c2b4afc667d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:08.224Z\",\n        \"updatedAt\": \"2018-04-04T05:36:08.224Z\"\n    },\n    {\n        \"id\": \"5ac46448c89e2c2b4afc667f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:08.929Z\",\n        \"updatedAt\": \"2018-04-04T05:36:08.929Z\"\n    },\n    {\n        \"id\": \"5ac46449c89e2c2b4afc6681\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:09.617Z\",\n        \"updatedAt\": \"2018-04-04T05:36:09.617Z\"\n    },\n    {\n        \"id\": \"5ac4644ac89e2c2b4afc6683\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:10.323Z\",\n        \"updatedAt\": \"2018-04-04T05:36:10.323Z\"\n    },\n    {\n        \"id\": \"5ac4644bc89e2c2b4afc6685\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:11.011Z\",\n        \"updatedAt\": \"2018-04-04T05:36:11.011Z\"\n    },\n    {\n        \"id\": \"5ac4644bc89e2c2b4afc6687\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:36:11.692Z\",\n        \"updatedAt\": \"2018-04-04T05:36:11.692Z\"\n    },\n    {\n        \"id\": \"5ac46495c89e2c2bd435d17e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:25.871Z\",\n        \"updatedAt\": \"2018-04-04T05:37:25.871Z\"\n    },\n    {\n        \"id\": \"5ac46498c89e2c2bd435d180\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:28.369Z\",\n        \"updatedAt\": \"2018-04-04T05:37:28.369Z\"\n    },\n    {\n        \"id\": \"5ac46499c89e2c2bd435d182\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:29.117Z\",\n        \"updatedAt\": \"2018-04-04T05:37:29.117Z\"\n    },\n    {\n        \"id\": \"5ac46499c89e2c2bd435d184\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:29.839Z\",\n        \"updatedAt\": \"2018-04-04T05:37:29.839Z\"\n    },\n    {\n        \"id\": \"5ac4649ac89e2c2bd435d186\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:30.539Z\",\n        \"updatedAt\": \"2018-04-04T05:37:30.539Z\"\n    },\n    {\n        \"id\": \"5ac4649bc89e2c2bd435d188\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:31.530Z\",\n        \"updatedAt\": \"2018-04-04T05:37:31.530Z\"\n    },\n    {\n        \"id\": \"5ac4649cc89e2c2bd435d18a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:32.218Z\",\n        \"updatedAt\": \"2018-04-04T05:37:32.218Z\"\n    },\n    {\n        \"id\": \"5ac4649cc89e2c2bd435d18c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:32.914Z\",\n        \"updatedAt\": \"2018-04-04T05:37:32.914Z\"\n    },\n    {\n        \"id\": \"5ac4649dc89e2c2bd435d18e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:33.642Z\",\n        \"updatedAt\": \"2018-04-04T05:37:33.642Z\"\n    },\n    {\n        \"id\": \"5ac4649ec89e2c2bd435d190\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:34.331Z\",\n        \"updatedAt\": \"2018-04-04T05:37:34.331Z\"\n    },\n    {\n        \"id\": \"5ac4649fc89e2c2bd435d192\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:37:35.047Z\",\n        \"updatedAt\": \"2018-04-04T05:37:35.047Z\"\n    },\n    {\n        \"id\": \"5ac464f7c89e2c2c28d81aea\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:03.865Z\",\n        \"updatedAt\": \"2018-04-04T05:39:03.865Z\"\n    },\n    {\n        \"id\": \"5ac464fac89e2c2c28d81aec\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:06.603Z\",\n        \"updatedAt\": \"2018-04-04T05:39:06.603Z\"\n    },\n    {\n        \"id\": \"5ac464fcc89e2c2c28d81aee\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:08.065Z\",\n        \"updatedAt\": \"2018-04-04T05:39:08.065Z\"\n    },\n    {\n        \"id\": \"5ac464fcc89e2c2c28d81af0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:08.746Z\",\n        \"updatedAt\": \"2018-04-04T05:39:08.746Z\"\n    },\n    {\n        \"id\": \"5ac464fec89e2c2c28d81af2\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:10.165Z\",\n        \"updatedAt\": \"2018-04-04T05:39:10.165Z\"\n    },\n    {\n        \"id\": \"5ac464fec89e2c2c28d81af4\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:10.986Z\",\n        \"updatedAt\": \"2018-04-04T05:39:10.986Z\"\n    },\n    {\n        \"id\": \"5ac46500c89e2c2c28d81af6\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:12.471Z\",\n        \"updatedAt\": \"2018-04-04T05:39:12.471Z\"\n    },\n    {\n        \"id\": \"5ac46501c89e2c2c28d81af8\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:13.201Z\",\n        \"updatedAt\": \"2018-04-04T05:39:13.201Z\"\n    },\n    {\n        \"id\": \"5ac46501c89e2c2c28d81afa\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:13.964Z\",\n        \"updatedAt\": \"2018-04-04T05:39:13.964Z\"\n    },\n    {\n        \"id\": \"5ac46503c89e2c2c28d81afc\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:39:15.368Z\",\n        \"updatedAt\": \"2018-04-04T05:39:15.368Z\"\n    },\n    {\n        \"id\": \"5ac4655ec89e2c2ca226fcca\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:40:46.520Z\",\n        \"updatedAt\": \"2018-04-04T05:40:46.520Z\"\n    },\n    {\n        \"id\": \"5ac46578c89e2c2cd712c02d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:41:12.750Z\",\n        \"updatedAt\": \"2018-04-04T05:41:12.750Z\"\n    },\n    {\n        \"id\": \"5ac465bac89e2c2d548369b9\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:42:18.016Z\",\n        \"updatedAt\": \"2018-04-04T05:42:18.016Z\"\n    },\n    {\n        \"id\": \"5ac46628c89e2c2ddfb3aa2d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:44:08.947Z\",\n        \"updatedAt\": \"2018-04-04T05:44:08.947Z\"\n    },\n    {\n        \"id\": \"5ac4662bc89e2c2ddfb3aa2f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:44:11.435Z\",\n        \"updatedAt\": \"2018-04-04T05:44:11.435Z\"\n    },\n    {\n        \"id\": \"5ac46655c89e2c2e2ef7f0c3\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:44:53.837Z\",\n        \"updatedAt\": \"2018-04-04T05:44:53.837Z\"\n    },\n    {\n        \"id\": \"5ac46744c89e2c2ee13c0cff\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:48:52.323Z\",\n        \"updatedAt\": \"2018-04-04T05:48:52.323Z\"\n    },\n    {\n        \"id\": \"5ac467ffc89e2c2fb775af56\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:51:59.023Z\",\n        \"updatedAt\": \"2018-04-04T05:51:59.023Z\"\n    },\n    {\n        \"id\": \"5ac46801c89e2c2fb775af58\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:52:01.328Z\",\n        \"updatedAt\": \"2018-04-04T05:52:01.328Z\"\n    },\n    {\n        \"id\": \"5ac46801c89e2c2fb775af59\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:52:01.694Z\",\n        \"updatedAt\": \"2018-04-04T05:52:01.694Z\"\n    },\n    {\n        \"id\": \"5ac46802c89e2c2fb775af5b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:52:02.763Z\",\n        \"updatedAt\": \"2018-04-04T05:52:02.763Z\"\n    },\n    {\n        \"id\": \"5ac46804c89e2c2fb775af5d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:52:04.191Z\",\n        \"updatedAt\": \"2018-04-04T05:52:04.191Z\"\n    },\n    {\n        \"id\": \"5ac46805c89e2c2fb775af5f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:52:05.958Z\",\n        \"updatedAt\": \"2018-04-04T05:52:05.958Z\"\n    },\n    {\n        \"id\": \"5ac46806c89e2c2fb775af62\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:52:06.982Z\",\n        \"updatedAt\": \"2018-04-04T05:52:06.982Z\"\n    },\n    {\n        \"id\": \"5ac46807c89e2c2fb775af64\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T05:52:07.992Z\",\n        \"updatedAt\": \"2018-04-04T05:52:08.971Z\"\n    },\n    {\n        \"id\": \"5ac46809c89e2c2fb775af66\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:52:09.326Z\",\n        \"updatedAt\": \"2018-04-04T05:52:09.326Z\"\n    },\n    {\n        \"id\": \"5ac4680ac89e2c2fb775af68\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:52:10.659Z\",\n        \"updatedAt\": \"2018-04-04T05:52:10.659Z\"\n    },\n    {\n        \"id\": \"5ac46845c89e2c300798b4db\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:09.588Z\",\n        \"updatedAt\": \"2018-04-04T05:53:09.588Z\"\n    },\n    {\n        \"id\": \"5ac46847c89e2c300798b4dd\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:11.892Z\",\n        \"updatedAt\": \"2018-04-04T05:53:11.892Z\"\n    },\n    {\n        \"id\": \"5ac46848c89e2c300798b4df\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:12.604Z\",\n        \"updatedAt\": \"2018-04-04T05:53:12.604Z\"\n    },\n    {\n        \"id\": \"5ac46849c89e2c300798b4e1\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:13.357Z\",\n        \"updatedAt\": \"2018-04-04T05:53:13.357Z\"\n    },\n    {\n        \"id\": \"5ac4684ac89e2c300798b4e3\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:14.616Z\",\n        \"updatedAt\": \"2018-04-04T05:53:14.616Z\"\n    },\n    {\n        \"id\": \"5ac4684bc89e2c300798b4e5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:15.305Z\",\n        \"updatedAt\": \"2018-04-04T05:53:15.305Z\"\n    },\n    {\n        \"id\": \"5ac4684bc89e2c300798b4e7\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:15.996Z\",\n        \"updatedAt\": \"2018-04-04T05:53:15.996Z\"\n    },\n    {\n        \"id\": \"5ac4684cc89e2c300798b4e9\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:16.665Z\",\n        \"updatedAt\": \"2018-04-04T05:53:16.665Z\"\n    },\n    {\n        \"id\": \"5ac4684dc89e2c300798b4eb\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:17.352Z\",\n        \"updatedAt\": \"2018-04-04T05:53:17.352Z\"\n    },\n    {\n        \"id\": \"5ac4684ec89e2c300798b4ed\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T05:53:18.083Z\",\n        \"updatedAt\": \"2018-04-04T05:53:18.083Z\"\n    },\n    {\n        \"id\": \"5ac46ff0c89e2c32e89a52b3\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:25:52.688Z\",\n        \"updatedAt\": \"2018-04-04T06:25:52.688Z\"\n    },\n    {\n        \"id\": \"5ac46ff2c89e2c32e89a52b5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:25:54.942Z\",\n        \"updatedAt\": \"2018-04-04T06:25:54.942Z\"\n    },\n    {\n        \"id\": \"5ac46ff3c89e2c32e89a52b6\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:25:55.323Z\",\n        \"updatedAt\": \"2018-04-04T06:25:55.323Z\"\n    },\n    {\n        \"id\": \"5ac46ff4c89e2c32e89a52b8\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:25:56.375Z\",\n        \"updatedAt\": \"2018-04-04T06:25:56.375Z\"\n    },\n    {\n        \"id\": \"5ac46ff5c89e2c32e89a52ba\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:25:57.829Z\",\n        \"updatedAt\": \"2018-04-04T06:25:57.829Z\"\n    },\n    {\n        \"id\": \"5ac46ff7c89e2c32e89a52bc\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:25:59.665Z\",\n        \"updatedAt\": \"2018-04-04T06:25:59.665Z\"\n    },\n    {\n        \"id\": \"5ac46ff8c89e2c32e89a52bf\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:26:00.688Z\",\n        \"updatedAt\": \"2018-04-04T06:26:00.688Z\"\n    },\n    {\n        \"id\": \"5ac46ff9c89e2c32e89a52c1\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:26:01.765Z\",\n        \"updatedAt\": \"2018-04-04T06:26:02.757Z\"\n    },\n    {\n        \"id\": \"5ac46ffbc89e2c32e89a52c3\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:26:03.123Z\",\n        \"updatedAt\": \"2018-04-04T06:26:03.123Z\"\n    },\n    {\n        \"id\": \"5ac46ffcc89e2c32e89a52c5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:26:04.502Z\",\n        \"updatedAt\": \"2018-04-04T06:26:04.502Z\"\n    },\n    {\n        \"id\": \"5ac47104c89e2c33ba8fe070\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:30:28.187Z\",\n        \"updatedAt\": \"2018-04-04T06:30:30.950Z\"\n    },\n    {\n        \"id\": \"5ac47185c89e2c3492fca781\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:32:37.225Z\",\n        \"updatedAt\": \"2018-04-04T06:32:39.842Z\"\n    },\n    {\n        \"id\": \"5ac471f3c89e2c351d8d42d4\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:34:27.281Z\",\n        \"updatedAt\": \"2018-04-04T06:34:27.281Z\"\n    },\n    {\n        \"id\": \"5ac472f8c89e2c36539828bd\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:38:48.663Z\",\n        \"updatedAt\": \"2018-04-04T06:38:48.663Z\"\n    },\n    {\n        \"id\": \"5ac472fac89e2c36539828bf\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:38:50.865Z\",\n        \"updatedAt\": \"2018-04-04T06:38:50.865Z\"\n    },\n    {\n        \"id\": \"5ac472fbc89e2c36539828c0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:38:51.233Z\",\n        \"updatedAt\": \"2018-04-04T06:38:51.233Z\"\n    },\n    {\n        \"id\": \"5ac472fcc89e2c36539828c2\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:38:52.289Z\",\n        \"updatedAt\": \"2018-04-04T06:38:52.289Z\"\n    },\n    {\n        \"id\": \"5ac472fdc89e2c36539828c4\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:38:53.669Z\",\n        \"updatedAt\": \"2018-04-04T06:38:53.669Z\"\n    },\n    {\n        \"id\": \"5ac472ffc89e2c36539828c6\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:38:55.514Z\",\n        \"updatedAt\": \"2018-04-04T06:38:55.514Z\"\n    },\n    {\n        \"id\": \"5ac47300c89e2c36539828c9\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:38:56.529Z\",\n        \"updatedAt\": \"2018-04-04T06:38:56.529Z\"\n    },\n    {\n        \"id\": \"5ac47301c89e2c36539828cb\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:38:57.601Z\",\n        \"updatedAt\": \"2018-04-04T06:38:58.702Z\"\n    },\n    {\n        \"id\": \"5ac47303c89e2c36539828cd\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:38:59.125Z\",\n        \"updatedAt\": \"2018-04-04T06:38:59.125Z\"\n    },\n    {\n        \"id\": \"5ac47304c89e2c36539828cf\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:00.570Z\",\n        \"updatedAt\": \"2018-04-04T06:39:00.570Z\"\n    },\n    {\n        \"id\": \"5ac4732bc89e2c368f45da8d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:39.525Z\",\n        \"updatedAt\": \"2018-04-04T06:39:39.525Z\"\n    },\n    {\n        \"id\": \"5ac4732dc89e2c368f45da8f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:41.970Z\",\n        \"updatedAt\": \"2018-04-04T06:39:41.970Z\"\n    },\n    {\n        \"id\": \"5ac4732ec89e2c368f45da91\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:42.871Z\",\n        \"updatedAt\": \"2018-04-04T06:39:42.871Z\"\n    },\n    {\n        \"id\": \"5ac4732fc89e2c368f45da93\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:43.828Z\",\n        \"updatedAt\": \"2018-04-04T06:39:43.828Z\"\n    },\n    {\n        \"id\": \"5ac47330c89e2c368f45da95\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:44.669Z\",\n        \"updatedAt\": \"2018-04-04T06:39:44.669Z\"\n    },\n    {\n        \"id\": \"5ac47331c89e2c368f45da97\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:45.520Z\",\n        \"updatedAt\": \"2018-04-04T06:39:45.520Z\"\n    },\n    {\n        \"id\": \"5ac47332c89e2c368f45da99\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:46.212Z\",\n        \"updatedAt\": \"2018-04-04T06:39:46.212Z\"\n    },\n    {\n        \"id\": \"5ac47332c89e2c368f45da9b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:46.894Z\",\n        \"updatedAt\": \"2018-04-04T06:39:46.894Z\"\n    },\n    {\n        \"id\": \"5ac47333c89e2c368f45da9d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:47.584Z\",\n        \"updatedAt\": \"2018-04-04T06:39:47.584Z\"\n    },\n    {\n        \"id\": \"5ac47334c89e2c368f45da9f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:39:48.268Z\",\n        \"updatedAt\": \"2018-04-04T06:39:48.268Z\"\n    },\n    {\n        \"id\": \"5ac4742bc89e2c37df286f8e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:43:55.570Z\",\n        \"updatedAt\": \"2018-04-04T06:43:55.570Z\"\n    },\n    {\n        \"id\": \"5ac4742dc89e2c37df286f90\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:43:57.878Z\",\n        \"updatedAt\": \"2018-04-04T06:43:57.878Z\"\n    },\n    {\n        \"id\": \"5ac4742ec89e2c37df286f91\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:43:58.258Z\",\n        \"updatedAt\": \"2018-04-04T06:43:58.258Z\"\n    },\n    {\n        \"id\": \"5ac4742fc89e2c37df286f93\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:43:59.316Z\",\n        \"updatedAt\": \"2018-04-04T06:43:59.316Z\"\n    },\n    {\n        \"id\": \"5ac47430c89e2c37df286f95\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:00.722Z\",\n        \"updatedAt\": \"2018-04-04T06:44:00.722Z\"\n    },\n    {\n        \"id\": \"5ac47432c89e2c37df286f97\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:02.528Z\",\n        \"updatedAt\": \"2018-04-04T06:44:02.528Z\"\n    },\n    {\n        \"id\": \"5ac47433c89e2c37df286f9a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:03.555Z\",\n        \"updatedAt\": \"2018-04-04T06:44:03.555Z\"\n    },\n    {\n        \"id\": \"5ac47434c89e2c37df286f9c\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:44:04.576Z\",\n        \"updatedAt\": \"2018-04-04T06:44:05.573Z\"\n    },\n    {\n        \"id\": \"5ac47435c89e2c37df286f9e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:05.947Z\",\n        \"updatedAt\": \"2018-04-04T06:44:05.947Z\"\n    },\n    {\n        \"id\": \"5ac47437c89e2c37df286fa0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:07.299Z\",\n        \"updatedAt\": \"2018-04-04T06:44:07.299Z\"\n    },\n    {\n        \"id\": \"5ac47465c89e2c382f3d2c34\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:53.156Z\",\n        \"updatedAt\": \"2018-04-04T06:44:53.156Z\"\n    },\n    {\n        \"id\": \"5ac47467c89e2c382f3d2c36\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:55.383Z\",\n        \"updatedAt\": \"2018-04-04T06:44:55.383Z\"\n    },\n    {\n        \"id\": \"5ac47467c89e2c382f3d2c37\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:55.758Z\",\n        \"updatedAt\": \"2018-04-04T06:44:55.758Z\"\n    },\n    {\n        \"id\": \"5ac47468c89e2c382f3d2c39\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:56.815Z\",\n        \"updatedAt\": \"2018-04-04T06:44:56.815Z\"\n    },\n    {\n        \"id\": \"5ac4746ac89e2c382f3d2c3b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:44:58.191Z\",\n        \"updatedAt\": \"2018-04-04T06:44:58.191Z\"\n    },\n    {\n        \"id\": \"5ac4746cc89e2c382f3d2c3d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:45:00.027Z\",\n        \"updatedAt\": \"2018-04-04T06:45:00.027Z\"\n    },\n    {\n        \"id\": \"5ac4746dc89e2c382f3d2c40\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:45:01.057Z\",\n        \"updatedAt\": \"2018-04-04T06:45:01.057Z\"\n    },\n    {\n        \"id\": \"5ac4746ec89e2c382f3d2c42\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:45:02.068Z\",\n        \"updatedAt\": \"2018-04-04T06:45:03.060Z\"\n    },\n    {\n        \"id\": \"5ac4746fc89e2c382f3d2c44\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:45:03.408Z\",\n        \"updatedAt\": \"2018-04-04T06:45:03.408Z\"\n    },\n    {\n        \"id\": \"5ac47470c89e2c382f3d2c46\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:45:04.777Z\",\n        \"updatedAt\": \"2018-04-04T06:45:04.777Z\"\n    },\n    {\n        \"id\": \"5ac4748ac89e2c386b64fe84\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:45:30.943Z\",\n        \"updatedAt\": \"2018-04-04T06:45:33.608Z\"\n    },\n    {\n        \"id\": \"5ac474bcc89e2c38b4fb6071\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:46:20.214Z\",\n        \"updatedAt\": \"2018-04-04T06:46:20.214Z\"\n    },\n    {\n        \"id\": \"5ac474dac89e2c393abff106\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:46:50.883Z\",\n        \"updatedAt\": \"2018-04-04T06:46:50.883Z\"\n    },\n    {\n        \"id\": \"5ac474f7c89e2c398616792e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:19.140Z\",\n        \"updatedAt\": \"2018-04-04T06:47:19.140Z\"\n    },\n    {\n        \"id\": \"5ac474f9c89e2c3986167930\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:21.447Z\",\n        \"updatedAt\": \"2018-04-04T06:47:21.447Z\"\n    },\n    {\n        \"id\": \"5ac474fac89e2c3986167932\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:22.132Z\",\n        \"updatedAt\": \"2018-04-04T06:47:22.132Z\"\n    },\n    {\n        \"id\": \"5ac474fac89e2c3986167934\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:22.856Z\",\n        \"updatedAt\": \"2018-04-04T06:47:22.856Z\"\n    },\n    {\n        \"id\": \"5ac474fbc89e2c3986167936\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:23.555Z\",\n        \"updatedAt\": \"2018-04-04T06:47:23.555Z\"\n    },\n    {\n        \"id\": \"5ac474fcc89e2c3986167938\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:24.244Z\",\n        \"updatedAt\": \"2018-04-04T06:47:24.244Z\"\n    },\n    {\n        \"id\": \"5ac474fcc89e2c398616793a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:24.935Z\",\n        \"updatedAt\": \"2018-04-04T06:47:24.935Z\"\n    },\n    {\n        \"id\": \"5ac474fdc89e2c398616793c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:25.632Z\",\n        \"updatedAt\": \"2018-04-04T06:47:25.632Z\"\n    },\n    {\n        \"id\": \"5ac474fec89e2c398616793e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:26.350Z\",\n        \"updatedAt\": \"2018-04-04T06:47:26.350Z\"\n    },\n    {\n        \"id\": \"5ac474ffc89e2c3986167940\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:27.039Z\",\n        \"updatedAt\": \"2018-04-04T06:47:27.039Z\"\n    },\n    {\n        \"id\": \"5ac474ffc89e2c3986167942\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:47:27.732Z\",\n        \"updatedAt\": \"2018-04-04T06:47:27.732Z\"\n    },\n    {\n        \"id\": \"5ac47548c89e2c39ce878207\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:40.359Z\",\n        \"updatedAt\": \"2018-04-04T06:48:40.359Z\"\n    },\n    {\n        \"id\": \"5ac4754ac89e2c39ce878209\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:42.669Z\",\n        \"updatedAt\": \"2018-04-04T06:48:42.669Z\"\n    },\n    {\n        \"id\": \"5ac4754bc89e2c39ce87820a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:43.054Z\",\n        \"updatedAt\": \"2018-04-04T06:48:43.054Z\"\n    },\n    {\n        \"id\": \"5ac4754cc89e2c39ce87820c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:44.254Z\",\n        \"updatedAt\": \"2018-04-04T06:48:44.254Z\"\n    },\n    {\n        \"id\": \"5ac4754dc89e2c39ce87820e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:45.679Z\",\n        \"updatedAt\": \"2018-04-04T06:48:45.679Z\"\n    },\n    {\n        \"id\": \"5ac4754fc89e2c39ce878210\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:47.929Z\",\n        \"updatedAt\": \"2018-04-04T06:48:47.929Z\"\n    },\n    {\n        \"id\": \"5ac47551c89e2c39ce878213\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:49.050Z\",\n        \"updatedAt\": \"2018-04-04T06:48:49.050Z\"\n    },\n    {\n        \"id\": \"5ac47552c89e2c39ce878215\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:48:50.111Z\",\n        \"updatedAt\": \"2018-04-04T06:48:51.173Z\"\n    },\n    {\n        \"id\": \"5ac47553c89e2c39ce878217\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:48:51.525Z\",\n        \"updatedAt\": \"2018-04-04T06:48:52.532Z\"\n    },\n    {\n        \"id\": \"5ac47554c89e2c39ce878219\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:52.900Z\",\n        \"updatedAt\": \"2018-04-04T06:48:52.900Z\"\n    },\n    {\n        \"id\": \"5ac47556c89e2c39ce87821b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:48:54.258Z\",\n        \"updatedAt\": \"2018-04-04T06:48:54.258Z\"\n    },\n    {\n        \"id\": \"5ac475dec89e2c3a6812a01a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:10.231Z\",\n        \"updatedAt\": \"2018-04-04T06:51:10.231Z\"\n    },\n    {\n        \"id\": \"5ac475e0c89e2c3a6812a01c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:12.510Z\",\n        \"updatedAt\": \"2018-04-04T06:51:12.510Z\"\n    },\n    {\n        \"id\": \"5ac475e0c89e2c3a6812a01d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:12.920Z\",\n        \"updatedAt\": \"2018-04-04T06:51:12.920Z\"\n    },\n    {\n        \"id\": \"5ac475e1c89e2c3a6812a01f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:13.985Z\",\n        \"updatedAt\": \"2018-04-04T06:51:13.985Z\"\n    },\n    {\n        \"id\": \"5ac475e3c89e2c3a6812a021\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:15.372Z\",\n        \"updatedAt\": \"2018-04-04T06:51:15.372Z\"\n    },\n    {\n        \"id\": \"5ac475e5c89e2c3a6812a023\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:17.613Z\",\n        \"updatedAt\": \"2018-04-04T06:51:17.613Z\"\n    },\n    {\n        \"id\": \"5ac475e6c89e2c3a6812a026\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:18.618Z\",\n        \"updatedAt\": \"2018-04-04T06:51:18.618Z\"\n    },\n    {\n        \"id\": \"5ac475e7c89e2c3a6812a028\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:51:19.645Z\",\n        \"updatedAt\": \"2018-04-04T06:51:20.674Z\"\n    },\n    {\n        \"id\": \"5ac475e9c89e2c3a6812a02a\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T06:51:21.047Z\",\n        \"updatedAt\": \"2018-04-04T06:51:22.216Z\"\n    },\n    {\n        \"id\": \"5ac475eac89e2c3a6812a02c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:22.657Z\",\n        \"updatedAt\": \"2018-04-04T06:51:22.657Z\"\n    },\n    {\n        \"id\": \"5ac475ecc89e2c3a6812a02e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:51:24.162Z\",\n        \"updatedAt\": \"2018-04-04T06:51:24.162Z\"\n    },\n    {\n        \"id\": \"5ac47776c89e2c3b820cf7ea\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T06:57:58.396Z\",\n        \"updatedAt\": \"2018-04-04T06:57:58.396Z\"\n    },\n    {\n        \"id\": \"5ac4793dc89e2c3c8bfcd241\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:05:33.282Z\",\n        \"updatedAt\": \"2018-04-04T07:05:33.282Z\"\n    },\n    {\n        \"id\": \"5ac4795ec89e2c3ccd151f95\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:06:06.396Z\",\n        \"updatedAt\": \"2018-04-04T07:06:06.396Z\"\n    },\n    {\n        \"id\": \"5ac479e7c89e2c3d9045e9a8\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:08:23.596Z\",\n        \"updatedAt\": \"2018-04-04T07:08:23.596Z\"\n    },\n    {\n        \"id\": \"5ac47a00c89e2c3dc252fb24\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:08:48.880Z\",\n        \"updatedAt\": \"2018-04-04T07:08:48.880Z\"\n    },\n    {\n        \"id\": \"5ac47a26c89e2c3e170da210\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:09:26.905Z\",\n        \"updatedAt\": \"2018-04-04T07:09:26.905Z\"\n    },\n    {\n        \"id\": \"5ac47bb6c89e2c3f95e609c5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:16:06.625Z\",\n        \"updatedAt\": \"2018-04-04T07:16:06.625Z\"\n    },\n    {\n        \"id\": \"5ac47bcbc89e2c3ffabe5d03\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:16:27.211Z\",\n        \"updatedAt\": \"2018-04-04T07:16:27.211Z\"\n    },\n    {\n        \"id\": \"5ac47cd6c89e2c40b0f7416a\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T07:20:54.138Z\",\n        \"updatedAt\": \"2018-04-04T07:20:56.853Z\"\n    },\n    {\n        \"id\": \"5ac47dd5c89e2c417a1fce94\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:25:09.069Z\",\n        \"updatedAt\": \"2018-04-04T07:25:09.069Z\"\n    },\n    {\n        \"id\": \"5ac47ff3c89e2c42b1c15fc0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:34:11.195Z\",\n        \"updatedAt\": \"2018-04-04T07:34:11.195Z\"\n    },\n    {\n        \"id\": \"5ac480bbc89e2c435b8003a7\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:37:31.613Z\",\n        \"updatedAt\": \"2018-04-04T07:37:31.613Z\"\n    },\n    {\n        \"id\": \"5ac4827bc89e2c447401bc55\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:44:59.512Z\",\n        \"updatedAt\": \"2018-04-04T07:44:59.512Z\"\n    },\n    {\n        \"id\": \"5ac4827dc89e2c447401bc57\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:01.926Z\",\n        \"updatedAt\": \"2018-04-04T07:45:01.926Z\"\n    },\n    {\n        \"id\": \"5ac4827fc89e2c447401bc59\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:03.016Z\",\n        \"updatedAt\": \"2018-04-04T07:45:03.016Z\"\n    },\n    {\n        \"id\": \"5ac48280c89e2c447401bc5b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:04.400Z\",\n        \"updatedAt\": \"2018-04-04T07:45:04.400Z\"\n    },\n    {\n        \"id\": \"5ac48281c89e2c447401bc5d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:05.105Z\",\n        \"updatedAt\": \"2018-04-04T07:45:05.105Z\"\n    },\n    {\n        \"id\": \"5ac48282c89e2c447401bc60\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:06.115Z\",\n        \"updatedAt\": \"2018-04-04T07:45:06.115Z\"\n    },\n    {\n        \"id\": \"5ac48282c89e2c447401bc62\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:06.806Z\",\n        \"updatedAt\": \"2018-04-04T07:45:06.806Z\"\n    },\n    {\n        \"id\": \"5ac48283c89e2c447401bc64\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:07.539Z\",\n        \"updatedAt\": \"2018-04-04T07:45:07.539Z\"\n    },\n    {\n        \"id\": \"5ac48284c89e2c447401bc66\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:08.274Z\",\n        \"updatedAt\": \"2018-04-04T07:45:08.274Z\"\n    },\n    {\n        \"id\": \"5ac48285c89e2c447401bc68\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:09.631Z\",\n        \"updatedAt\": \"2018-04-04T07:45:09.631Z\"\n    },\n    {\n        \"id\": \"5ac48287c89e2c447401bc6a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:45:11.414Z\",\n        \"updatedAt\": \"2018-04-04T07:45:11.414Z\"\n    },\n    {\n        \"id\": \"5ac482eec89e2c44ef2aae4b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:46:54.896Z\",\n        \"updatedAt\": \"2018-04-04T07:46:54.896Z\"\n    },\n    {\n        \"id\": \"5ac482f1c89e2c44ef2aae4d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:46:57.194Z\",\n        \"updatedAt\": \"2018-04-04T07:46:57.194Z\"\n    },\n    {\n        \"id\": \"5ac482f1c89e2c44ef2aae4e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:46:57.583Z\",\n        \"updatedAt\": \"2018-04-04T07:46:57.583Z\"\n    },\n    {\n        \"id\": \"5ac482f2c89e2c44ef2aae50\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:46:58.645Z\",\n        \"updatedAt\": \"2018-04-04T07:46:58.645Z\"\n    },\n    {\n        \"id\": \"5ac482f4c89e2c44ef2aae52\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:47:00.025Z\",\n        \"updatedAt\": \"2018-04-04T07:47:00.025Z\"\n    },\n    {\n        \"id\": \"5ac482f6c89e2c44ef2aae54\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:47:02.198Z\",\n        \"updatedAt\": \"2018-04-04T07:47:02.198Z\"\n    },\n    {\n        \"id\": \"5ac482f7c89e2c44ef2aae57\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:47:03.262Z\",\n        \"updatedAt\": \"2018-04-04T07:47:03.262Z\"\n    },\n    {\n        \"id\": \"5ac482f8c89e2c44ef2aae59\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T07:47:04.327Z\",\n        \"updatedAt\": \"2018-04-04T07:47:05.312Z\"\n    },\n    {\n        \"id\": \"5ac482f9c89e2c44ef2aae5b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:47:05.657Z\",\n        \"updatedAt\": \"2018-04-04T07:47:05.657Z\"\n    },\n    {\n        \"id\": \"5ac482fac89e2c44ef2aae5d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:47:06.334Z\",\n        \"updatedAt\": \"2018-04-04T07:47:06.334Z\"\n    },\n    {\n        \"id\": \"5ac482fbc89e2c44ef2aae5f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:47:07.713Z\",\n        \"updatedAt\": \"2018-04-04T07:47:07.713Z\"\n    },\n    {\n        \"id\": \"5ac4839dc89e2c4543acd60e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:49:49.019Z\",\n        \"updatedAt\": \"2018-04-04T07:49:49.019Z\"\n    },\n    {\n        \"id\": \"5ac483b1c89e2c4543acd610\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:50:09.673Z\",\n        \"updatedAt\": \"2018-04-04T07:50:09.673Z\"\n    },\n    {\n        \"id\": \"5ac4841dc89e2c45d4685492\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:51:57.666Z\",\n        \"updatedAt\": \"2018-04-04T07:51:57.666Z\"\n    },\n    {\n        \"id\": \"5ac48423c89e2c460d10801b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:52:03.105Z\",\n        \"updatedAt\": \"2018-04-04T07:52:03.105Z\"\n    },\n    {\n        \"id\": \"5ac484b1c89e2c466c650f50\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:54:24.965Z\",\n        \"updatedAt\": \"2018-04-04T07:54:24.965Z\"\n    },\n    {\n        \"id\": \"5ac4854ac89e2c47682a2bea\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:56:58.720Z\",\n        \"updatedAt\": \"2018-04-04T07:56:58.720Z\"\n    },\n    {\n        \"id\": \"5ac4854cc89e2c47682a2bec\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:57:00.963Z\",\n        \"updatedAt\": \"2018-04-04T07:57:00.963Z\"\n    },\n    {\n        \"id\": \"5ac4854dc89e2c47682a2bed\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:57:01.343Z\",\n        \"updatedAt\": \"2018-04-04T07:57:01.343Z\"\n    },\n    {\n        \"id\": \"5ac4854ec89e2c47682a2bef\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:57:02.385Z\",\n        \"updatedAt\": \"2018-04-04T07:57:02.385Z\"\n    },\n    {\n        \"id\": \"5ac4854fc89e2c47682a2bf1\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:57:03.771Z\",\n        \"updatedAt\": \"2018-04-04T07:57:03.771Z\"\n    },\n    {\n        \"id\": \"5ac48551c89e2c47682a2bf3\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:57:05.967Z\",\n        \"updatedAt\": \"2018-04-04T07:57:05.967Z\"\n    },\n    {\n        \"id\": \"5ac48552c89e2c47682a2bf6\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:57:06.994Z\",\n        \"updatedAt\": \"2018-04-04T07:57:06.994Z\"\n    },\n    {\n        \"id\": \"5ac48554c89e2c47682a2bf8\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T07:57:08.015Z\",\n        \"updatedAt\": \"2018-04-04T07:57:09.003Z\"\n    },\n    {\n        \"id\": \"5ac48555c89e2c47682a2bfa\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:57:09.363Z\",\n        \"updatedAt\": \"2018-04-04T07:57:09.363Z\"\n    },\n    {\n        \"id\": \"5ac48556c89e2c47682a2bfc\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T07:57:10.757Z\",\n        \"updatedAt\": \"2018-04-04T07:57:10.757Z\"\n    },\n    {\n        \"id\": \"5ac48710c89e2c485a3ef1ca\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:04:32.616Z\",\n        \"updatedAt\": \"2018-04-04T08:04:32.616Z\"\n    },\n    {\n        \"id\": \"5ac48757c89e2c48bc890492\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:05:43.780Z\",\n        \"updatedAt\": \"2018-04-04T08:05:43.780Z\"\n    },\n    {\n        \"id\": \"5ac4884fc89e2c49d26b1448\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:09:51.670Z\",\n        \"updatedAt\": \"2018-04-04T08:09:51.670Z\"\n    },\n    {\n        \"id\": \"5ac48851c89e2c49d26b144a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:09:53.943Z\",\n        \"updatedAt\": \"2018-04-04T08:09:53.943Z\"\n    },\n    {\n        \"id\": \"5ac48852c89e2c49d26b144b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:09:54.340Z\",\n        \"updatedAt\": \"2018-04-04T08:09:54.340Z\"\n    },\n    {\n        \"id\": \"5ac48853c89e2c49d26b144d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:09:55.462Z\",\n        \"updatedAt\": \"2018-04-04T08:09:55.462Z\"\n    },\n    {\n        \"id\": \"5ac48854c89e2c49d26b144f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:09:56.863Z\",\n        \"updatedAt\": \"2018-04-04T08:09:56.863Z\"\n    },\n    {\n        \"id\": \"5ac48857c89e2c49d26b1451\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:09:59.000Z\",\n        \"updatedAt\": \"2018-04-04T08:09:59.000Z\"\n    },\n    {\n        \"id\": \"5ac48858c89e2c49d26b1454\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:10:00.059Z\",\n        \"updatedAt\": \"2018-04-04T08:10:00.059Z\"\n    },\n    {\n        \"id\": \"5ac48859c89e2c49d26b1456\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T08:10:01.125Z\",\n        \"updatedAt\": \"2018-04-04T08:10:02.122Z\"\n    },\n    {\n        \"id\": \"5ac4885ac89e2c49d26b1458\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:10:02.466Z\",\n        \"updatedAt\": \"2018-04-04T08:10:02.466Z\"\n    },\n    {\n        \"id\": \"5ac4885bc89e2c49d26b145a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:10:03.830Z\",\n        \"updatedAt\": \"2018-04-04T08:10:03.830Z\"\n    },\n    {\n        \"id\": \"5ac48a53c89e2c4c3fa0a4da\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T08:18:27.282Z\",\n        \"updatedAt\": \"2018-04-04T08:18:30.161Z\"\n    },\n    {\n        \"id\": \"5ac48ba5c89e2c4d623ce577\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:05.143Z\",\n        \"updatedAt\": \"2018-04-04T08:24:05.143Z\"\n    },\n    {\n        \"id\": \"5ac48ba7c89e2c4d623ce579\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:07.387Z\",\n        \"updatedAt\": \"2018-04-04T08:24:07.387Z\"\n    },\n    {\n        \"id\": \"5ac48ba7c89e2c4d623ce57a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:07.765Z\",\n        \"updatedAt\": \"2018-04-04T08:24:07.765Z\"\n    },\n    {\n        \"id\": \"5ac48ba8c89e2c4d623ce57c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:08.841Z\",\n        \"updatedAt\": \"2018-04-04T08:24:08.841Z\"\n    },\n    {\n        \"id\": \"5ac48baac89e2c4d623ce57e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:10.191Z\",\n        \"updatedAt\": \"2018-04-04T08:24:10.191Z\"\n    },\n    {\n        \"id\": \"5ac48bacc89e2c4d623ce580\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:12.328Z\",\n        \"updatedAt\": \"2018-04-04T08:24:12.328Z\"\n    },\n    {\n        \"id\": \"5ac48badc89e2c4d623ce583\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:13.377Z\",\n        \"updatedAt\": \"2018-04-04T08:24:13.377Z\"\n    },\n    {\n        \"id\": \"5ac48baec89e2c4d623ce585\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T08:24:14.400Z\",\n        \"updatedAt\": \"2018-04-04T08:24:15.463Z\"\n    },\n    {\n        \"id\": \"5ac48bafc89e2c4d623ce587\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:15.875Z\",\n        \"updatedAt\": \"2018-04-04T08:24:15.875Z\"\n    },\n    {\n        \"id\": \"5ac48bb1c89e2c4d623ce589\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:24:17.327Z\",\n        \"updatedAt\": \"2018-04-04T08:24:17.327Z\"\n    },\n    {\n        \"id\": \"5ac48de7c89e2c4ea6685245\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T08:33:43.818Z\",\n        \"updatedAt\": \"2018-04-04T08:33:46.562Z\"\n    },\n    {\n        \"id\": \"5ac48e14c89e2c4ef752866a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:28.340Z\",\n        \"updatedAt\": \"2018-04-04T08:34:28.340Z\"\n    },\n    {\n        \"id\": \"5ac48e16c89e2c4ef752866c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:30.605Z\",\n        \"updatedAt\": \"2018-04-04T08:34:30.605Z\"\n    },\n    {\n        \"id\": \"5ac48e16c89e2c4ef752866d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:30.982Z\",\n        \"updatedAt\": \"2018-04-04T08:34:30.982Z\"\n    },\n    {\n        \"id\": \"5ac48e18c89e2c4ef752866f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:32.048Z\",\n        \"updatedAt\": \"2018-04-04T08:34:32.048Z\"\n    },\n    {\n        \"id\": \"5ac48e19c89e2c4ef7528671\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:33.460Z\",\n        \"updatedAt\": \"2018-04-04T08:34:33.460Z\"\n    },\n    {\n        \"id\": \"5ac48e1bc89e2c4ef7528673\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:35.828Z\",\n        \"updatedAt\": \"2018-04-04T08:34:35.828Z\"\n    },\n    {\n        \"id\": \"5ac48e1cc89e2c4ef7528676\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:36.892Z\",\n        \"updatedAt\": \"2018-04-04T08:34:36.892Z\"\n    },\n    {\n        \"id\": \"5ac48e1dc89e2c4ef7528678\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T08:34:37.909Z\",\n        \"updatedAt\": \"2018-04-04T08:34:38.948Z\"\n    },\n    {\n        \"id\": \"5ac48e1fc89e2c4ef752867a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:39.296Z\",\n        \"updatedAt\": \"2018-04-04T08:34:39.296Z\"\n    },\n    {\n        \"id\": \"5ac48e20c89e2c4ef752867c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T08:34:40.662Z\",\n        \"updatedAt\": \"2018-04-04T08:34:40.662Z\"\n    },\n    {\n        \"id\": \"5ac4981bc89e2c54554a30b0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:15.745Z\",\n        \"updatedAt\": \"2018-04-04T09:17:15.745Z\"\n    },\n    {\n        \"id\": \"5ac4981ec89e2c54554a30b2\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:18.004Z\",\n        \"updatedAt\": \"2018-04-04T09:17:18.004Z\"\n    },\n    {\n        \"id\": \"5ac4981ec89e2c54554a30b3\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:18.381Z\",\n        \"updatedAt\": \"2018-04-04T09:17:18.381Z\"\n    },\n    {\n        \"id\": \"5ac4981fc89e2c54554a30b5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:19.475Z\",\n        \"updatedAt\": \"2018-04-04T09:17:19.475Z\"\n    },\n    {\n        \"id\": \"5ac49820c89e2c54554a30b7\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:20.889Z\",\n        \"updatedAt\": \"2018-04-04T09:17:20.889Z\"\n    },\n    {\n        \"id\": \"5ac49823c89e2c54554a30b9\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:23.458Z\",\n        \"updatedAt\": \"2018-04-04T09:17:23.458Z\"\n    },\n    {\n        \"id\": \"5ac49824c89e2c54554a30bc\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:24.489Z\",\n        \"updatedAt\": \"2018-04-04T09:17:24.489Z\"\n    },\n    {\n        \"id\": \"5ac49825c89e2c54554a30be\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T09:17:25.581Z\",\n        \"updatedAt\": \"2018-04-04T09:17:26.584Z\"\n    },\n    {\n        \"id\": \"5ac49826c89e2c54554a30c0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:26.946Z\",\n        \"updatedAt\": \"2018-04-04T09:17:26.946Z\"\n    },\n    {\n        \"id\": \"5ac49828c89e2c54554a30c2\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:17:28.318Z\",\n        \"updatedAt\": \"2018-04-04T09:17:28.318Z\"\n    },\n    {\n        \"id\": \"5ac49887c89e2c54c83a8771\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:03.296Z\",\n        \"updatedAt\": \"2018-04-04T09:19:03.296Z\"\n    },\n    {\n        \"id\": \"5ac49889c89e2c54c83a8773\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:05.599Z\",\n        \"updatedAt\": \"2018-04-04T09:19:05.599Z\"\n    },\n    {\n        \"id\": \"5ac4988ac89e2c54c83a8775\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:06.742Z\",\n        \"updatedAt\": \"2018-04-04T09:19:06.742Z\"\n    },\n    {\n        \"id\": \"5ac4988cc89e2c54c83a8777\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:08.129Z\",\n        \"updatedAt\": \"2018-04-04T09:19:08.129Z\"\n    },\n    {\n        \"id\": \"5ac4988cc89e2c54c83a8779\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:08.865Z\",\n        \"updatedAt\": \"2018-04-04T09:19:08.865Z\"\n    },\n    {\n        \"id\": \"5ac4988dc89e2c54c83a877c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:09.968Z\",\n        \"updatedAt\": \"2018-04-04T09:19:09.968Z\"\n    },\n    {\n        \"id\": \"5ac4988ec89e2c54c83a877e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:10.686Z\",\n        \"updatedAt\": \"2018-04-04T09:19:10.686Z\"\n    },\n    {\n        \"id\": \"5ac4988fc89e2c54c83a8780\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:11.379Z\",\n        \"updatedAt\": \"2018-04-04T09:19:11.379Z\"\n    },\n    {\n        \"id\": \"5ac49890c89e2c54c83a8782\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:12.083Z\",\n        \"updatedAt\": \"2018-04-04T09:19:12.083Z\"\n    },\n    {\n        \"id\": \"5ac49891c89e2c54c83a8784\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:13.443Z\",\n        \"updatedAt\": \"2018-04-04T09:19:13.443Z\"\n    },\n    {\n        \"id\": \"5ac49893c89e2c54c83a8786\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:19:15.372Z\",\n        \"updatedAt\": \"2018-04-04T09:19:15.372Z\"\n    },\n    {\n        \"id\": \"5ac49ec1c89e2c59f3aa1e07\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:37.561Z\",\n        \"updatedAt\": \"2018-04-04T09:45:37.561Z\"\n    },\n    {\n        \"id\": \"5ac49ec4c89e2c59f3aa1e09\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:40.150Z\",\n        \"updatedAt\": \"2018-04-04T09:45:40.150Z\"\n    },\n    {\n        \"id\": \"5ac49ec4c89e2c59f3aa1e0a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:40.636Z\",\n        \"updatedAt\": \"2018-04-04T09:45:40.636Z\"\n    },\n    {\n        \"id\": \"5ac49ec5c89e2c59f3aa1e0c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:41.894Z\",\n        \"updatedAt\": \"2018-04-04T09:45:41.894Z\"\n    },\n    {\n        \"id\": \"5ac49ec7c89e2c59f3aa1e0e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:43.413Z\",\n        \"updatedAt\": \"2018-04-04T09:45:43.413Z\"\n    },\n    {\n        \"id\": \"5ac49ec9c89e2c59f3aa1e10\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:45.816Z\",\n        \"updatedAt\": \"2018-04-04T09:45:45.816Z\"\n    },\n    {\n        \"id\": \"5ac49ecac89e2c59f3aa1e13\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:46.947Z\",\n        \"updatedAt\": \"2018-04-04T09:45:46.947Z\"\n    },\n    {\n        \"id\": \"5ac49eccc89e2c59f3aa1e15\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T09:45:48.107Z\",\n        \"updatedAt\": \"2018-04-04T09:45:49.225Z\"\n    },\n    {\n        \"id\": \"5ac49ecdc89e2c59f3aa1e17\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:49.616Z\",\n        \"updatedAt\": \"2018-04-04T09:45:49.616Z\"\n    },\n    {\n        \"id\": \"5ac49ecfc89e2c59f3aa1e19\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:45:51.201Z\",\n        \"updatedAt\": \"2018-04-04T09:45:51.201Z\"\n    },\n    {\n        \"id\": \"5ac49f13c89e2c5ac635278e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:46:59.080Z\",\n        \"updatedAt\": \"2018-04-04T09:46:59.080Z\"\n    },\n    {\n        \"id\": \"5ac49f15c89e2c5ac6352790\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:47:01.566Z\",\n        \"updatedAt\": \"2018-04-04T09:47:01.566Z\"\n    },\n    {\n        \"id\": \"5ac49f15c89e2c5ac6352791\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:47:01.989Z\",\n        \"updatedAt\": \"2018-04-04T09:47:01.989Z\"\n    },\n    {\n        \"id\": \"5ac49f17c89e2c5ac6352793\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:47:03.178Z\",\n        \"updatedAt\": \"2018-04-04T09:47:03.178Z\"\n    },\n    {\n        \"id\": \"5ac49f18c89e2c5ac6352795\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:47:04.723Z\",\n        \"updatedAt\": \"2018-04-04T09:47:04.723Z\"\n    },\n    {\n        \"id\": \"5ac49f1bc89e2c5ac6352797\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:47:07.188Z\",\n        \"updatedAt\": \"2018-04-04T09:47:07.188Z\"\n    },\n    {\n        \"id\": \"5ac49f1cc89e2c5ac635279a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:47:08.412Z\",\n        \"updatedAt\": \"2018-04-04T09:47:08.412Z\"\n    },\n    {\n        \"id\": \"5ac49f1dc89e2c5ac635279c\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T09:47:09.561Z\",\n        \"updatedAt\": \"2018-04-04T09:47:10.735Z\"\n    },\n    {\n        \"id\": \"5ac49f1fc89e2c5ac635279e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:47:11.114Z\",\n        \"updatedAt\": \"2018-04-04T09:47:11.114Z\"\n    },\n    {\n        \"id\": \"5ac49f20c89e2c5ac63527a0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T09:47:12.730Z\",\n        \"updatedAt\": \"2018-04-04T09:47:12.730Z\"\n    },\n    {\n        \"id\": \"5ac4a730c89e2c5f70d9bb49\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:21:36.846Z\",\n        \"updatedAt\": \"2018-04-04T10:21:36.846Z\"\n    },\n    {\n        \"id\": \"5ac4a7e4c89e2c602ea04c34\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:36.390Z\",\n        \"updatedAt\": \"2018-04-04T10:24:36.390Z\"\n    },\n    {\n        \"id\": \"5ac4a7e7c89e2c602ea04c36\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:39.241Z\",\n        \"updatedAt\": \"2018-04-04T10:24:39.241Z\"\n    },\n    {\n        \"id\": \"5ac4a7e7c89e2c602ea04c37\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:39.646Z\",\n        \"updatedAt\": \"2018-04-04T10:24:39.646Z\"\n    },\n    {\n        \"id\": \"5ac4a7e8c89e2c602ea04c39\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:40.771Z\",\n        \"updatedAt\": \"2018-04-04T10:24:40.771Z\"\n    },\n    {\n        \"id\": \"5ac4a7eac89e2c602ea04c3b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:42.270Z\",\n        \"updatedAt\": \"2018-04-04T10:24:42.270Z\"\n    },\n    {\n        \"id\": \"5ac4a7ecc89e2c602ea04c3d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:44.661Z\",\n        \"updatedAt\": \"2018-04-04T10:24:44.661Z\"\n    },\n    {\n        \"id\": \"5ac4a7edc89e2c602ea04c40\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:45.769Z\",\n        \"updatedAt\": \"2018-04-04T10:24:45.769Z\"\n    },\n    {\n        \"id\": \"5ac4a7eec89e2c602ea04c42\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T10:24:46.900Z\",\n        \"updatedAt\": \"2018-04-04T10:24:47.975Z\"\n    },\n    {\n        \"id\": \"5ac4a7f0c89e2c602ea04c44\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:48.397Z\",\n        \"updatedAt\": \"2018-04-04T10:24:48.397Z\"\n    },\n    {\n        \"id\": \"5ac4a7f1c89e2c602ea04c46\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:24:49.942Z\",\n        \"updatedAt\": \"2018-04-04T10:24:49.942Z\"\n    },\n    {\n        \"id\": \"5ac4a831c89e2c608ef624a0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:25:53.089Z\",\n        \"updatedAt\": \"2018-04-04T10:25:53.089Z\"\n    },\n    {\n        \"id\": \"5ac4a851c89e2c60fb0e16d8\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:25.375Z\",\n        \"updatedAt\": \"2018-04-04T10:26:25.375Z\"\n    },\n    {\n        \"id\": \"5ac4a853c89e2c60fb0e16da\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:27.879Z\",\n        \"updatedAt\": \"2018-04-04T10:26:27.879Z\"\n    },\n    {\n        \"id\": \"5ac4a855c89e2c60fb0e16dc\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:29.019Z\",\n        \"updatedAt\": \"2018-04-04T10:26:29.019Z\"\n    },\n    {\n        \"id\": \"5ac4a856c89e2c60fb0e16de\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:30.554Z\",\n        \"updatedAt\": \"2018-04-04T10:26:30.554Z\"\n    },\n    {\n        \"id\": \"5ac4a857c89e2c60fb0e16e0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:31.317Z\",\n        \"updatedAt\": \"2018-04-04T10:26:31.317Z\"\n    },\n    {\n        \"id\": \"5ac4a858c89e2c60fb0e16e3\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:32.451Z\",\n        \"updatedAt\": \"2018-04-04T10:26:32.451Z\"\n    },\n    {\n        \"id\": \"5ac4a859c89e2c60fb0e16e5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:33.238Z\",\n        \"updatedAt\": \"2018-04-04T10:26:33.238Z\"\n    },\n    {\n        \"id\": \"5ac4a859c89e2c60fb0e16e7\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:33.980Z\",\n        \"updatedAt\": \"2018-04-04T10:26:33.980Z\"\n    },\n    {\n        \"id\": \"5ac4a85ac89e2c60fb0e16e9\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:34.729Z\",\n        \"updatedAt\": \"2018-04-04T10:26:34.729Z\"\n    },\n    {\n        \"id\": \"5ac4a85cc89e2c60fb0e16eb\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:36.426Z\",\n        \"updatedAt\": \"2018-04-04T10:26:36.426Z\"\n    },\n    {\n        \"id\": \"5ac4a85ec89e2c60fb0e16ed\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:26:38.558Z\",\n        \"updatedAt\": \"2018-04-04T10:26:38.558Z\"\n    },\n    {\n        \"id\": \"5ac4a8b3c89e2c615650ad6c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:03.608Z\",\n        \"updatedAt\": \"2018-04-04T10:28:03.608Z\"\n    },\n    {\n        \"id\": \"5ac4a8b6c89e2c615650ad6e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:06.115Z\",\n        \"updatedAt\": \"2018-04-04T10:28:06.115Z\"\n    },\n    {\n        \"id\": \"5ac4a8b6c89e2c615650ad6f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:06.514Z\",\n        \"updatedAt\": \"2018-04-04T10:28:06.514Z\"\n    },\n    {\n        \"id\": \"5ac4a8b7c89e2c615650ad71\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:07.702Z\",\n        \"updatedAt\": \"2018-04-04T10:28:07.702Z\"\n    },\n    {\n        \"id\": \"5ac4a8b9c89e2c615650ad73\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:09.252Z\",\n        \"updatedAt\": \"2018-04-04T10:28:09.252Z\"\n    },\n    {\n        \"id\": \"5ac4a8bbc89e2c615650ad75\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:11.923Z\",\n        \"updatedAt\": \"2018-04-04T10:28:11.923Z\"\n    },\n    {\n        \"id\": \"5ac4a8bdc89e2c615650ad78\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:13.104Z\",\n        \"updatedAt\": \"2018-04-04T10:28:13.104Z\"\n    },\n    {\n        \"id\": \"5ac4a8bec89e2c615650ad7a\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T10:28:14.219Z\",\n        \"updatedAt\": \"2018-04-04T10:28:15.316Z\"\n    },\n    {\n        \"id\": \"5ac4a8bfc89e2c615650ad7c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:15.697Z\",\n        \"updatedAt\": \"2018-04-04T10:28:15.697Z\"\n    },\n    {\n        \"id\": \"5ac4a8c0c89e2c615650ad7e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:16.870Z\",\n        \"updatedAt\": \"2018-04-04T10:28:16.870Z\"\n    },\n    {\n        \"id\": \"5ac4a8c2c89e2c615650ad80\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:28:18.329Z\",\n        \"updatedAt\": \"2018-04-04T10:28:18.329Z\"\n    },\n    {\n        \"id\": \"5ac4a8fcc89e2c61ba358a53\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:16.862Z\",\n        \"updatedAt\": \"2018-04-04T10:29:16.862Z\"\n    },\n    {\n        \"id\": \"5ac4a8ffc89e2c61ba358a55\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:19.393Z\",\n        \"updatedAt\": \"2018-04-04T10:29:19.393Z\"\n    },\n    {\n        \"id\": \"5ac4a8ffc89e2c61ba358a56\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:19.815Z\",\n        \"updatedAt\": \"2018-04-04T10:29:19.815Z\"\n    },\n    {\n        \"id\": \"5ac4a901c89e2c61ba358a58\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:21.061Z\",\n        \"updatedAt\": \"2018-04-04T10:29:21.061Z\"\n    },\n    {\n        \"id\": \"5ac4a902c89e2c61ba358a5a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:22.586Z\",\n        \"updatedAt\": \"2018-04-04T10:29:22.586Z\"\n    },\n    {\n        \"id\": \"5ac4a905c89e2c61ba358a5c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:25.397Z\",\n        \"updatedAt\": \"2018-04-04T10:29:25.397Z\"\n    },\n    {\n        \"id\": \"5ac4a906c89e2c61ba358a5f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:26.547Z\",\n        \"updatedAt\": \"2018-04-04T10:29:26.547Z\"\n    },\n    {\n        \"id\": \"5ac4a90ec89e2c61ba358a61\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T10:29:34.463Z\",\n        \"updatedAt\": \"2018-04-04T10:29:35.540Z\"\n    },\n    {\n        \"id\": \"5ac4a90fc89e2c61ba358a63\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:35.913Z\",\n        \"updatedAt\": \"2018-04-04T10:29:35.913Z\"\n    },\n    {\n        \"id\": \"5ac4a911c89e2c61ba358a65\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T10:29:37.374Z\",\n        \"updatedAt\": \"2018-04-04T10:29:37.374Z\"\n    },\n    {\n        \"id\": \"5ac4b523c89e2c6c0aa160b5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:07.308Z\",\n        \"updatedAt\": \"2018-04-04T11:21:07.308Z\"\n    },\n    {\n        \"id\": \"5ac4b525c89e2c6c0aa160b7\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:09.719Z\",\n        \"updatedAt\": \"2018-04-04T11:21:09.719Z\"\n    },\n    {\n        \"id\": \"5ac4b526c89e2c6c0aa160b8\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:10.125Z\",\n        \"updatedAt\": \"2018-04-04T11:21:10.125Z\"\n    },\n    {\n        \"id\": \"5ac4b527c89e2c6c0aa160ba\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:11.256Z\",\n        \"updatedAt\": \"2018-04-04T11:21:11.256Z\"\n    },\n    {\n        \"id\": \"5ac4b528c89e2c6c0aa160bc\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:12.770Z\",\n        \"updatedAt\": \"2018-04-04T11:21:12.770Z\"\n    },\n    {\n        \"id\": \"5ac4b52bc89e2c6c0aa160be\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:15.644Z\",\n        \"updatedAt\": \"2018-04-04T11:21:15.644Z\"\n    },\n    {\n        \"id\": \"5ac4b52cc89e2c6c0aa160c1\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:16.788Z\",\n        \"updatedAt\": \"2018-04-04T11:21:16.788Z\"\n    },\n    {\n        \"id\": \"5ac4b52dc89e2c6c0aa160c3\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T11:21:17.926Z\",\n        \"updatedAt\": \"2018-04-04T11:21:19.085Z\"\n    },\n    {\n        \"id\": \"5ac4b52fc89e2c6c0aa160c5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:19.476Z\",\n        \"updatedAt\": \"2018-04-04T11:21:19.476Z\"\n    },\n    {\n        \"id\": \"5ac4b530c89e2c6c0aa160c7\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:21:20.942Z\",\n        \"updatedAt\": \"2018-04-04T11:21:20.942Z\"\n    },\n    {\n        \"id\": \"5ac4b5eac89e2c6cbcaacfc5\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:24:26.060Z\",\n        \"updatedAt\": \"2018-04-04T11:24:26.060Z\"\n    },\n    {\n        \"id\": \"5ac4b611c89e2c6d01dc0083\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T11:25:05.427Z\",\n        \"updatedAt\": \"2018-04-04T11:25:08.376Z\"\n    },\n    {\n        \"id\": \"5ac4b63dc89e2c6d4ef7143c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:25:49.685Z\",\n        \"updatedAt\": \"2018-04-04T11:25:49.685Z\"\n    },\n    {\n        \"id\": \"5ac4b640c89e2c6d4ef7143e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:25:52.107Z\",\n        \"updatedAt\": \"2018-04-04T11:25:52.107Z\"\n    },\n    {\n        \"id\": \"5ac4b640c89e2c6d4ef7143f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:25:52.509Z\",\n        \"updatedAt\": \"2018-04-04T11:25:52.509Z\"\n    },\n    {\n        \"id\": \"5ac4b641c89e2c6d4ef71441\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:25:53.666Z\",\n        \"updatedAt\": \"2018-04-04T11:25:53.666Z\"\n    },\n    {\n        \"id\": \"5ac4b643c89e2c6d4ef71443\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:25:55.185Z\",\n        \"updatedAt\": \"2018-04-04T11:25:55.185Z\"\n    },\n    {\n        \"id\": \"5ac4b646c89e2c6d4ef71445\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:25:58.011Z\",\n        \"updatedAt\": \"2018-04-04T11:25:58.011Z\"\n    },\n    {\n        \"id\": \"5ac4b647c89e2c6d4ef71448\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:25:59.144Z\",\n        \"updatedAt\": \"2018-04-04T11:25:59.144Z\"\n    },\n    {\n        \"id\": \"5ac4b648c89e2c6d4ef7144a\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T11:26:00.276Z\",\n        \"updatedAt\": \"2018-04-04T11:26:01.357Z\"\n    },\n    {\n        \"id\": \"5ac4b649c89e2c6d4ef7144c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:26:01.735Z\",\n        \"updatedAt\": \"2018-04-04T11:26:01.735Z\"\n    },\n    {\n        \"id\": \"5ac4b64bc89e2c6d4ef7144e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:26:03.234Z\",\n        \"updatedAt\": \"2018-04-04T11:26:03.234Z\"\n    },\n    {\n        \"id\": \"5ac4b6c0c89e2c6e122cf95f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:00.384Z\",\n        \"updatedAt\": \"2018-04-04T11:28:00.384Z\"\n    },\n    {\n        \"id\": \"5ac4b6c2c89e2c6e122cf961\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:02.915Z\",\n        \"updatedAt\": \"2018-04-04T11:28:02.915Z\"\n    },\n    {\n        \"id\": \"5ac4b6c3c89e2c6e122cf962\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:03.339Z\",\n        \"updatedAt\": \"2018-04-04T11:28:03.339Z\"\n    },\n    {\n        \"id\": \"5ac4b6c4c89e2c6e122cf964\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:04.590Z\",\n        \"updatedAt\": \"2018-04-04T11:28:04.590Z\"\n    },\n    {\n        \"id\": \"5ac4b6c6c89e2c6e122cf966\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:06.185Z\",\n        \"updatedAt\": \"2018-04-04T11:28:06.185Z\"\n    },\n    {\n        \"id\": \"5ac4b6c9c89e2c6e122cf968\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:09.250Z\",\n        \"updatedAt\": \"2018-04-04T11:28:09.250Z\"\n    },\n    {\n        \"id\": \"5ac4b6cac89e2c6e122cf96b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:10.539Z\",\n        \"updatedAt\": \"2018-04-04T11:28:10.539Z\"\n    },\n    {\n        \"id\": \"5ac4b6cbc89e2c6e122cf96d\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T11:28:11.787Z\",\n        \"updatedAt\": \"2018-04-04T11:28:12.938Z\"\n    },\n    {\n        \"id\": \"5ac4b6cdc89e2c6e122cf96f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:13.342Z\",\n        \"updatedAt\": \"2018-04-04T11:28:13.342Z\"\n    },\n    {\n        \"id\": \"5ac4b6cec89e2c6e122cf971\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:28:14.936Z\",\n        \"updatedAt\": \"2018-04-04T11:28:14.936Z\"\n    },\n    {\n        \"id\": \"5ac4b834c89e2c6f41f7b203\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:12.816Z\",\n        \"updatedAt\": \"2018-04-04T11:34:12.816Z\"\n    },\n    {\n        \"id\": \"5ac4b837c89e2c6f41f7b205\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:15.831Z\",\n        \"updatedAt\": \"2018-04-04T11:34:15.831Z\"\n    },\n    {\n        \"id\": \"5ac4b839c89e2c6f41f7b207\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:17.012Z\",\n        \"updatedAt\": \"2018-04-04T11:34:17.012Z\"\n    },\n    {\n        \"id\": \"5ac4b83ac89e2c6f41f7b209\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:18.513Z\",\n        \"updatedAt\": \"2018-04-04T11:34:18.513Z\"\n    },\n    {\n        \"id\": \"5ac4b83bc89e2c6f41f7b20b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:19.305Z\",\n        \"updatedAt\": \"2018-04-04T11:34:19.305Z\"\n    },\n    {\n        \"id\": \"5ac4b83cc89e2c6f41f7b20e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:20.437Z\",\n        \"updatedAt\": \"2018-04-04T11:34:20.437Z\"\n    },\n    {\n        \"id\": \"5ac4b83dc89e2c6f41f7b210\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:21.205Z\",\n        \"updatedAt\": \"2018-04-04T11:34:21.205Z\"\n    },\n    {\n        \"id\": \"5ac4b83dc89e2c6f41f7b212\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:21.964Z\",\n        \"updatedAt\": \"2018-04-04T11:34:21.964Z\"\n    },\n    {\n        \"id\": \"5ac4b83ec89e2c6f41f7b214\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:22.739Z\",\n        \"updatedAt\": \"2018-04-04T11:34:22.739Z\"\n    },\n    {\n        \"id\": \"5ac4b840c89e2c6f41f7b216\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:24.212Z\",\n        \"updatedAt\": \"2018-04-04T11:34:24.212Z\"\n    },\n    {\n        \"id\": \"5ac4b842c89e2c6f41f7b218\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:34:26.641Z\",\n        \"updatedAt\": \"2018-04-04T11:34:26.641Z\"\n    },\n    {\n        \"id\": \"5ac4b879c89e2c6f9ed2ed34\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:21.818Z\",\n        \"updatedAt\": \"2018-04-04T11:35:21.818Z\"\n    },\n    {\n        \"id\": \"5ac4b87cc89e2c6f9ed2ed36\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:24.295Z\",\n        \"updatedAt\": \"2018-04-04T11:35:24.295Z\"\n    },\n    {\n        \"id\": \"5ac4b87cc89e2c6f9ed2ed37\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:24.695Z\",\n        \"updatedAt\": \"2018-04-04T11:35:24.695Z\"\n    },\n    {\n        \"id\": \"5ac4b87dc89e2c6f9ed2ed39\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:25.938Z\",\n        \"updatedAt\": \"2018-04-04T11:35:25.938Z\"\n    },\n    {\n        \"id\": \"5ac4b87fc89e2c6f9ed2ed3b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:27.449Z\",\n        \"updatedAt\": \"2018-04-04T11:35:27.449Z\"\n    },\n    {\n        \"id\": \"5ac4b882c89e2c6f9ed2ed3d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:30.331Z\",\n        \"updatedAt\": \"2018-04-04T11:35:30.331Z\"\n    },\n    {\n        \"id\": \"5ac4b883c89e2c6f9ed2ed40\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:31.472Z\",\n        \"updatedAt\": \"2018-04-04T11:35:31.472Z\"\n    },\n    {\n        \"id\": \"5ac4b884c89e2c6f9ed2ed42\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-04T11:35:32.784Z\",\n        \"updatedAt\": \"2018-04-04T11:35:33.944Z\"\n    },\n    {\n        \"id\": \"5ac4b886c89e2c6f9ed2ed44\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:34.326Z\",\n        \"updatedAt\": \"2018-04-04T11:35:34.326Z\"\n    },\n    {\n        \"id\": \"5ac4b887c89e2c6f9ed2ed46\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-04T11:35:35.857Z\",\n        \"updatedAt\": \"2018-04-04T11:35:35.857Z\"\n    },\n    {\n        \"id\": \"5ac597e2c89e2c0f65e6486b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:34.132Z\",\n        \"updatedAt\": \"2018-04-05T03:28:34.132Z\"\n    },\n    {\n        \"id\": \"5ac597e4c89e2c0f65e6486d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:36.518Z\",\n        \"updatedAt\": \"2018-04-05T03:28:36.518Z\"\n    },\n    {\n        \"id\": \"5ac597e4c89e2c0f65e6486e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:36.933Z\",\n        \"updatedAt\": \"2018-04-05T03:28:36.933Z\"\n    },\n    {\n        \"id\": \"5ac597e6c89e2c0f65e64870\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:38.139Z\",\n        \"updatedAt\": \"2018-04-05T03:28:38.139Z\"\n    },\n    {\n        \"id\": \"5ac597e7c89e2c0f65e64872\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:39.724Z\",\n        \"updatedAt\": \"2018-04-05T03:28:39.724Z\"\n    },\n    {\n        \"id\": \"5ac597eac89e2c0f65e64874\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:42.598Z\",\n        \"updatedAt\": \"2018-04-05T03:28:42.598Z\"\n    },\n    {\n        \"id\": \"5ac597ebc89e2c0f65e64877\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:43.824Z\",\n        \"updatedAt\": \"2018-04-05T03:28:43.824Z\"\n    },\n    {\n        \"id\": \"5ac597edc89e2c0f65e64879\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-05T03:28:45.043Z\",\n        \"updatedAt\": \"2018-04-05T03:28:46.178Z\"\n    },\n    {\n        \"id\": \"5ac597eec89e2c0f65e6487b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:46.569Z\",\n        \"updatedAt\": \"2018-04-05T03:28:46.569Z\"\n    },\n    {\n        \"id\": \"5ac597f0c89e2c0f65e6487d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:28:48.777Z\",\n        \"updatedAt\": \"2018-04-05T03:28:48.777Z\"\n    },\n    {\n        \"id\": \"5ac598c3c89e2c108a1dd93c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:19.119Z\",\n        \"updatedAt\": \"2018-04-05T03:32:19.119Z\"\n    },\n    {\n        \"id\": \"5ac598c5c89e2c108a1dd93e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:21.353Z\",\n        \"updatedAt\": \"2018-04-05T03:32:21.353Z\"\n    },\n    {\n        \"id\": \"5ac598c5c89e2c108a1dd93f\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:21.746Z\",\n        \"updatedAt\": \"2018-04-05T03:32:21.746Z\"\n    },\n    {\n        \"id\": \"5ac598c6c89e2c108a1dd941\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:22.797Z\",\n        \"updatedAt\": \"2018-04-05T03:32:22.797Z\"\n    },\n    {\n        \"id\": \"5ac598c8c89e2c108a1dd943\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:24.189Z\",\n        \"updatedAt\": \"2018-04-05T03:32:24.189Z\"\n    },\n    {\n        \"id\": \"5ac598cbc89e2c108a1dd945\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:27.264Z\",\n        \"updatedAt\": \"2018-04-05T03:32:27.264Z\"\n    },\n    {\n        \"id\": \"5ac598ccc89e2c108a1dd948\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:28.349Z\",\n        \"updatedAt\": \"2018-04-05T03:32:28.349Z\"\n    },\n    {\n        \"id\": \"5ac598cdc89e2c108a1dd94a\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-05T03:32:29.388Z\",\n        \"updatedAt\": \"2018-04-05T03:32:30.394Z\"\n    },\n    {\n        \"id\": \"5ac598cec89e2c108a1dd94c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:30.756Z\",\n        \"updatedAt\": \"2018-04-05T03:32:30.756Z\"\n    },\n    {\n        \"id\": \"5ac598d0c89e2c108a1dd94e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:32:32.143Z\",\n        \"updatedAt\": \"2018-04-05T03:32:32.143Z\"\n    },\n    {\n        \"id\": \"5ac59905c89e2c1108643c36\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:33:24.991Z\",\n        \"updatedAt\": \"2018-04-05T03:33:24.991Z\"\n    },\n    {\n        \"id\": \"5ac59919c89e2c11398e4bf9\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:33:45.934Z\",\n        \"updatedAt\": \"2018-04-05T03:33:45.934Z\"\n    },\n    {\n        \"id\": \"5ac59940c89e2c119f127909\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:34:24.045Z\",\n        \"updatedAt\": \"2018-04-05T03:34:24.045Z\"\n    },\n    {\n        \"id\": \"5ac5996cc89e2c11fcaf1bd0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:35:08.576Z\",\n        \"updatedAt\": \"2018-04-05T03:35:08.576Z\"\n    },\n    {\n        \"id\": \"5ac59a55c89e2c13cced8666\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:39:01.939Z\",\n        \"updatedAt\": \"2018-04-05T03:39:01.939Z\"\n    },\n    {\n        \"id\": \"5ac59b08c89e2c148cb9d220\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:41:59.991Z\",\n        \"updatedAt\": \"2018-04-05T03:41:59.991Z\"\n    },\n    {\n        \"id\": \"5ac59b0ac89e2c148cb9d222\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:42:02.291Z\",\n        \"updatedAt\": \"2018-04-05T03:42:02.291Z\"\n    },\n    {\n        \"id\": \"5ac59b0ac89e2c148cb9d223\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:42:02.661Z\",\n        \"updatedAt\": \"2018-04-05T03:42:02.661Z\"\n    },\n    {\n        \"id\": \"5ac59b0bc89e2c148cb9d225\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:42:03.734Z\",\n        \"updatedAt\": \"2018-04-05T03:42:03.734Z\"\n    },\n    {\n        \"id\": \"5ac59b0dc89e2c148cb9d227\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:42:05.140Z\",\n        \"updatedAt\": \"2018-04-05T03:42:05.140Z\"\n    },\n    {\n        \"id\": \"5ac59b10c89e2c148cb9d229\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:42:08.108Z\",\n        \"updatedAt\": \"2018-04-05T03:42:08.108Z\"\n    },\n    {\n        \"id\": \"5ac59b11c89e2c148cb9d22c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:42:09.165Z\",\n        \"updatedAt\": \"2018-04-05T03:42:09.165Z\"\n    },\n    {\n        \"id\": \"5ac59b12c89e2c148cb9d22e\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-05T03:42:10.224Z\",\n        \"updatedAt\": \"2018-04-05T03:42:11.232Z\"\n    },\n    {\n        \"id\": \"5ac59b13c89e2c148cb9d230\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:42:11.594Z\",\n        \"updatedAt\": \"2018-04-05T03:42:11.594Z\"\n    },\n    {\n        \"id\": \"5ac59b15c89e2c148cb9d232\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T03:42:13.023Z\",\n        \"updatedAt\": \"2018-04-05T03:42:13.023Z\"\n    },\n    {\n        \"id\": \"5ac59ecac89e2c18880a0b60\",\n        \"name\": \"Sports\",\n        \"createdAt\": \"2018-04-05T03:58:02.619Z\",\n        \"updatedAt\": \"2018-04-05T03:58:02.619Z\"\n    },\n    {\n        \"id\": \"5ac5b6b6c89e2c30ab7cf87b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:06.778Z\",\n        \"updatedAt\": \"2018-04-05T05:40:06.778Z\"\n    },\n    {\n        \"id\": \"5ac5b6b9c89e2c30ab7cf87d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:09.392Z\",\n        \"updatedAt\": \"2018-04-05T05:40:09.392Z\"\n    },\n    {\n        \"id\": \"5ac5b6b9c89e2c30ab7cf87e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:09.800Z\",\n        \"updatedAt\": \"2018-04-05T05:40:09.800Z\"\n    },\n    {\n        \"id\": \"5ac5b6bac89e2c30ab7cf880\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:10.888Z\",\n        \"updatedAt\": \"2018-04-05T05:40:10.888Z\"\n    },\n    {\n        \"id\": \"5ac5b6bcc89e2c30ab7cf882\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:12.309Z\",\n        \"updatedAt\": \"2018-04-05T05:40:12.309Z\"\n    },\n    {\n        \"id\": \"5ac5b6bfc89e2c30ab7cf884\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:15.692Z\",\n        \"updatedAt\": \"2018-04-05T05:40:15.692Z\"\n    },\n    {\n        \"id\": \"5ac5b6c0c89e2c30ab7cf887\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:16.735Z\",\n        \"updatedAt\": \"2018-04-05T05:40:16.735Z\"\n    },\n    {\n        \"id\": \"5ac5b6c1c89e2c30ab7cf889\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-05T05:40:17.762Z\",\n        \"updatedAt\": \"2018-04-05T05:40:18.780Z\"\n    },\n    {\n        \"id\": \"5ac5b6c3c89e2c30ab7cf88b\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:19.139Z\",\n        \"updatedAt\": \"2018-04-05T05:40:19.139Z\"\n    },\n    {\n        \"id\": \"5ac5b6c4c89e2c30ab7cf88d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T05:40:20.515Z\",\n        \"updatedAt\": \"2018-04-05T05:40:20.515Z\"\n    },\n    {\n        \"id\": \"5ac5bf19c89e2c3604ad7e40\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:15:53.757Z\",\n        \"updatedAt\": \"2018-04-05T06:15:53.757Z\"\n    },\n    {\n        \"id\": \"5ac5bf1cc89e2c3604ad7e42\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:15:56.060Z\",\n        \"updatedAt\": \"2018-04-05T06:15:56.060Z\"\n    },\n    {\n        \"id\": \"5ac5bf1cc89e2c3604ad7e43\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:15:56.456Z\",\n        \"updatedAt\": \"2018-04-05T06:15:56.456Z\"\n    },\n    {\n        \"id\": \"5ac5bf1dc89e2c3604ad7e45\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:15:57.564Z\",\n        \"updatedAt\": \"2018-04-05T06:15:57.564Z\"\n    },\n    {\n        \"id\": \"5ac5bf1ec89e2c3604ad7e47\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:15:58.981Z\",\n        \"updatedAt\": \"2018-04-05T06:15:58.981Z\"\n    },\n    {\n        \"id\": \"5ac5bf22c89e2c3604ad7e49\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:16:02.389Z\",\n        \"updatedAt\": \"2018-04-05T06:16:02.389Z\"\n    },\n    {\n        \"id\": \"5ac5bf23c89e2c3604ad7e4c\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:16:03.484Z\",\n        \"updatedAt\": \"2018-04-05T06:16:03.484Z\"\n    },\n    {\n        \"id\": \"5ac5bf24c89e2c3604ad7e4e\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-05T06:16:04.533Z\",\n        \"updatedAt\": \"2018-04-05T06:16:05.547Z\"\n    },\n    {\n        \"id\": \"5ac5bf25c89e2c3604ad7e50\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:16:05.907Z\",\n        \"updatedAt\": \"2018-04-05T06:16:05.907Z\"\n    },\n    {\n        \"id\": \"5ac5bf27c89e2c3604ad7e52\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T06:16:07.279Z\",\n        \"updatedAt\": \"2018-04-05T06:16:07.279Z\"\n    },\n    {\n        \"id\": \"5ac5cb02c89e2c40d3537557\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T07:06:42.898Z\",\n        \"updatedAt\": \"2018-04-05T07:06:42.898Z\"\n    },\n    {\n        \"id\": \"5ac5cb5cc89e2c41353dc705\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T07:08:12.641Z\",\n        \"updatedAt\": \"2018-04-05T07:08:12.641Z\"\n    },\n    {\n        \"id\": \"5ac5cc3cc89e2c41f44ca0a1\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T07:11:56.743Z\",\n        \"updatedAt\": \"2018-04-05T07:11:56.743Z\"\n    },\n    {\n        \"id\": \"5ac5d9b2c89e2c4a4bdbee7e\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:09:22.730Z\",\n        \"updatedAt\": \"2018-04-05T08:09:22.730Z\"\n    },\n    {\n        \"id\": \"5ac5da39c89e2c4afdf986dd\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:11:37.815Z\",\n        \"updatedAt\": \"2018-04-05T08:11:37.815Z\"\n    },\n    {\n        \"id\": \"5ac5da3cc89e2c4afdf986df\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:11:40.251Z\",\n        \"updatedAt\": \"2018-04-05T08:11:40.251Z\"\n    },\n    {\n        \"id\": \"5ac5da72c89e2c4b45292463\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:12:34.436Z\",\n        \"updatedAt\": \"2018-04-05T08:12:34.436Z\"\n    },\n    {\n        \"id\": \"5ac5daa6c89e2c4b8d84e6bc\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-05T08:13:26.489Z\",\n        \"updatedAt\": \"2018-04-05T08:13:29.203Z\"\n    },\n    {\n        \"id\": \"5ac5db21c89e2c4c29c240b0\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:15:29.826Z\",\n        \"updatedAt\": \"2018-04-05T08:15:29.826Z\"\n    },\n    {\n        \"id\": \"5ac5db78c89e2c4cbe68a089\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:16:56.306Z\",\n        \"updatedAt\": \"2018-04-05T08:16:56.306Z\"\n    },\n    {\n        \"id\": \"5ac5dbb2c89e2c4d09ab0e71\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:17:54.170Z\",\n        \"updatedAt\": \"2018-04-05T08:17:54.170Z\"\n    },\n    {\n        \"id\": \"5ac5dbb4c89e2c4d09ab0e73\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:17:56.746Z\",\n        \"updatedAt\": \"2018-04-05T08:17:56.746Z\"\n    },\n    {\n        \"id\": \"5ac5dbb5c89e2c4d09ab0e74\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:17:57.122Z\",\n        \"updatedAt\": \"2018-04-05T08:17:57.122Z\"\n    },\n    {\n        \"id\": \"5ac5dbb6c89e2c4d09ab0e76\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:17:58.365Z\",\n        \"updatedAt\": \"2018-04-05T08:17:58.365Z\"\n    },\n    {\n        \"id\": \"5ac5dbb7c89e2c4d09ab0e78\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:17:59.946Z\",\n        \"updatedAt\": \"2018-04-05T08:17:59.946Z\"\n    },\n    {\n        \"id\": \"5ac5dbbbc89e2c4d09ab0e7a\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:18:03.616Z\",\n        \"updatedAt\": \"2018-04-05T08:18:03.616Z\"\n    },\n    {\n        \"id\": \"5ac5dbbcc89e2c4d09ab0e7d\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:18:04.795Z\",\n        \"updatedAt\": \"2018-04-05T08:18:04.795Z\"\n    },\n    {\n        \"id\": \"5ac5dbbdc89e2c4d09ab0e7f\",\n        \"name\": \"New Catergory\",\n        \"createdAt\": \"2018-04-05T08:18:05.923Z\",\n        \"updatedAt\": \"2018-04-05T08:18:07.040Z\"\n    },\n    {\n        \"id\": \"5ac5dbbfc89e2c4d09ab0e81\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:18:07.461Z\",\n        \"updatedAt\": \"2018-04-05T08:18:07.461Z\"\n    },\n    {\n        \"id\": \"5ac5dbc0c89e2c4d09ab0e83\",\n        \"name\": \"Category\",\n        \"createdAt\": \"2018-04-05T08:18:08.916Z\",\n        \"updatedAt\": \"2018-04-05T08:18:08.916Z\"\n    },\n    {\n        \"id\": \"5acb6a8a2e02d87879cbfbc8\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-04-09T13:28:42.888Z\",\n        \"updatedAt\": \"2018-04-09T13:28:42.888Z\"\n    },\n    {\n        \"id\": \"5acb6a8c2e02d87879cbfbc9\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-04-09T13:28:44.546Z\",\n        \"updatedAt\": \"2018-04-09T13:28:44.546Z\"\n    },\n    {\n        \"id\": \"5acb6a8d2e02d87879cbfbca\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-04-09T13:28:45.969Z\",\n        \"updatedAt\": \"2018-04-09T13:28:45.969Z\"\n    },\n    {\n        \"id\": \"5acb6a8f2e02d87879cbfbcb\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-04-09T13:28:47.262Z\",\n        \"updatedAt\": \"2018-04-09T13:28:47.262Z\"\n    },\n    {\n        \"id\": \"5acb6a902e02d87879cbfbcc\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-04-09T13:28:48.397Z\",\n        \"updatedAt\": \"2018-04-09T13:28:48.397Z\"\n    },\n    {\n        \"id\": \"5acb6a912e02d87879cbfbcd\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-04-09T13:28:49.506Z\",\n        \"updatedAt\": \"2018-04-09T13:28:49.506Z\"\n    },\n    {\n        \"id\": \"5acb6a922e02d87879cbfbce\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-04-09T13:28:50.542Z\",\n        \"updatedAt\": \"2018-04-09T13:28:50.542Z\"\n    },\n    {\n        \"id\": \"5acb6c502e02d87879cbfbcf\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-04-09T13:36:16.326Z\",\n        \"updatedAt\": \"2018-04-09T13:36:17.643Z\"\n    },\n    {\n        \"id\": \"5acb6c522e02d87879cbfbd0\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-04-09T13:36:18.683Z\",\n        \"updatedAt\": \"2018-04-09T13:36:19.849Z\"\n    },\n    {\n        \"id\": \"5acb6c542e02d87879cbfbd1\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-04-09T13:36:20.975Z\",\n        \"updatedAt\": \"2018-04-09T13:36:21.942Z\"\n    },\n    {\n        \"id\": \"5acb6c562e02d87879cbfbd2\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-04-09T13:36:22.946Z\",\n        \"updatedAt\": \"2018-04-09T13:36:23.882Z\"\n    },\n    {\n        \"id\": \"5acb6c582e02d87879cbfbd3\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-04-09T13:36:24.798Z\",\n        \"updatedAt\": \"2018-04-09T13:36:25.672Z\"\n    },\n    {\n        \"id\": \"5acb6c5a2e02d87879cbfbd4\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-04-09T13:36:26.576Z\",\n        \"updatedAt\": \"2018-04-09T13:36:27.429Z\"\n    },\n    {\n        \"id\": \"5acb6c5c2e02d87879cbfbd5\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-04-09T13:36:28.344Z\",\n        \"updatedAt\": \"2018-04-09T13:36:29.245Z\"\n    },\n    {\n        \"id\": \"5acb6c5e2e02d87879cbfbd6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-09T13:36:30.160Z\",\n        \"updatedAt\": \"2018-04-09T13:36:30.160Z\"\n    },\n    {\n        \"id\": \"5ad989370b9f170ba00cc482\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-04-20T06:31:19.093Z\",\n        \"updatedAt\": \"2018-04-20T06:31:19.093Z\"\n    },\n    {\n        \"id\": \"5ad989380b9f170ba00cc483\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-04-20T06:31:20.717Z\",\n        \"updatedAt\": \"2018-04-20T06:31:20.717Z\"\n    },\n    {\n        \"id\": \"5ad9893a0b9f170ba00cc484\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-04-20T06:31:22.027Z\",\n        \"updatedAt\": \"2018-04-20T06:31:22.027Z\"\n    },\n    {\n        \"id\": \"5ad9893b0b9f170ba00cc485\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-04-20T06:31:23.154Z\",\n        \"updatedAt\": \"2018-04-20T06:31:23.154Z\"\n    },\n    {\n        \"id\": \"5ad9893c0b9f170ba00cc486\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-04-20T06:31:24.248Z\",\n        \"updatedAt\": \"2018-04-20T06:31:24.248Z\"\n    },\n    {\n        \"id\": \"5ad9893d0b9f170ba00cc487\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-04-20T06:31:25.356Z\",\n        \"updatedAt\": \"2018-04-20T06:31:25.356Z\"\n    },\n    {\n        \"id\": \"5ad9893e0b9f170ba00cc488\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-04-20T06:31:26.443Z\",\n        \"updatedAt\": \"2018-04-20T06:31:26.443Z\"\n    },\n    {\n        \"id\": \"5ad989cd0b9f170ba00cc4e4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-04-20T06:33:49.536Z\",\n        \"updatedAt\": \"2018-04-20T06:33:50.496Z\"\n    },\n    {\n        \"id\": \"5ad989cf0b9f170ba00cc4e5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-04-20T06:33:51.439Z\",\n        \"updatedAt\": \"2018-04-20T06:33:52.372Z\"\n    },\n    {\n        \"id\": \"5ad989d10b9f170ba00cc4e6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-04-20T06:33:53.432Z\",\n        \"updatedAt\": \"2018-04-20T06:33:54.339Z\"\n    },\n    {\n        \"id\": \"5ad989d30b9f170ba00cc4e7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-04-20T06:33:55.419Z\",\n        \"updatedAt\": \"2018-04-20T06:33:56.336Z\"\n    },\n    {\n        \"id\": \"5ad989d50b9f170ba00cc4e8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-04-20T06:33:57.295Z\",\n        \"updatedAt\": \"2018-04-20T06:33:58.209Z\"\n    },\n    {\n        \"id\": \"5ad989d70b9f170ba00cc4e9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-04-20T06:33:59.221Z\",\n        \"updatedAt\": \"2018-04-20T06:34:00.162Z\"\n    },\n    {\n        \"id\": \"5ad989d90b9f170ba00cc4ea\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-04-20T06:34:01.134Z\",\n        \"updatedAt\": \"2018-04-20T06:34:02.025Z\"\n    },\n    {\n        \"id\": \"5ad989da0b9f170ba00cc4eb\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-20T06:34:02.948Z\",\n        \"updatedAt\": \"2018-04-20T06:34:02.948Z\"\n    },\n    {\n        \"id\": \"5ad98ad20b9f170ba00cc562\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-20T06:38:10.289Z\",\n        \"updatedAt\": \"2018-04-20T06:38:10.289Z\"\n    },\n    {\n        \"id\": \"5ad98ad70b9f170ba00cc563\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-20T06:38:15.144Z\",\n        \"updatedAt\": \"2018-04-20T06:38:15.144Z\"\n    },\n    {\n        \"id\": \"5addbbd82e02d83bcc3432a3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-23T10:56:24.537Z\",\n        \"updatedAt\": \"2018-04-23T10:56:24.537Z\"\n    },\n    {\n        \"id\": \"5addbbdb2e02d83bcc3432a4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-04-23T10:56:27.721Z\",\n        \"updatedAt\": \"2018-04-23T10:56:29.350Z\"\n    },\n    {\n        \"id\": \"5addbbde2e02d83bcc3432a5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-04-23T10:56:30.829Z\",\n        \"updatedAt\": \"2018-04-23T10:56:31.968Z\"\n    },\n    {\n        \"id\": \"5addbbe12e02d83bcc3432a6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-04-23T10:56:33.052Z\",\n        \"updatedAt\": \"2018-04-23T10:56:34.083Z\"\n    },\n    {\n        \"id\": \"5addbbe32e02d83bcc3432a7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-04-23T10:56:35.077Z\",\n        \"updatedAt\": \"2018-04-23T10:56:35.967Z\"\n    },\n    {\n        \"id\": \"5addbbe42e02d83bcc3432a8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-04-23T10:56:36.891Z\",\n        \"updatedAt\": \"2018-04-23T10:56:38.464Z\"\n    },\n    {\n        \"id\": \"5addbbe72e02d83bcc3432a9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-04-23T10:56:39.773Z\",\n        \"updatedAt\": \"2018-04-23T10:56:41.016Z\"\n    },\n    {\n        \"id\": \"5addbbe92e02d83bcc3432aa\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-04-23T10:56:41.998Z\",\n        \"updatedAt\": \"2018-04-23T10:56:43.439Z\"\n    },\n    {\n        \"id\": \"5addbbef2e02d83bcc3432ac\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-04-23T10:56:47.335Z\",\n        \"updatedAt\": \"2018-04-23T10:56:47.335Z\"\n    },\n    {\n        \"id\": \"5addbbf02e02d83bcc3432ad\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-04-23T10:56:48.463Z\",\n        \"updatedAt\": \"2018-04-23T10:56:48.463Z\"\n    },\n    {\n        \"id\": \"5addbbf12e02d83bcc3432ae\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-04-23T10:56:49.402Z\",\n        \"updatedAt\": \"2018-04-23T10:56:49.402Z\"\n    },\n    {\n        \"id\": \"5addbbf22e02d83bcc3432af\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-04-23T10:56:50.421Z\",\n        \"updatedAt\": \"2018-04-23T10:56:50.421Z\"\n    },\n    {\n        \"id\": \"5addbbf32e02d83bcc3432b0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-04-23T10:56:51.286Z\",\n        \"updatedAt\": \"2018-04-23T10:56:51.286Z\"\n    },\n    {\n        \"id\": \"5addbbf42e02d83bcc3432b1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-04-23T10:56:52.248Z\",\n        \"updatedAt\": \"2018-04-23T10:56:52.248Z\"\n    },\n    {\n        \"id\": \"5addbbf52e02d83bcc3432b2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-04-23T10:56:53.255Z\",\n        \"updatedAt\": \"2018-04-23T10:56:53.255Z\"\n    },\n    {\n        \"id\": \"5addbc2b2e02d83bcc3432b5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-23T10:57:47.351Z\",\n        \"updatedAt\": \"2018-04-23T10:57:47.351Z\"\n    },\n    {\n        \"id\": \"5addbccf2e02d83bcc3432f4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-23T11:00:31.856Z\",\n        \"updatedAt\": \"2018-04-23T11:00:31.856Z\"\n    },\n    {\n        \"id\": \"5addbe622e02d83bcc343387\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-23T11:07:14.349Z\",\n        \"updatedAt\": \"2018-04-23T11:07:14.349Z\"\n    },\n    {\n        \"id\": \"5addbe662e02d83bcc343388\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-04-23T11:07:18.187Z\",\n        \"updatedAt\": \"2018-04-23T11:07:19.175Z\"\n    },\n    {\n        \"id\": \"5addbe682e02d83bcc343389\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-04-23T11:07:20.324Z\",\n        \"updatedAt\": \"2018-04-23T11:07:21.460Z\"\n    },\n    {\n        \"id\": \"5addbe6a2e02d83bcc34338a\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-04-23T11:07:22.602Z\",\n        \"updatedAt\": \"2018-04-23T11:07:23.592Z\"\n    },\n    {\n        \"id\": \"5addbe6d2e02d83bcc34338b\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-04-23T11:07:25.003Z\",\n        \"updatedAt\": \"2018-04-23T11:07:26.300Z\"\n    },\n    {\n        \"id\": \"5addbe6f2e02d83bcc34338c\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-04-23T11:07:27.325Z\",\n        \"updatedAt\": \"2018-04-23T11:07:28.194Z\"\n    },\n    {\n        \"id\": \"5addbe712e02d83bcc34338d\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-04-23T11:07:29.449Z\",\n        \"updatedAt\": \"2018-04-23T11:07:30.579Z\"\n    },\n    {\n        \"id\": \"5addbe732e02d83bcc34338e\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-04-23T11:07:31.718Z\",\n        \"updatedAt\": \"2018-04-23T11:07:32.885Z\"\n    },\n    {\n        \"id\": \"5addbe772e02d83bcc343390\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-04-23T11:07:35.776Z\",\n        \"updatedAt\": \"2018-04-23T11:07:35.776Z\"\n    },\n    {\n        \"id\": \"5addbe782e02d83bcc343391\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-04-23T11:07:36.642Z\",\n        \"updatedAt\": \"2018-04-23T11:07:36.642Z\"\n    },\n    {\n        \"id\": \"5addbe792e02d83bcc343392\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-04-23T11:07:37.507Z\",\n        \"updatedAt\": \"2018-04-23T11:07:37.507Z\"\n    },\n    {\n        \"id\": \"5addbe7a2e02d83bcc343393\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-04-23T11:07:38.814Z\",\n        \"updatedAt\": \"2018-04-23T11:07:38.814Z\"\n    },\n    {\n        \"id\": \"5addbe7c2e02d83bcc343394\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-04-23T11:07:40.073Z\",\n        \"updatedAt\": \"2018-04-23T11:07:40.073Z\"\n    },\n    {\n        \"id\": \"5addbe7d2e02d83bcc343395\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-04-23T11:07:41.085Z\",\n        \"updatedAt\": \"2018-04-23T11:07:41.085Z\"\n    },\n    {\n        \"id\": \"5addbe7d2e02d83bcc343396\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-04-23T11:07:41.987Z\",\n        \"updatedAt\": \"2018-04-23T11:07:41.987Z\"\n    },\n    {\n        \"id\": \"5addbead2e02d83bcc343399\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-23T11:08:29.507Z\",\n        \"updatedAt\": \"2018-04-23T11:08:29.507Z\"\n    },\n    {\n        \"id\": \"5addbf3c2e02d83bcc3433d8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-04-23T11:10:52.645Z\",\n        \"updatedAt\": \"2018-04-23T11:10:52.645Z\"\n    },\n    {\n        \"id\": \"5b222ed70b9f175f971221ce\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-14T09:01:11.799Z\",\n        \"updatedAt\": \"2018-06-14T09:01:11.799Z\"\n    },\n    {\n        \"id\": \"5b222ed80b9f175f971221cf\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-14T09:01:12.832Z\",\n        \"updatedAt\": \"2018-06-14T09:01:12.832Z\"\n    },\n    {\n        \"id\": \"5b222ed90b9f175f971221d0\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-14T09:01:13.839Z\",\n        \"updatedAt\": \"2018-06-14T09:01:13.839Z\"\n    },\n    {\n        \"id\": \"5b222eda0b9f175f971221d1\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-14T09:01:14.849Z\",\n        \"updatedAt\": \"2018-06-14T09:01:14.849Z\"\n    },\n    {\n        \"id\": \"5b222edb0b9f175f971221d2\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-14T09:01:15.859Z\",\n        \"updatedAt\": \"2018-06-14T09:01:15.859Z\"\n    },\n    {\n        \"id\": \"5b222edc0b9f175f971221d3\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-14T09:01:16.867Z\",\n        \"updatedAt\": \"2018-06-14T09:01:16.867Z\"\n    },\n    {\n        \"id\": \"5b222edd0b9f175f971221d4\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-14T09:01:17.946Z\",\n        \"updatedAt\": \"2018-06-14T09:01:17.946Z\"\n    },\n    {\n        \"id\": \"5b222ee60b9f175f971221d6\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-14T09:01:26.163Z\",\n        \"updatedAt\": \"2018-06-14T09:01:27.189Z\"\n    },\n    {\n        \"id\": \"5b222ee80b9f175f971221d7\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-14T09:01:28.249Z\",\n        \"updatedAt\": \"2018-06-14T09:01:29.304Z\"\n    },\n    {\n        \"id\": \"5b222eea0b9f175f971221d8\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-14T09:01:30.331Z\",\n        \"updatedAt\": \"2018-06-14T09:01:31.357Z\"\n    },\n    {\n        \"id\": \"5b222eec0b9f175f971221d9\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-14T09:01:32.380Z\",\n        \"updatedAt\": \"2018-06-14T09:01:33.429Z\"\n    },\n    {\n        \"id\": \"5b222eee0b9f175f971221da\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-14T09:01:34.449Z\",\n        \"updatedAt\": \"2018-06-14T09:01:35.480Z\"\n    },\n    {\n        \"id\": \"5b222ef00b9f175f971221db\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-14T09:01:36.561Z\",\n        \"updatedAt\": \"2018-06-14T09:01:37.643Z\"\n    },\n    {\n        \"id\": \"5b222ef20b9f175f971221dc\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-14T09:01:38.671Z\",\n        \"updatedAt\": \"2018-06-14T09:01:39.716Z\"\n    },\n    {\n        \"id\": \"5b222ef40b9f175f971221dd\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T09:01:40.739Z\",\n        \"updatedAt\": \"2018-06-14T09:01:40.739Z\"\n    },\n    {\n        \"id\": \"5b222ef60b9f175f971221de\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T09:01:42.786Z\",\n        \"updatedAt\": \"2018-06-14T09:01:42.786Z\"\n    },\n    {\n        \"id\": \"5b222efa0b9f175f971221df\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T09:01:46.786Z\",\n        \"updatedAt\": \"2018-06-14T09:01:46.786Z\"\n    },\n    {\n        \"id\": \"5b2349070b9f176b44931332\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-15T05:05:11.581Z\",\n        \"updatedAt\": \"2018-06-15T05:05:12.760Z\"\n    },\n    {\n        \"id\": \"5b2349090b9f176b44931333\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-15T05:05:13.899Z\",\n        \"updatedAt\": \"2018-06-15T05:05:15.020Z\"\n    },\n    {\n        \"id\": \"5b23490c0b9f176b44931334\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-15T05:05:16.135Z\",\n        \"updatedAt\": \"2018-06-15T05:05:17.251Z\"\n    },\n    {\n        \"id\": \"5b23490e0b9f176b44931335\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-15T05:05:18.346Z\",\n        \"updatedAt\": \"2018-06-15T05:05:19.438Z\"\n    },\n    {\n        \"id\": \"5b2349100b9f176b44931336\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-15T05:05:20.525Z\",\n        \"updatedAt\": \"2018-06-15T05:05:21.595Z\"\n    },\n    {\n        \"id\": \"5b2349120b9f176b44931337\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-15T05:05:22.723Z\",\n        \"updatedAt\": \"2018-06-15T05:05:23.804Z\"\n    },\n    {\n        \"id\": \"5b2349140b9f176b44931338\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-15T05:05:24.880Z\",\n        \"updatedAt\": \"2018-06-15T05:05:25.957Z\"\n    },\n    {\n        \"id\": \"5b2349460b9f176b4493133a\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-15T05:06:14.499Z\",\n        \"updatedAt\": \"2018-06-15T05:06:14.499Z\"\n    },\n    {\n        \"id\": \"5b2349470b9f176b4493133b\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-15T05:06:15.601Z\",\n        \"updatedAt\": \"2018-06-15T05:06:15.601Z\"\n    },\n    {\n        \"id\": \"5b2349480b9f176b4493133c\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-15T05:06:16.695Z\",\n        \"updatedAt\": \"2018-06-15T05:06:16.695Z\"\n    },\n    {\n        \"id\": \"5b2349490b9f176b4493133d\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-15T05:06:17.777Z\",\n        \"updatedAt\": \"2018-06-15T05:06:17.777Z\"\n    },\n    {\n        \"id\": \"5b23494a0b9f176b4493133e\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-15T05:06:18.977Z\",\n        \"updatedAt\": \"2018-06-15T05:06:18.977Z\"\n    },\n    {\n        \"id\": \"5b23494c0b9f176b4493133f\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-15T05:06:20.075Z\",\n        \"updatedAt\": \"2018-06-15T05:06:20.075Z\"\n    },\n    {\n        \"id\": \"5b23494d0b9f176b44931340\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-15T05:06:21.156Z\",\n        \"updatedAt\": \"2018-06-15T05:06:21.156Z\"\n    },\n    {\n        \"id\": \"5b23494e0b9f176b44931341\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T05:06:22.243Z\",\n        \"updatedAt\": \"2018-06-15T05:06:22.243Z\"\n    },\n    {\n        \"id\": \"5b2349530b9f176b44931343\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T05:06:27.755Z\",\n        \"updatedAt\": \"2018-06-15T05:06:27.755Z\"\n    },\n    {\n        \"id\": \"5b2349570b9f176b44931344\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T05:06:31.350Z\",\n        \"updatedAt\": \"2018-06-15T05:06:31.350Z\"\n    },\n    {\n        \"id\": \"5b2360150b9f176b449314ee\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-15T06:43:33.772Z\",\n        \"updatedAt\": \"2018-06-15T06:43:33.772Z\"\n    },\n    {\n        \"id\": \"5b2360160b9f176b449314ef\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-15T06:43:34.808Z\",\n        \"updatedAt\": \"2018-06-15T06:43:34.808Z\"\n    },\n    {\n        \"id\": \"5b2360170b9f176b449314f0\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-15T06:43:35.868Z\",\n        \"updatedAt\": \"2018-06-15T06:43:35.868Z\"\n    },\n    {\n        \"id\": \"5b2360180b9f176b449314f1\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-15T06:43:36.906Z\",\n        \"updatedAt\": \"2018-06-15T06:43:36.906Z\"\n    },\n    {\n        \"id\": \"5b2360190b9f176b449314f2\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-15T06:43:37.941Z\",\n        \"updatedAt\": \"2018-06-15T06:43:37.941Z\"\n    },\n    {\n        \"id\": \"5b23601a0b9f176b449314f3\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-15T06:43:38.992Z\",\n        \"updatedAt\": \"2018-06-15T06:43:38.992Z\"\n    },\n    {\n        \"id\": \"5b23601c0b9f176b449314f4\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-15T06:43:40.017Z\",\n        \"updatedAt\": \"2018-06-15T06:43:40.017Z\"\n    },\n    {\n        \"id\": \"5b2360250b9f176b449314f6\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-15T06:43:49.242Z\",\n        \"updatedAt\": \"2018-06-15T06:43:50.277Z\"\n    },\n    {\n        \"id\": \"5b2360270b9f176b449314f7\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-15T06:43:51.307Z\",\n        \"updatedAt\": \"2018-06-15T06:43:52.338Z\"\n    },\n    {\n        \"id\": \"5b2360290b9f176b449314f8\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-15T06:43:53.373Z\",\n        \"updatedAt\": \"2018-06-15T06:43:54.403Z\"\n    },\n    {\n        \"id\": \"5b23602b0b9f176b449314f9\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-15T06:43:55.433Z\",\n        \"updatedAt\": \"2018-06-15T06:43:56.467Z\"\n    },\n    {\n        \"id\": \"5b23602d0b9f176b449314fa\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-15T06:43:57.523Z\",\n        \"updatedAt\": \"2018-06-15T06:43:58.551Z\"\n    },\n    {\n        \"id\": \"5b23602f0b9f176b449314fb\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-15T06:43:59.584Z\",\n        \"updatedAt\": \"2018-06-15T06:44:00.616Z\"\n    },\n    {\n        \"id\": \"5b2360310b9f176b449314fc\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-15T06:44:01.644Z\",\n        \"updatedAt\": \"2018-06-15T06:44:02.675Z\"\n    },\n    {\n        \"id\": \"5b2360330b9f176b449314fd\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T06:44:03.702Z\",\n        \"updatedAt\": \"2018-06-15T06:44:03.702Z\"\n    },\n    {\n        \"id\": \"5b2360350b9f176b449314fe\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T06:44:05.760Z\",\n        \"updatedAt\": \"2018-06-15T06:44:05.760Z\"\n    },\n    {\n        \"id\": \"5b2360390b9f176b449314ff\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T06:44:09.759Z\",\n        \"updatedAt\": \"2018-06-15T06:44:09.759Z\"\n    },\n    {\n        \"id\": \"5b23774d0b9f176b4493159b\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-15T08:22:37.329Z\",\n        \"updatedAt\": \"2018-06-15T08:22:37.329Z\"\n    },\n    {\n        \"id\": \"5b23774e0b9f176b4493159c\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-15T08:22:38.352Z\",\n        \"updatedAt\": \"2018-06-15T08:22:38.352Z\"\n    },\n    {\n        \"id\": \"5b23774f0b9f176b4493159d\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-15T08:22:39.372Z\",\n        \"updatedAt\": \"2018-06-15T08:22:39.372Z\"\n    },\n    {\n        \"id\": \"5b2377500b9f176b4493159e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-15T08:22:40.410Z\",\n        \"updatedAt\": \"2018-06-15T08:22:40.410Z\"\n    },\n    {\n        \"id\": \"5b2377510b9f176b4493159f\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-15T08:22:41.432Z\",\n        \"updatedAt\": \"2018-06-15T08:22:41.432Z\"\n    },\n    {\n        \"id\": \"5b2377520b9f176b449315a0\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-15T08:22:42.454Z\",\n        \"updatedAt\": \"2018-06-15T08:22:42.454Z\"\n    },\n    {\n        \"id\": \"5b2377530b9f176b449315a1\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-15T08:22:43.482Z\",\n        \"updatedAt\": \"2018-06-15T08:22:43.482Z\"\n    },\n    {\n        \"id\": \"5b23775b0b9f176b449315a3\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-15T08:22:51.572Z\",\n        \"updatedAt\": \"2018-06-15T08:22:52.641Z\"\n    },\n    {\n        \"id\": \"5b23775d0b9f176b449315a4\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-15T08:22:53.678Z\",\n        \"updatedAt\": \"2018-06-15T08:22:54.743Z\"\n    },\n    {\n        \"id\": \"5b23775f0b9f176b449315aa\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-15T08:22:55.762Z\",\n        \"updatedAt\": \"2018-06-15T08:22:56.836Z\"\n    },\n    {\n        \"id\": \"5b2377610b9f176b449315ae\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-15T08:22:57.918Z\",\n        \"updatedAt\": \"2018-06-15T08:22:59.007Z\"\n    },\n    {\n        \"id\": \"5b2377640b9f176b449315af\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-15T08:23:00.058Z\",\n        \"updatedAt\": \"2018-06-15T08:23:01.092Z\"\n    },\n    {\n        \"id\": \"5b2377660b9f176b449315b0\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-15T08:23:02.132Z\",\n        \"updatedAt\": \"2018-06-15T08:23:03.168Z\"\n    },\n    {\n        \"id\": \"5b2377680b9f176b449315b1\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-15T08:23:04.203Z\",\n        \"updatedAt\": \"2018-06-15T08:23:05.240Z\"\n    },\n    {\n        \"id\": \"5b23776a0b9f176b449315b2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T08:23:06.271Z\",\n        \"updatedAt\": \"2018-06-15T08:23:06.271Z\"\n    },\n    {\n        \"id\": \"5b23776c0b9f176b449315b3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T08:23:08.332Z\",\n        \"updatedAt\": \"2018-06-15T08:23:08.332Z\"\n    },\n    {\n        \"id\": \"5b2377700b9f176b449315b4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-15T08:23:12.348Z\",\n        \"updatedAt\": \"2018-06-15T08:23:12.348Z\"\n    },\n    {\n        \"id\": \"5b27556c0b9f1751000e0cff\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-18T06:47:08.974Z\",\n        \"updatedAt\": \"2018-06-18T06:47:08.974Z\"\n    },\n    {\n        \"id\": \"5b27556e0b9f1751000e0d00\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-18T06:47:10.069Z\",\n        \"updatedAt\": \"2018-06-18T06:47:10.069Z\"\n    },\n    {\n        \"id\": \"5b27556f0b9f1751000e0d01\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-18T06:47:11.115Z\",\n        \"updatedAt\": \"2018-06-18T06:47:11.115Z\"\n    },\n    {\n        \"id\": \"5b2755700b9f1751000e0d02\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-18T06:47:12.139Z\",\n        \"updatedAt\": \"2018-06-18T06:47:12.139Z\"\n    },\n    {\n        \"id\": \"5b2755710b9f1751000e0d03\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-18T06:47:13.158Z\",\n        \"updatedAt\": \"2018-06-18T06:47:13.158Z\"\n    },\n    {\n        \"id\": \"5b2755720b9f1751000e0d04\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-18T06:47:14.177Z\",\n        \"updatedAt\": \"2018-06-18T06:47:14.177Z\"\n    },\n    {\n        \"id\": \"5b2755730b9f1751000e0d05\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-18T06:47:15.193Z\",\n        \"updatedAt\": \"2018-06-18T06:47:15.193Z\"\n    },\n    {\n        \"id\": \"5b27557b0b9f1751000e0d07\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-18T06:47:23.546Z\",\n        \"updatedAt\": \"2018-06-18T06:47:24.572Z\"\n    },\n    {\n        \"id\": \"5b27557d0b9f1751000e0d08\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-18T06:47:25.595Z\",\n        \"updatedAt\": \"2018-06-18T06:47:26.641Z\"\n    },\n    {\n        \"id\": \"5b27557f0b9f1751000e0d09\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-18T06:47:27.722Z\",\n        \"updatedAt\": \"2018-06-18T06:47:28.846Z\"\n    },\n    {\n        \"id\": \"5b2755810b9f1751000e0d0a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-18T06:47:29.894Z\",\n        \"updatedAt\": \"2018-06-18T06:47:30.921Z\"\n    },\n    {\n        \"id\": \"5b2755830b9f1751000e0d0b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-18T06:47:31.945Z\",\n        \"updatedAt\": \"2018-06-18T06:47:32.967Z\"\n    },\n    {\n        \"id\": \"5b2755860b9f1751000e0d0c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-18T06:47:34.001Z\",\n        \"updatedAt\": \"2018-06-18T06:47:35.025Z\"\n    },\n    {\n        \"id\": \"5b2755880b9f1751000e0d0d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-18T06:47:36.044Z\",\n        \"updatedAt\": \"2018-06-18T06:47:37.091Z\"\n    },\n    {\n        \"id\": \"5b27558a0b9f1751000e0d0e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-18T06:47:38.113Z\",\n        \"updatedAt\": \"2018-06-18T06:47:38.113Z\"\n    },\n    {\n        \"id\": \"5b27558c0b9f1751000e0d0f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-18T06:47:40.159Z\",\n        \"updatedAt\": \"2018-06-18T06:47:40.159Z\"\n    },\n    {\n        \"id\": \"5b2755900b9f1751000e0d10\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-18T06:47:44.139Z\",\n        \"updatedAt\": \"2018-06-18T06:47:44.139Z\"\n    },\n    {\n        \"id\": \"5b28a6390b9f1751000e0ec9\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-19T06:44:09.214Z\",\n        \"updatedAt\": \"2018-06-19T06:44:09.214Z\"\n    },\n    {\n        \"id\": \"5b28a63a0b9f1751000e0eca\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-19T06:44:10.310Z\",\n        \"updatedAt\": \"2018-06-19T06:44:10.310Z\"\n    },\n    {\n        \"id\": \"5b28a63b0b9f1751000e0ecb\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-19T06:44:11.400Z\",\n        \"updatedAt\": \"2018-06-19T06:44:11.400Z\"\n    },\n    {\n        \"id\": \"5b28a63c0b9f1751000e0ecc\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-19T06:44:12.426Z\",\n        \"updatedAt\": \"2018-06-19T06:44:12.426Z\"\n    },\n    {\n        \"id\": \"5b28a63d0b9f1751000e0ecd\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-19T06:44:13.471Z\",\n        \"updatedAt\": \"2018-06-19T06:44:13.471Z\"\n    },\n    {\n        \"id\": \"5b28a63e0b9f1751000e0ece\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-19T06:44:14.535Z\",\n        \"updatedAt\": \"2018-06-19T06:44:14.535Z\"\n    },\n    {\n        \"id\": \"5b28a63f0b9f1751000e0ecf\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-19T06:44:15.630Z\",\n        \"updatedAt\": \"2018-06-19T06:44:15.630Z\"\n    },\n    {\n        \"id\": \"5b28a6470b9f1751000e0ed1\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-19T06:44:23.964Z\",\n        \"updatedAt\": \"2018-06-19T06:44:25.030Z\"\n    },\n    {\n        \"id\": \"5b28a64a0b9f1751000e0ed2\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-19T06:44:26.109Z\",\n        \"updatedAt\": \"2018-06-19T06:44:27.166Z\"\n    },\n    {\n        \"id\": \"5b28a64c0b9f1751000e0ed3\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-19T06:44:28.233Z\",\n        \"updatedAt\": \"2018-06-19T06:44:29.335Z\"\n    },\n    {\n        \"id\": \"5b28a64e0b9f1751000e0ed4\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-19T06:44:30.369Z\",\n        \"updatedAt\": \"2018-06-19T06:44:31.401Z\"\n    },\n    {\n        \"id\": \"5b28a6500b9f1751000e0ed5\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-19T06:44:32.434Z\",\n        \"updatedAt\": \"2018-06-19T06:44:33.476Z\"\n    },\n    {\n        \"id\": \"5b28a6520b9f1751000e0ed6\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-19T06:44:34.507Z\",\n        \"updatedAt\": \"2018-06-19T06:44:35.531Z\"\n    },\n    {\n        \"id\": \"5b28a6540b9f1751000e0ed7\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-19T06:44:36.584Z\",\n        \"updatedAt\": \"2018-06-19T06:44:37.658Z\"\n    },\n    {\n        \"id\": \"5b28a6560b9f1751000e0ed8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-19T06:44:38.714Z\",\n        \"updatedAt\": \"2018-06-19T06:44:38.714Z\"\n    },\n    {\n        \"id\": \"5b28a6580b9f1751000e0ed9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-19T06:44:40.826Z\",\n        \"updatedAt\": \"2018-06-19T06:44:40.826Z\"\n    },\n    {\n        \"id\": \"5b28a65d0b9f1751000e0eda\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-19T06:44:45.006Z\",\n        \"updatedAt\": \"2018-06-19T06:44:45.006Z\"\n    },\n    {\n        \"id\": \"5b29ce4f0b9f1751000e0fc1\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-20T03:47:27.890Z\",\n        \"updatedAt\": \"2018-06-20T03:47:27.890Z\"\n    },\n    {\n        \"id\": \"5b29ce500b9f1751000e0fc2\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-20T03:47:28.891Z\",\n        \"updatedAt\": \"2018-06-20T03:47:28.891Z\"\n    },\n    {\n        \"id\": \"5b29ce510b9f1751000e0fc3\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-20T03:47:29.889Z\",\n        \"updatedAt\": \"2018-06-20T03:47:29.889Z\"\n    },\n    {\n        \"id\": \"5b29ce520b9f1751000e0fc4\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-20T03:47:30.891Z\",\n        \"updatedAt\": \"2018-06-20T03:47:30.891Z\"\n    },\n    {\n        \"id\": \"5b29ce530b9f1751000e0fc5\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-20T03:47:31.887Z\",\n        \"updatedAt\": \"2018-06-20T03:47:31.887Z\"\n    },\n    {\n        \"id\": \"5b29ce540b9f1751000e0fc6\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-20T03:47:32.881Z\",\n        \"updatedAt\": \"2018-06-20T03:47:32.881Z\"\n    },\n    {\n        \"id\": \"5b29ce550b9f1751000e0fc7\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-20T03:47:33.889Z\",\n        \"updatedAt\": \"2018-06-20T03:47:33.889Z\"\n    },\n    {\n        \"id\": \"5b29ce5d0b9f1751000e0fc9\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-20T03:47:41.773Z\",\n        \"updatedAt\": \"2018-06-20T03:47:42.772Z\"\n    },\n    {\n        \"id\": \"5b29ce5f0b9f1751000e0fca\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-20T03:47:43.790Z\",\n        \"updatedAt\": \"2018-06-20T03:47:44.786Z\"\n    },\n    {\n        \"id\": \"5b29ce610b9f1751000e0fcb\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-20T03:47:45.793Z\",\n        \"updatedAt\": \"2018-06-20T03:47:46.792Z\"\n    },\n    {\n        \"id\": \"5b29ce630b9f1751000e0fcc\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-20T03:47:47.786Z\",\n        \"updatedAt\": \"2018-06-20T03:47:48.800Z\"\n    },\n    {\n        \"id\": \"5b29ce650b9f1751000e0fcd\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-20T03:47:49.842Z\",\n        \"updatedAt\": \"2018-06-20T03:47:50.842Z\"\n    },\n    {\n        \"id\": \"5b29ce670b9f1751000e0fce\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-20T03:47:51.842Z\",\n        \"updatedAt\": \"2018-06-20T03:47:52.839Z\"\n    },\n    {\n        \"id\": \"5b29ce690b9f1751000e0fcf\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-20T03:47:53.835Z\",\n        \"updatedAt\": \"2018-06-20T03:47:54.841Z\"\n    },\n    {\n        \"id\": \"5b29ce6b0b9f1751000e0fd0\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T03:47:55.840Z\",\n        \"updatedAt\": \"2018-06-20T03:47:55.840Z\"\n    },\n    {\n        \"id\": \"5b29ce6d0b9f1751000e0fd1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T03:47:57.852Z\",\n        \"updatedAt\": \"2018-06-20T03:47:57.852Z\"\n    },\n    {\n        \"id\": \"5b29ce710b9f1751000e0fd2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T03:48:01.758Z\",\n        \"updatedAt\": \"2018-06-20T03:48:01.758Z\"\n    },\n    {\n        \"id\": \"5b29d9e80b9f1751000e1058\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-20T04:36:56.556Z\",\n        \"updatedAt\": \"2018-06-20T04:36:56.556Z\"\n    },\n    {\n        \"id\": \"5b29d9e90b9f1751000e1059\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-20T04:36:57.551Z\",\n        \"updatedAt\": \"2018-06-20T04:36:57.551Z\"\n    },\n    {\n        \"id\": \"5b29d9ea0b9f1751000e105a\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-20T04:36:58.548Z\",\n        \"updatedAt\": \"2018-06-20T04:36:58.548Z\"\n    },\n    {\n        \"id\": \"5b29d9eb0b9f1751000e105b\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-20T04:36:59.550Z\",\n        \"updatedAt\": \"2018-06-20T04:36:59.550Z\"\n    },\n    {\n        \"id\": \"5b29d9ec0b9f1751000e105c\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-20T04:37:00.542Z\",\n        \"updatedAt\": \"2018-06-20T04:37:00.542Z\"\n    },\n    {\n        \"id\": \"5b29d9ed0b9f1751000e105d\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-20T04:37:01.539Z\",\n        \"updatedAt\": \"2018-06-20T04:37:01.539Z\"\n    },\n    {\n        \"id\": \"5b29d9ee0b9f1751000e105e\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-20T04:37:02.531Z\",\n        \"updatedAt\": \"2018-06-20T04:37:02.531Z\"\n    },\n    {\n        \"id\": \"5b29d9f60b9f1751000e1060\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-20T04:37:10.387Z\",\n        \"updatedAt\": \"2018-06-20T04:37:11.387Z\"\n    },\n    {\n        \"id\": \"5b29d9f80b9f1751000e1061\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-20T04:37:12.379Z\",\n        \"updatedAt\": \"2018-06-20T04:37:13.371Z\"\n    },\n    {\n        \"id\": \"5b29d9fa0b9f1751000e1062\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-20T04:37:14.373Z\",\n        \"updatedAt\": \"2018-06-20T04:37:15.378Z\"\n    },\n    {\n        \"id\": \"5b29d9fc0b9f1751000e1063\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-20T04:37:16.436Z\",\n        \"updatedAt\": \"2018-06-20T04:37:17.428Z\"\n    },\n    {\n        \"id\": \"5b29d9fe0b9f1751000e1064\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-20T04:37:18.437Z\",\n        \"updatedAt\": \"2018-06-20T04:37:19.424Z\"\n    },\n    {\n        \"id\": \"5b29da000b9f1751000e1065\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-20T04:37:20.416Z\",\n        \"updatedAt\": \"2018-06-20T04:37:21.411Z\"\n    },\n    {\n        \"id\": \"5b29da020b9f1751000e1066\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-20T04:37:22.399Z\",\n        \"updatedAt\": \"2018-06-20T04:37:23.386Z\"\n    },\n    {\n        \"id\": \"5b29da040b9f1751000e1067\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T04:37:24.441Z\",\n        \"updatedAt\": \"2018-06-20T04:37:24.441Z\"\n    },\n    {\n        \"id\": \"5b29da060b9f1751000e1068\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T04:37:26.430Z\",\n        \"updatedAt\": \"2018-06-20T04:37:26.430Z\"\n    },\n    {\n        \"id\": \"5b29da0a0b9f1751000e1069\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T04:37:30.272Z\",\n        \"updatedAt\": \"2018-06-20T04:37:30.272Z\"\n    },\n    {\n        \"id\": \"5b29f60a0b9f1751000e10ef\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-20T06:36:58.247Z\",\n        \"updatedAt\": \"2018-06-20T06:36:58.247Z\"\n    },\n    {\n        \"id\": \"5b29f60b0b9f1751000e10f0\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-20T06:36:59.239Z\",\n        \"updatedAt\": \"2018-06-20T06:36:59.239Z\"\n    },\n    {\n        \"id\": \"5b29f60c0b9f1751000e10f1\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-20T06:37:00.227Z\",\n        \"updatedAt\": \"2018-06-20T06:37:00.227Z\"\n    },\n    {\n        \"id\": \"5b29f60d0b9f1751000e10f2\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-20T06:37:01.230Z\",\n        \"updatedAt\": \"2018-06-20T06:37:01.230Z\"\n    },\n    {\n        \"id\": \"5b29f60e0b9f1751000e10f3\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-20T06:37:02.248Z\",\n        \"updatedAt\": \"2018-06-20T06:37:02.248Z\"\n    },\n    {\n        \"id\": \"5b29f60f0b9f1751000e10f4\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-20T06:37:03.240Z\",\n        \"updatedAt\": \"2018-06-20T06:37:03.240Z\"\n    },\n    {\n        \"id\": \"5b29f6100b9f1751000e10f5\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-20T06:37:04.237Z\",\n        \"updatedAt\": \"2018-06-20T06:37:04.237Z\"\n    },\n    {\n        \"id\": \"5b29f6180b9f1751000e10f7\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-20T06:37:12.118Z\",\n        \"updatedAt\": \"2018-06-20T06:37:13.108Z\"\n    },\n    {\n        \"id\": \"5b29f61a0b9f1751000e10f8\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-20T06:37:14.098Z\",\n        \"updatedAt\": \"2018-06-20T06:37:15.089Z\"\n    },\n    {\n        \"id\": \"5b29f61c0b9f1751000e10f9\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-20T06:37:16.076Z\",\n        \"updatedAt\": \"2018-06-20T06:37:17.138Z\"\n    },\n    {\n        \"id\": \"5b29f61e0b9f1751000e10fa\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-20T06:37:18.139Z\",\n        \"updatedAt\": \"2018-06-20T06:37:19.139Z\"\n    },\n    {\n        \"id\": \"5b29f6200b9f1751000e10fb\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-20T06:37:20.150Z\",\n        \"updatedAt\": \"2018-06-20T06:37:21.188Z\"\n    },\n    {\n        \"id\": \"5b29f6220b9f1751000e10fc\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-20T06:37:22.193Z\",\n        \"updatedAt\": \"2018-06-20T06:37:23.184Z\"\n    },\n    {\n        \"id\": \"5b29f6240b9f1751000e10fd\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-20T06:37:24.250Z\",\n        \"updatedAt\": \"2018-06-20T06:37:25.263Z\"\n    },\n    {\n        \"id\": \"5b29f6260b9f1751000e10fe\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T06:37:26.258Z\",\n        \"updatedAt\": \"2018-06-20T06:37:26.258Z\"\n    },\n    {\n        \"id\": \"5b29f6280b9f1751000e10ff\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T06:37:28.346Z\",\n        \"updatedAt\": \"2018-06-20T06:37:28.346Z\"\n    },\n    {\n        \"id\": \"5b29f62c0b9f1751000e1100\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-20T06:37:32.206Z\",\n        \"updatedAt\": \"2018-06-20T06:37:32.206Z\"\n    },\n    {\n        \"id\": \"5b2b2d020b9f1751000e1191\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-21T04:43:46.767Z\",\n        \"updatedAt\": \"2018-06-21T04:43:46.767Z\"\n    },\n    {\n        \"id\": \"5b2b2d030b9f1751000e1192\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-21T04:43:47.783Z\",\n        \"updatedAt\": \"2018-06-21T04:43:47.783Z\"\n    },\n    {\n        \"id\": \"5b2b2d040b9f1751000e1193\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-21T04:43:48.799Z\",\n        \"updatedAt\": \"2018-06-21T04:43:48.799Z\"\n    },\n    {\n        \"id\": \"5b2b2d050b9f1751000e1194\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-21T04:43:49.813Z\",\n        \"updatedAt\": \"2018-06-21T04:43:49.813Z\"\n    },\n    {\n        \"id\": \"5b2b2d060b9f1751000e1195\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-21T04:43:50.823Z\",\n        \"updatedAt\": \"2018-06-21T04:43:50.823Z\"\n    },\n    {\n        \"id\": \"5b2b2d070b9f1751000e1196\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-21T04:43:51.827Z\",\n        \"updatedAt\": \"2018-06-21T04:43:51.827Z\"\n    },\n    {\n        \"id\": \"5b2b2d080b9f1751000e1197\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-21T04:43:52.843Z\",\n        \"updatedAt\": \"2018-06-21T04:43:52.843Z\"\n    },\n    {\n        \"id\": \"5b2b2d100b9f1751000e1199\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-21T04:44:00.787Z\",\n        \"updatedAt\": \"2018-06-21T04:44:01.803Z\"\n    },\n    {\n        \"id\": \"5b2b2d120b9f1751000e119a\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-21T04:44:02.808Z\",\n        \"updatedAt\": \"2018-06-21T04:44:03.828Z\"\n    },\n    {\n        \"id\": \"5b2b2d140b9f1751000e119b\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-21T04:44:04.833Z\",\n        \"updatedAt\": \"2018-06-21T04:44:05.843Z\"\n    },\n    {\n        \"id\": \"5b2b2d160b9f1751000e119c\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-21T04:44:06.875Z\",\n        \"updatedAt\": \"2018-06-21T04:44:07.885Z\"\n    },\n    {\n        \"id\": \"5b2b2d180b9f1751000e119d\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-21T04:44:08.901Z\",\n        \"updatedAt\": \"2018-06-21T04:44:09.910Z\"\n    },\n    {\n        \"id\": \"5b2b2d1a0b9f1751000e119e\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-21T04:44:10.916Z\",\n        \"updatedAt\": \"2018-06-21T04:44:11.921Z\"\n    },\n    {\n        \"id\": \"5b2b2d1c0b9f1751000e119f\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-21T04:44:12.925Z\",\n        \"updatedAt\": \"2018-06-21T04:44:13.929Z\"\n    },\n    {\n        \"id\": \"5b2b2d1e0b9f1751000e11a0\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-21T04:44:14.938Z\",\n        \"updatedAt\": \"2018-06-21T04:44:14.938Z\"\n    },\n    {\n        \"id\": \"5b2b2d200b9f1751000e11a1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-21T04:44:16.956Z\",\n        \"updatedAt\": \"2018-06-21T04:44:16.956Z\"\n    },\n    {\n        \"id\": \"5b2b2d250b9f1751000e11a2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-21T04:44:21.025Z\",\n        \"updatedAt\": \"2018-06-21T04:44:21.025Z\"\n    },\n    {\n        \"id\": \"5b2b49430b9f174b4b8430b9\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-21T06:44:19.449Z\",\n        \"updatedAt\": \"2018-06-21T06:44:19.449Z\"\n    },\n    {\n        \"id\": \"5b2b49440b9f174b4b8430ba\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-21T06:44:20.485Z\",\n        \"updatedAt\": \"2018-06-21T06:44:20.485Z\"\n    },\n    {\n        \"id\": \"5b2b49450b9f174b4b8430bb\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-21T06:44:21.516Z\",\n        \"updatedAt\": \"2018-06-21T06:44:21.516Z\"\n    },\n    {\n        \"id\": \"5b2b49460b9f174b4b8430bc\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-21T06:44:22.620Z\",\n        \"updatedAt\": \"2018-06-21T06:44:22.620Z\"\n    },\n    {\n        \"id\": \"5b2b49470b9f174b4b8430bd\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-21T06:44:23.660Z\",\n        \"updatedAt\": \"2018-06-21T06:44:23.660Z\"\n    },\n    {\n        \"id\": \"5b2b49480b9f174b4b8430be\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-21T06:44:24.686Z\",\n        \"updatedAt\": \"2018-06-21T06:44:24.686Z\"\n    },\n    {\n        \"id\": \"5b2b49490b9f174b4b8430bf\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-21T06:44:25.705Z\",\n        \"updatedAt\": \"2018-06-21T06:44:25.705Z\"\n    },\n    {\n        \"id\": \"5b2b49520b9f174b4b8430c1\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-21T06:44:34.038Z\",\n        \"updatedAt\": \"2018-06-21T06:44:35.098Z\"\n    },\n    {\n        \"id\": \"5b2b49540b9f174b4b8430c2\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-21T06:44:36.185Z\",\n        \"updatedAt\": \"2018-06-21T06:44:37.241Z\"\n    },\n    {\n        \"id\": \"5b2b49560b9f174b4b8430c3\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-21T06:44:38.288Z\",\n        \"updatedAt\": \"2018-06-21T06:44:39.308Z\"\n    },\n    {\n        \"id\": \"5b2b49580b9f174b4b8430c4\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-21T06:44:40.331Z\",\n        \"updatedAt\": \"2018-06-21T06:44:41.371Z\"\n    },\n    {\n        \"id\": \"5b2b495a0b9f174b4b8430c5\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-21T06:44:42.388Z\",\n        \"updatedAt\": \"2018-06-21T06:44:43.412Z\"\n    },\n    {\n        \"id\": \"5b2b495c0b9f174b4b8430c6\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-21T06:44:44.437Z\",\n        \"updatedAt\": \"2018-06-21T06:44:45.487Z\"\n    },\n    {\n        \"id\": \"5b2b495e0b9f174b4b8430c7\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-21T06:44:46.509Z\",\n        \"updatedAt\": \"2018-06-21T06:44:47.530Z\"\n    },\n    {\n        \"id\": \"5b2b49600b9f174b4b8430c8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-21T06:44:48.565Z\",\n        \"updatedAt\": \"2018-06-21T06:44:48.565Z\"\n    },\n    {\n        \"id\": \"5b2b49620b9f174b4b8430c9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-21T06:44:50.624Z\",\n        \"updatedAt\": \"2018-06-21T06:44:50.624Z\"\n    },\n    {\n        \"id\": \"5b2b49660b9f174b4b8430ca\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-21T06:44:54.590Z\",\n        \"updatedAt\": \"2018-06-21T06:44:54.590Z\"\n    },\n    {\n        \"id\": \"5b2c7dfe0b9f174b4b843296\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-22T04:41:34.074Z\",\n        \"updatedAt\": \"2018-06-22T04:41:34.074Z\"\n    },\n    {\n        \"id\": \"5b2c7dff0b9f174b4b843297\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-22T04:41:35.092Z\",\n        \"updatedAt\": \"2018-06-22T04:41:35.092Z\"\n    },\n    {\n        \"id\": \"5b2c7e000b9f174b4b843298\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-22T04:41:36.092Z\",\n        \"updatedAt\": \"2018-06-22T04:41:36.092Z\"\n    },\n    {\n        \"id\": \"5b2c7e010b9f174b4b843299\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-22T04:41:37.097Z\",\n        \"updatedAt\": \"2018-06-22T04:41:37.097Z\"\n    },\n    {\n        \"id\": \"5b2c7e020b9f174b4b84329a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-22T04:41:38.099Z\",\n        \"updatedAt\": \"2018-06-22T04:41:38.099Z\"\n    },\n    {\n        \"id\": \"5b2c7e030b9f174b4b84329b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-22T04:41:39.098Z\",\n        \"updatedAt\": \"2018-06-22T04:41:39.098Z\"\n    },\n    {\n        \"id\": \"5b2c7e040b9f174b4b84329c\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-22T04:41:40.105Z\",\n        \"updatedAt\": \"2018-06-22T04:41:40.105Z\"\n    },\n    {\n        \"id\": \"5b2c7e0c0b9f174b4b84329e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-22T04:41:48.039Z\",\n        \"updatedAt\": \"2018-06-22T04:41:49.042Z\"\n    },\n    {\n        \"id\": \"5b2c7e0e0b9f174b4b84329f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-22T04:41:50.051Z\",\n        \"updatedAt\": \"2018-06-22T04:41:51.055Z\"\n    },\n    {\n        \"id\": \"5b2c7e100b9f174b4b8432a0\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-22T04:41:52.055Z\",\n        \"updatedAt\": \"2018-06-22T04:41:53.060Z\"\n    },\n    {\n        \"id\": \"5b2c7e120b9f174b4b8432a1\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-22T04:41:54.069Z\",\n        \"updatedAt\": \"2018-06-22T04:41:55.074Z\"\n    },\n    {\n        \"id\": \"5b2c7e140b9f174b4b8432a2\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-22T04:41:56.080Z\",\n        \"updatedAt\": \"2018-06-22T04:41:57.086Z\"\n    },\n    {\n        \"id\": \"5b2c7e160b9f174b4b8432a3\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-22T04:41:58.113Z\",\n        \"updatedAt\": \"2018-06-22T04:41:59.117Z\"\n    },\n    {\n        \"id\": \"5b2c7e180b9f174b4b8432a4\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-22T04:42:00.134Z\",\n        \"updatedAt\": \"2018-06-22T04:42:01.134Z\"\n    },\n    {\n        \"id\": \"5b2c7e1a0b9f174b4b8432a5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-22T04:42:02.150Z\",\n        \"updatedAt\": \"2018-06-22T04:42:02.150Z\"\n    },\n    {\n        \"id\": \"5b2c7e1c0b9f174b4b8432a6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-22T04:42:04.158Z\",\n        \"updatedAt\": \"2018-06-22T04:42:04.158Z\"\n    },\n    {\n        \"id\": \"5b2c7e200b9f174b4b8432a7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-22T04:42:08.081Z\",\n        \"updatedAt\": \"2018-06-22T04:42:08.081Z\"\n    },\n    {\n        \"id\": \"5b2c9a2e0b9f174b4b84336e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-22T06:41:50.477Z\",\n        \"updatedAt\": \"2018-06-22T06:41:50.477Z\"\n    },\n    {\n        \"id\": \"5b2c9a2f0b9f174b4b843370\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-22T06:41:51.473Z\",\n        \"updatedAt\": \"2018-06-22T06:41:51.473Z\"\n    },\n    {\n        \"id\": \"5b2c9a300b9f174b4b843373\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-22T06:41:52.474Z\",\n        \"updatedAt\": \"2018-06-22T06:41:52.474Z\"\n    },\n    {\n        \"id\": \"5b2c9a310b9f174b4b843377\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-22T06:41:53.468Z\",\n        \"updatedAt\": \"2018-06-22T06:41:53.468Z\"\n    },\n    {\n        \"id\": \"5b2c9a320b9f174b4b843379\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-22T06:41:54.461Z\",\n        \"updatedAt\": \"2018-06-22T06:41:54.461Z\"\n    },\n    {\n        \"id\": \"5b2c9a330b9f174b4b84337b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-22T06:41:55.461Z\",\n        \"updatedAt\": \"2018-06-22T06:41:55.461Z\"\n    },\n    {\n        \"id\": \"5b2c9a340b9f174b4b84337e\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-22T06:41:56.459Z\",\n        \"updatedAt\": \"2018-06-22T06:41:56.459Z\"\n    },\n    {\n        \"id\": \"5b2c9a3c0b9f174b4b843380\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-22T06:42:04.366Z\",\n        \"updatedAt\": \"2018-06-22T06:42:05.365Z\"\n    },\n    {\n        \"id\": \"5b2c9a3e0b9f174b4b843381\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-22T06:42:06.353Z\",\n        \"updatedAt\": \"2018-06-22T06:42:07.360Z\"\n    },\n    {\n        \"id\": \"5b2c9a400b9f174b4b843382\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-22T06:42:08.355Z\",\n        \"updatedAt\": \"2018-06-22T06:42:09.344Z\"\n    },\n    {\n        \"id\": \"5b2c9a420b9f174b4b843383\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-22T06:42:10.329Z\",\n        \"updatedAt\": \"2018-06-22T06:42:11.320Z\"\n    },\n    {\n        \"id\": \"5b2c9a440b9f174b4b843384\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-22T06:42:12.305Z\",\n        \"updatedAt\": \"2018-06-22T06:42:13.305Z\"\n    },\n    {\n        \"id\": \"5b2c9a460b9f174b4b843385\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-22T06:42:14.296Z\",\n        \"updatedAt\": \"2018-06-22T06:42:15.284Z\"\n    },\n    {\n        \"id\": \"5b2c9a480b9f174b4b843386\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-22T06:42:16.288Z\",\n        \"updatedAt\": \"2018-06-22T06:42:17.281Z\"\n    },\n    {\n        \"id\": \"5b2c9a4a0b9f174b4b843387\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-22T06:42:18.268Z\",\n        \"updatedAt\": \"2018-06-22T06:42:18.268Z\"\n    },\n    {\n        \"id\": \"5b2c9a4c0b9f174b4b843388\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-22T06:42:20.254Z\",\n        \"updatedAt\": \"2018-06-22T06:42:20.254Z\"\n    },\n    {\n        \"id\": \"5b2c9a500b9f174b4b843389\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-22T06:42:24.094Z\",\n        \"updatedAt\": \"2018-06-22T06:42:24.094Z\"\n    },\n    {\n        \"id\": \"5b30728d0b9f174b4b8435ad\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-25T04:41:49.582Z\",\n        \"updatedAt\": \"2018-06-25T04:41:49.582Z\"\n    },\n    {\n        \"id\": \"5b30728e0b9f174b4b8435ae\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-25T04:41:50.583Z\",\n        \"updatedAt\": \"2018-06-25T04:41:50.583Z\"\n    },\n    {\n        \"id\": \"5b30728f0b9f174b4b8435af\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-25T04:41:51.586Z\",\n        \"updatedAt\": \"2018-06-25T04:41:51.586Z\"\n    },\n    {\n        \"id\": \"5b3072900b9f174b4b8435b0\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-25T04:41:52.590Z\",\n        \"updatedAt\": \"2018-06-25T04:41:52.590Z\"\n    },\n    {\n        \"id\": \"5b3072910b9f174b4b8435b1\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-25T04:41:53.594Z\",\n        \"updatedAt\": \"2018-06-25T04:41:53.594Z\"\n    },\n    {\n        \"id\": \"5b3072920b9f174b4b8435b2\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-25T04:41:54.596Z\",\n        \"updatedAt\": \"2018-06-25T04:41:54.596Z\"\n    },\n    {\n        \"id\": \"5b3072930b9f174b4b8435b3\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-25T04:41:55.599Z\",\n        \"updatedAt\": \"2018-06-25T04:41:55.599Z\"\n    },\n    {\n        \"id\": \"5b30729b0b9f174b4b8435b5\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-25T04:42:03.553Z\",\n        \"updatedAt\": \"2018-06-25T04:42:04.558Z\"\n    },\n    {\n        \"id\": \"5b30729d0b9f174b4b8435b6\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-25T04:42:05.595Z\",\n        \"updatedAt\": \"2018-06-25T04:42:06.600Z\"\n    },\n    {\n        \"id\": \"5b30729f0b9f174b4b8435b7\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-25T04:42:07.600Z\",\n        \"updatedAt\": \"2018-06-25T04:42:08.606Z\"\n    },\n    {\n        \"id\": \"5b3072a10b9f174b4b8435b8\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-25T04:42:09.607Z\",\n        \"updatedAt\": \"2018-06-25T04:42:10.623Z\"\n    },\n    {\n        \"id\": \"5b3072a30b9f174b4b8435b9\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-25T04:42:11.681Z\",\n        \"updatedAt\": \"2018-06-25T04:42:12.682Z\"\n    },\n    {\n        \"id\": \"5b3072a50b9f174b4b8435ba\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-25T04:42:13.679Z\",\n        \"updatedAt\": \"2018-06-25T04:42:14.684Z\"\n    },\n    {\n        \"id\": \"5b3072a70b9f174b4b8435bb\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-25T04:42:15.685Z\",\n        \"updatedAt\": \"2018-06-25T04:42:16.690Z\"\n    },\n    {\n        \"id\": \"5b3072a90b9f174b4b8435bc\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T04:42:17.689Z\",\n        \"updatedAt\": \"2018-06-25T04:42:17.689Z\"\n    },\n    {\n        \"id\": \"5b3072ab0b9f174b4b8435bd\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T04:42:19.695Z\",\n        \"updatedAt\": \"2018-06-25T04:42:19.695Z\"\n    },\n    {\n        \"id\": \"5b3072b00b9f174b4b8435be\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T04:42:24.583Z\",\n        \"updatedAt\": \"2018-06-25T04:42:24.583Z\"\n    },\n    {\n        \"id\": \"5b307b210b9f174b4b843657\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-25T05:18:25.309Z\",\n        \"updatedAt\": \"2018-06-25T05:18:25.309Z\"\n    },\n    {\n        \"id\": \"5b307b220b9f174b4b843658\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-25T05:18:26.323Z\",\n        \"updatedAt\": \"2018-06-25T05:18:26.323Z\"\n    },\n    {\n        \"id\": \"5b307b230b9f174b4b843659\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-25T05:18:27.331Z\",\n        \"updatedAt\": \"2018-06-25T05:18:27.331Z\"\n    },\n    {\n        \"id\": \"5b307b240b9f174b4b84365a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-25T05:18:28.339Z\",\n        \"updatedAt\": \"2018-06-25T05:18:28.339Z\"\n    },\n    {\n        \"id\": \"5b307b250b9f174b4b84365b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-25T05:18:29.340Z\",\n        \"updatedAt\": \"2018-06-25T05:18:29.340Z\"\n    },\n    {\n        \"id\": \"5b307b260b9f174b4b84365c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-25T05:18:30.372Z\",\n        \"updatedAt\": \"2018-06-25T05:18:30.372Z\"\n    },\n    {\n        \"id\": \"5b307b270b9f174b4b84365d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-25T05:18:31.469Z\",\n        \"updatedAt\": \"2018-06-25T05:18:31.469Z\"\n    },\n    {\n        \"id\": \"5b307b2f0b9f174b4b84365f\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-25T05:18:39.457Z\",\n        \"updatedAt\": \"2018-06-25T05:18:40.459Z\"\n    },\n    {\n        \"id\": \"5b307b310b9f174b4b843660\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-25T05:18:41.512Z\",\n        \"updatedAt\": \"2018-06-25T05:18:42.513Z\"\n    },\n    {\n        \"id\": \"5b307b330b9f174b4b843661\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-25T05:18:43.532Z\",\n        \"updatedAt\": \"2018-06-25T05:18:44.533Z\"\n    },\n    {\n        \"id\": \"5b307b350b9f174b4b843662\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-25T05:18:45.543Z\",\n        \"updatedAt\": \"2018-06-25T05:18:46.540Z\"\n    },\n    {\n        \"id\": \"5b307b370b9f174b4b843663\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-25T05:18:47.540Z\",\n        \"updatedAt\": \"2018-06-25T05:18:48.551Z\"\n    },\n    {\n        \"id\": \"5b307b390b9f174b4b843664\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-25T05:18:49.559Z\",\n        \"updatedAt\": \"2018-06-25T05:18:50.556Z\"\n    },\n    {\n        \"id\": \"5b307b3b0b9f174b4b843665\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-25T05:18:51.559Z\",\n        \"updatedAt\": \"2018-06-25T05:18:52.624Z\"\n    },\n    {\n        \"id\": \"5b307b3d0b9f174b4b843666\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T05:18:53.616Z\",\n        \"updatedAt\": \"2018-06-25T05:18:53.616Z\"\n    },\n    {\n        \"id\": \"5b307b3f0b9f174b4b843667\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T05:18:55.605Z\",\n        \"updatedAt\": \"2018-06-25T05:18:55.605Z\"\n    },\n    {\n        \"id\": \"5b307b430b9f174b4b843668\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T05:18:59.468Z\",\n        \"updatedAt\": \"2018-06-25T05:18:59.468Z\"\n    },\n    {\n        \"id\": \"5b308efe0b9f174b4b84371b\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-25T06:43:10.339Z\",\n        \"updatedAt\": \"2018-06-25T06:43:10.339Z\"\n    },\n    {\n        \"id\": \"5b308eff0b9f174b4b84371c\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-25T06:43:11.338Z\",\n        \"updatedAt\": \"2018-06-25T06:43:11.338Z\"\n    },\n    {\n        \"id\": \"5b308f000b9f174b4b84371d\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-25T06:43:12.336Z\",\n        \"updatedAt\": \"2018-06-25T06:43:12.336Z\"\n    },\n    {\n        \"id\": \"5b308f010b9f174b4b84371e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-25T06:43:13.340Z\",\n        \"updatedAt\": \"2018-06-25T06:43:13.340Z\"\n    },\n    {\n        \"id\": \"5b308f020b9f174b4b84371f\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-25T06:43:14.342Z\",\n        \"updatedAt\": \"2018-06-25T06:43:14.342Z\"\n    },\n    {\n        \"id\": \"5b308f030b9f174b4b843720\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-25T06:43:15.338Z\",\n        \"updatedAt\": \"2018-06-25T06:43:15.338Z\"\n    },\n    {\n        \"id\": \"5b308f040b9f174b4b843721\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-25T06:43:16.384Z\",\n        \"updatedAt\": \"2018-06-25T06:43:16.384Z\"\n    },\n    {\n        \"id\": \"5b308f0c0b9f174b4b843723\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-25T06:43:24.308Z\",\n        \"updatedAt\": \"2018-06-25T06:43:25.306Z\"\n    },\n    {\n        \"id\": \"5b308f0e0b9f174b4b843724\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-25T06:43:26.304Z\",\n        \"updatedAt\": \"2018-06-25T06:43:27.367Z\"\n    },\n    {\n        \"id\": \"5b308f100b9f174b4b843725\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-25T06:43:28.367Z\",\n        \"updatedAt\": \"2018-06-25T06:43:29.369Z\"\n    },\n    {\n        \"id\": \"5b308f120b9f174b4b843726\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-25T06:43:30.373Z\",\n        \"updatedAt\": \"2018-06-25T06:43:31.384Z\"\n    },\n    {\n        \"id\": \"5b308f140b9f174b4b843727\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-25T06:43:32.380Z\",\n        \"updatedAt\": \"2018-06-25T06:43:33.382Z\"\n    },\n    {\n        \"id\": \"5b308f160b9f174b4b843728\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-25T06:43:34.376Z\",\n        \"updatedAt\": \"2018-06-25T06:43:35.380Z\"\n    },\n    {\n        \"id\": \"5b308f180b9f174b4b843729\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-25T06:43:36.381Z\",\n        \"updatedAt\": \"2018-06-25T06:43:37.380Z\"\n    },\n    {\n        \"id\": \"5b308f1a0b9f174b4b84372a\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T06:43:38.375Z\",\n        \"updatedAt\": \"2018-06-25T06:43:38.375Z\"\n    },\n    {\n        \"id\": \"5b308f1c0b9f174b4b84372b\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T06:43:40.463Z\",\n        \"updatedAt\": \"2018-06-25T06:43:40.463Z\"\n    },\n    {\n        \"id\": \"5b308f200b9f174b4b84372c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-25T06:43:44.375Z\",\n        \"updatedAt\": \"2018-06-25T06:43:44.375Z\"\n    },\n    {\n        \"id\": \"5b31c4890b9f17146be1bc48\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-26T04:43:53.745Z\",\n        \"updatedAt\": \"2018-06-26T04:43:53.745Z\"\n    },\n    {\n        \"id\": \"5b31c48a0b9f17146be1bc4a\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-26T04:43:54.789Z\",\n        \"updatedAt\": \"2018-06-26T04:43:54.789Z\"\n    },\n    {\n        \"id\": \"5b31c48b0b9f17146be1bc4b\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-26T04:43:55.828Z\",\n        \"updatedAt\": \"2018-06-26T04:43:55.828Z\"\n    },\n    {\n        \"id\": \"5b31c48c0b9f17146be1bc4d\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-26T04:43:56.855Z\",\n        \"updatedAt\": \"2018-06-26T04:43:56.855Z\"\n    },\n    {\n        \"id\": \"5b31c48d0b9f17146be1bc4e\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-26T04:43:57.884Z\",\n        \"updatedAt\": \"2018-06-26T04:43:57.884Z\"\n    },\n    {\n        \"id\": \"5b31c48e0b9f17146be1bc4f\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-26T04:43:58.919Z\",\n        \"updatedAt\": \"2018-06-26T04:43:58.919Z\"\n    },\n    {\n        \"id\": \"5b31c48f0b9f17146be1bc51\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-26T04:43:59.948Z\",\n        \"updatedAt\": \"2018-06-26T04:43:59.948Z\"\n    },\n    {\n        \"id\": \"5b31c4980b9f17146be1bc55\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-26T04:44:08.239Z\",\n        \"updatedAt\": \"2018-06-26T04:44:09.280Z\"\n    },\n    {\n        \"id\": \"5b31c49a0b9f17146be1bc57\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-26T04:44:10.310Z\",\n        \"updatedAt\": \"2018-06-26T04:44:11.347Z\"\n    },\n    {\n        \"id\": \"5b31c49c0b9f17146be1bc58\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-26T04:44:12.377Z\",\n        \"updatedAt\": \"2018-06-26T04:44:13.408Z\"\n    },\n    {\n        \"id\": \"5b31c49e0b9f17146be1bc5a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-26T04:44:14.440Z\",\n        \"updatedAt\": \"2018-06-26T04:44:15.473Z\"\n    },\n    {\n        \"id\": \"5b31c4a00b9f17146be1bc5c\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-26T04:44:16.507Z\",\n        \"updatedAt\": \"2018-06-26T04:44:17.540Z\"\n    },\n    {\n        \"id\": \"5b31c4a20b9f17146be1bc5d\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-26T04:44:18.576Z\",\n        \"updatedAt\": \"2018-06-26T04:44:19.657Z\"\n    },\n    {\n        \"id\": \"5b31c4a40b9f17146be1bc5f\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-26T04:44:20.698Z\",\n        \"updatedAt\": \"2018-06-26T04:44:21.727Z\"\n    },\n    {\n        \"id\": \"5b31c4a60b9f17146be1bc61\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-26T04:44:22.765Z\",\n        \"updatedAt\": \"2018-06-26T04:44:22.765Z\"\n    },\n    {\n        \"id\": \"5b31c4a80b9f17146be1bc62\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-26T04:44:24.833Z\",\n        \"updatedAt\": \"2018-06-26T04:44:24.833Z\"\n    },\n    {\n        \"id\": \"5b31c4ac0b9f17146be1bc65\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-26T04:44:28.866Z\",\n        \"updatedAt\": \"2018-06-26T04:44:28.866Z\"\n    },\n    {\n        \"id\": \"5b31e0a90b9f1768e9452d5c\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-26T06:43:53.555Z\",\n        \"updatedAt\": \"2018-06-26T06:43:53.555Z\"\n    },\n    {\n        \"id\": \"5b31e0aa0b9f1768e9452d5d\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-26T06:43:54.618Z\",\n        \"updatedAt\": \"2018-06-26T06:43:54.618Z\"\n    },\n    {\n        \"id\": \"5b31e0ab0b9f1768e9452d5e\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-26T06:43:55.674Z\",\n        \"updatedAt\": \"2018-06-26T06:43:55.674Z\"\n    },\n    {\n        \"id\": \"5b31e0ac0b9f1768e9452d5f\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-26T06:43:56.716Z\",\n        \"updatedAt\": \"2018-06-26T06:43:56.716Z\"\n    },\n    {\n        \"id\": \"5b31e0ad0b9f1768e9452d60\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-26T06:43:57.763Z\",\n        \"updatedAt\": \"2018-06-26T06:43:57.763Z\"\n    },\n    {\n        \"id\": \"5b31e0ae0b9f1768e9452d61\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-26T06:43:58.808Z\",\n        \"updatedAt\": \"2018-06-26T06:43:58.808Z\"\n    },\n    {\n        \"id\": \"5b31e0af0b9f1768e9452d62\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-26T06:43:59.852Z\",\n        \"updatedAt\": \"2018-06-26T06:43:59.852Z\"\n    },\n    {\n        \"id\": \"5b31e0b80b9f1768e9452d64\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-26T06:44:08.226Z\",\n        \"updatedAt\": \"2018-06-26T06:44:09.310Z\"\n    },\n    {\n        \"id\": \"5b31e0ba0b9f1768e9452d65\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-26T06:44:10.368Z\",\n        \"updatedAt\": \"2018-06-26T06:44:11.470Z\"\n    },\n    {\n        \"id\": \"5b31e0bc0b9f1768e9452d66\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-26T06:44:12.529Z\",\n        \"updatedAt\": \"2018-06-26T06:44:13.575Z\"\n    },\n    {\n        \"id\": \"5b31e0be0b9f1768e9452d67\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-26T06:44:14.608Z\",\n        \"updatedAt\": \"2018-06-26T06:44:15.673Z\"\n    },\n    {\n        \"id\": \"5b31e0c00b9f1768e9452d68\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-26T06:44:16.751Z\",\n        \"updatedAt\": \"2018-06-26T06:44:17.790Z\"\n    },\n    {\n        \"id\": \"5b31e0c20b9f1768e9452d69\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-26T06:44:18.826Z\",\n        \"updatedAt\": \"2018-06-26T06:44:19.875Z\"\n    },\n    {\n        \"id\": \"5b31e0c40b9f1768e9452d6a\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-26T06:44:20.913Z\",\n        \"updatedAt\": \"2018-06-26T06:44:21.961Z\"\n    },\n    {\n        \"id\": \"5b31e0c60b9f1768e9452d6b\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-26T06:44:22.995Z\",\n        \"updatedAt\": \"2018-06-26T06:44:22.995Z\"\n    },\n    {\n        \"id\": \"5b31e0c90b9f1768e9452d6c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-26T06:44:25.079Z\",\n        \"updatedAt\": \"2018-06-26T06:44:25.079Z\"\n    },\n    {\n        \"id\": \"5b31e0cd0b9f1768e9452d6d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-26T06:44:29.179Z\",\n        \"updatedAt\": \"2018-06-26T06:44:29.179Z\"\n    },\n    {\n        \"id\": \"5b3467c80b9f1737a8d2f550\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T04:44:56.320Z\",\n        \"updatedAt\": \"2018-06-28T04:44:56.320Z\"\n    },\n    {\n        \"id\": \"5b3467c90b9f1737a8d2f551\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T04:44:57.343Z\",\n        \"updatedAt\": \"2018-06-28T04:44:57.343Z\"\n    },\n    {\n        \"id\": \"5b3467ca0b9f1737a8d2f552\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T04:44:58.366Z\",\n        \"updatedAt\": \"2018-06-28T04:44:58.366Z\"\n    },\n    {\n        \"id\": \"5b3467cb0b9f1737a8d2f553\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T04:44:59.392Z\",\n        \"updatedAt\": \"2018-06-28T04:44:59.392Z\"\n    },\n    {\n        \"id\": \"5b3467cc0b9f1737a8d2f554\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T04:45:00.397Z\",\n        \"updatedAt\": \"2018-06-28T04:45:00.397Z\"\n    },\n    {\n        \"id\": \"5b3467cd0b9f1737a8d2f555\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T04:45:01.460Z\",\n        \"updatedAt\": \"2018-06-28T04:45:01.460Z\"\n    },\n    {\n        \"id\": \"5b3467ce0b9f1737a8d2f556\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T04:45:02.517Z\",\n        \"updatedAt\": \"2018-06-28T04:45:02.517Z\"\n    },\n    {\n        \"id\": \"5b3467d70b9f1737a8d2f558\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T04:45:11.333Z\",\n        \"updatedAt\": \"2018-06-28T04:45:12.352Z\"\n    },\n    {\n        \"id\": \"5b3467d90b9f1737a8d2f559\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T04:45:13.358Z\",\n        \"updatedAt\": \"2018-06-28T04:45:14.364Z\"\n    },\n    {\n        \"id\": \"5b3467db0b9f1737a8d2f55a\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T04:45:15.375Z\",\n        \"updatedAt\": \"2018-06-28T04:45:16.383Z\"\n    },\n    {\n        \"id\": \"5b3467dd0b9f1737a8d2f55b\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T04:45:17.391Z\",\n        \"updatedAt\": \"2018-06-28T04:45:18.457Z\"\n    },\n    {\n        \"id\": \"5b3467df0b9f1737a8d2f55c\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T04:45:19.468Z\",\n        \"updatedAt\": \"2018-06-28T04:45:20.474Z\"\n    },\n    {\n        \"id\": \"5b3467e10b9f1737a8d2f55d\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T04:45:21.480Z\",\n        \"updatedAt\": \"2018-06-28T04:45:22.480Z\"\n    },\n    {\n        \"id\": \"5b3467e30b9f1737a8d2f55e\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T04:45:23.483Z\",\n        \"updatedAt\": \"2018-06-28T04:45:24.488Z\"\n    },\n    {\n        \"id\": \"5b3467e50b9f1737a8d2f55f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T04:45:25.509Z\",\n        \"updatedAt\": \"2018-06-28T04:45:25.509Z\"\n    },\n    {\n        \"id\": \"5b3467e70b9f1737a8d2f560\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T04:45:27.533Z\",\n        \"updatedAt\": \"2018-06-28T04:45:27.533Z\"\n    },\n    {\n        \"id\": \"5b3467eb0b9f1737a8d2f561\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T04:45:31.535Z\",\n        \"updatedAt\": \"2018-06-28T04:45:31.535Z\"\n    },\n    {\n        \"id\": \"5b34838c0b9f1737a8d2f655\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T06:43:24.685Z\",\n        \"updatedAt\": \"2018-06-28T06:43:24.685Z\"\n    },\n    {\n        \"id\": \"5b34838d0b9f1737a8d2f656\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T06:43:25.688Z\",\n        \"updatedAt\": \"2018-06-28T06:43:25.688Z\"\n    },\n    {\n        \"id\": \"5b34838e0b9f1737a8d2f657\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T06:43:26.693Z\",\n        \"updatedAt\": \"2018-06-28T06:43:26.693Z\"\n    },\n    {\n        \"id\": \"5b34838f0b9f1737a8d2f658\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T06:43:27.703Z\",\n        \"updatedAt\": \"2018-06-28T06:43:27.703Z\"\n    },\n    {\n        \"id\": \"5b3483900b9f1737a8d2f659\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T06:43:28.704Z\",\n        \"updatedAt\": \"2018-06-28T06:43:28.704Z\"\n    },\n    {\n        \"id\": \"5b3483910b9f1737a8d2f65a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T06:43:29.703Z\",\n        \"updatedAt\": \"2018-06-28T06:43:29.703Z\"\n    },\n    {\n        \"id\": \"5b3483920b9f1737a8d2f65b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T06:43:30.695Z\",\n        \"updatedAt\": \"2018-06-28T06:43:30.695Z\"\n    },\n    {\n        \"id\": \"5b34839a0b9f1737a8d2f65d\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T06:43:38.607Z\",\n        \"updatedAt\": \"2018-06-28T06:43:39.615Z\"\n    },\n    {\n        \"id\": \"5b34839c0b9f1737a8d2f65e\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T06:43:40.613Z\",\n        \"updatedAt\": \"2018-06-28T06:43:41.609Z\"\n    },\n    {\n        \"id\": \"5b34839e0b9f1737a8d2f65f\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T06:43:42.609Z\",\n        \"updatedAt\": \"2018-06-28T06:43:43.620Z\"\n    },\n    {\n        \"id\": \"5b3483a00b9f1737a8d2f660\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T06:43:44.629Z\",\n        \"updatedAt\": \"2018-06-28T06:43:45.630Z\"\n    },\n    {\n        \"id\": \"5b3483a20b9f1737a8d2f661\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T06:43:46.629Z\",\n        \"updatedAt\": \"2018-06-28T06:43:47.633Z\"\n    },\n    {\n        \"id\": \"5b3483a40b9f1737a8d2f662\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T06:43:48.635Z\",\n        \"updatedAt\": \"2018-06-28T06:43:49.651Z\"\n    },\n    {\n        \"id\": \"5b3483a60b9f1737a8d2f663\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T06:43:50.668Z\",\n        \"updatedAt\": \"2018-06-28T06:43:51.686Z\"\n    },\n    {\n        \"id\": \"5b3483a80b9f1737a8d2f664\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T06:43:52.681Z\",\n        \"updatedAt\": \"2018-06-28T06:43:52.681Z\"\n    },\n    {\n        \"id\": \"5b3483aa0b9f1737a8d2f665\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T06:43:54.686Z\",\n        \"updatedAt\": \"2018-06-28T06:43:54.686Z\"\n    },\n    {\n        \"id\": \"5b3483ae0b9f1737a8d2f666\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T06:43:58.592Z\",\n        \"updatedAt\": \"2018-06-28T06:43:58.592Z\"\n    },\n    {\n        \"id\": \"5b34c7260b9f1746d496a911\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T11:31:50.932Z\",\n        \"updatedAt\": \"2018-06-28T11:31:50.932Z\"\n    },\n    {\n        \"id\": \"5b34c7270b9f1746d496a912\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T11:31:51.993Z\",\n        \"updatedAt\": \"2018-06-28T11:31:51.993Z\"\n    },\n    {\n        \"id\": \"5b34c7280b9f1746d496a913\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T11:31:52.985Z\",\n        \"updatedAt\": \"2018-06-28T11:31:52.985Z\"\n    },\n    {\n        \"id\": \"5b34c72a0b9f1746d496a914\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T11:31:54.018Z\",\n        \"updatedAt\": \"2018-06-28T11:31:54.018Z\"\n    },\n    {\n        \"id\": \"5b34c72b0b9f1746d496a915\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T11:31:55.020Z\",\n        \"updatedAt\": \"2018-06-28T11:31:55.020Z\"\n    },\n    {\n        \"id\": \"5b34c72c0b9f1746d496a916\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T11:31:56.021Z\",\n        \"updatedAt\": \"2018-06-28T11:31:56.021Z\"\n    },\n    {\n        \"id\": \"5b34c72d0b9f1746d496a917\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T11:31:57.051Z\",\n        \"updatedAt\": \"2018-06-28T11:31:57.051Z\"\n    },\n    {\n        \"id\": \"5b34c7350b9f1746d496a919\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T11:32:05.527Z\",\n        \"updatedAt\": \"2018-06-28T11:32:07.623Z\"\n    },\n    {\n        \"id\": \"5b34c7380b9f1746d496a91a\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T11:32:08.764Z\",\n        \"updatedAt\": \"2018-06-28T11:32:09.868Z\"\n    },\n    {\n        \"id\": \"5b34c73a0b9f1746d496a91b\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T11:32:10.947Z\",\n        \"updatedAt\": \"2018-06-28T11:32:11.997Z\"\n    },\n    {\n        \"id\": \"5b34c73d0b9f1746d496a91c\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T11:32:13.058Z\",\n        \"updatedAt\": \"2018-06-28T11:32:14.113Z\"\n    },\n    {\n        \"id\": \"5b34c73f0b9f1746d496a91d\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T11:32:15.177Z\",\n        \"updatedAt\": \"2018-06-28T11:32:16.266Z\"\n    },\n    {\n        \"id\": \"5b34c7410b9f1746d496a91e\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T11:32:17.314Z\",\n        \"updatedAt\": \"2018-06-28T11:32:18.330Z\"\n    },\n    {\n        \"id\": \"5b34c7430b9f1746d496a91f\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T11:32:19.353Z\",\n        \"updatedAt\": \"2018-06-28T11:32:20.428Z\"\n    },\n    {\n        \"id\": \"5b34c7450b9f1746d496a920\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T11:32:21.426Z\",\n        \"updatedAt\": \"2018-06-28T11:32:21.426Z\"\n    },\n    {\n        \"id\": \"5b34c7470b9f1746d496a921\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T11:32:23.415Z\",\n        \"updatedAt\": \"2018-06-28T11:32:23.415Z\"\n    },\n    {\n        \"id\": \"5b34c74b0b9f1746d496a922\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T11:32:27.435Z\",\n        \"updatedAt\": \"2018-06-28T11:32:27.435Z\"\n    },\n    {\n        \"id\": \"5b34f35d0b9f1746d496ab26\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T14:40:29.551Z\",\n        \"updatedAt\": \"2018-06-28T14:40:29.551Z\"\n    },\n    {\n        \"id\": \"5b34f35e0b9f1746d496ab27\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T14:40:30.601Z\",\n        \"updatedAt\": \"2018-06-28T14:40:30.601Z\"\n    },\n    {\n        \"id\": \"5b34f3620b9f1746d496ab28\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T14:40:34.198Z\",\n        \"updatedAt\": \"2018-06-28T14:40:34.198Z\"\n    },\n    {\n        \"id\": \"5b34f3630b9f1746d496ab29\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T14:40:35.195Z\",\n        \"updatedAt\": \"2018-06-28T14:40:35.195Z\"\n    },\n    {\n        \"id\": \"5b34f3640b9f1746d496ab2a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T14:40:36.243Z\",\n        \"updatedAt\": \"2018-06-28T14:40:36.243Z\"\n    },\n    {\n        \"id\": \"5b34f3650b9f1746d496ab2b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T14:40:37.255Z\",\n        \"updatedAt\": \"2018-06-28T14:40:37.255Z\"\n    },\n    {\n        \"id\": \"5b34f3660b9f1746d496ab2c\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T14:40:38.271Z\",\n        \"updatedAt\": \"2018-06-28T14:40:38.271Z\"\n    },\n    {\n        \"id\": \"5b34f36e0b9f1746d496ab2e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T14:40:46.437Z\",\n        \"updatedAt\": \"2018-06-28T14:40:47.564Z\"\n    },\n    {\n        \"id\": \"5b34f3720b9f1746d496ab2f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T14:40:50.339Z\",\n        \"updatedAt\": \"2018-06-28T14:40:51.411Z\"\n    },\n    {\n        \"id\": \"5b34f3740b9f1746d496ab30\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T14:40:52.421Z\",\n        \"updatedAt\": \"2018-06-28T14:40:53.448Z\"\n    },\n    {\n        \"id\": \"5b34f3760b9f1746d496ab31\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T14:40:54.451Z\",\n        \"updatedAt\": \"2018-06-28T14:40:55.456Z\"\n    },\n    {\n        \"id\": \"5b34f3780b9f1746d496ab32\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T14:40:56.482Z\",\n        \"updatedAt\": \"2018-06-28T14:40:57.513Z\"\n    },\n    {\n        \"id\": \"5b34f37a0b9f1746d496ab33\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T14:40:58.547Z\",\n        \"updatedAt\": \"2018-06-28T14:40:59.578Z\"\n    },\n    {\n        \"id\": \"5b34f37c0b9f1746d496ab34\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T14:41:00.674Z\",\n        \"updatedAt\": \"2018-06-28T14:41:01.737Z\"\n    },\n    {\n        \"id\": \"5b34f37e0b9f1746d496ab35\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T14:41:02.735Z\",\n        \"updatedAt\": \"2018-06-28T14:41:02.735Z\"\n    },\n    {\n        \"id\": \"5b34f3800b9f1746d496ab36\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T14:41:04.765Z\",\n        \"updatedAt\": \"2018-06-28T14:41:04.765Z\"\n    },\n    {\n        \"id\": \"5b34f3840b9f1746d496ab37\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T14:41:08.652Z\",\n        \"updatedAt\": \"2018-06-28T14:41:08.652Z\"\n    },\n    {\n        \"id\": \"5b34f96d0b9f1746d496abd9\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T15:06:21.230Z\",\n        \"updatedAt\": \"2018-06-28T15:06:21.230Z\"\n    },\n    {\n        \"id\": \"5b34f96e0b9f1746d496abdb\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T15:06:22.804Z\",\n        \"updatedAt\": \"2018-06-28T15:06:22.804Z\"\n    },\n    {\n        \"id\": \"5b34f9700b9f1746d496abdd\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T15:06:24.355Z\",\n        \"updatedAt\": \"2018-06-28T15:06:24.355Z\"\n    },\n    {\n        \"id\": \"5b34f9710b9f1746d496abdf\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T15:06:25.838Z\",\n        \"updatedAt\": \"2018-06-28T15:06:25.838Z\"\n    },\n    {\n        \"id\": \"5b34f9730b9f1746d496abe1\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T15:06:27.389Z\",\n        \"updatedAt\": \"2018-06-28T15:06:27.389Z\"\n    },\n    {\n        \"id\": \"5b34f9740b9f1746d496abe4\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T15:06:28.912Z\",\n        \"updatedAt\": \"2018-06-28T15:06:28.912Z\"\n    },\n    {\n        \"id\": \"5b34f9760b9f1746d496abe6\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T15:06:30.527Z\",\n        \"updatedAt\": \"2018-06-28T15:06:30.527Z\"\n    },\n    {\n        \"id\": \"5b34f9820b9f1746d496abe8\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-28T15:06:42.686Z\",\n        \"updatedAt\": \"2018-06-28T15:06:44.280Z\"\n    },\n    {\n        \"id\": \"5b34f9850b9f1746d496abe9\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-28T15:06:45.914Z\",\n        \"updatedAt\": \"2018-06-28T15:06:47.478Z\"\n    },\n    {\n        \"id\": \"5b34f9890b9f1746d496abea\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-28T15:06:49.108Z\",\n        \"updatedAt\": \"2018-06-28T15:06:50.660Z\"\n    },\n    {\n        \"id\": \"5b34f98c0b9f1746d496abeb\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-28T15:06:52.434Z\",\n        \"updatedAt\": \"2018-06-28T15:06:54.024Z\"\n    },\n    {\n        \"id\": \"5b34f98f0b9f1746d496abed\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-28T15:06:55.832Z\",\n        \"updatedAt\": \"2018-06-28T15:06:57.518Z\"\n    },\n    {\n        \"id\": \"5b34f9930b9f1746d496abee\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-28T15:06:59.239Z\",\n        \"updatedAt\": \"2018-06-28T15:07:00.815Z\"\n    },\n    {\n        \"id\": \"5b34f9960b9f1746d496abef\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-28T15:07:02.336Z\",\n        \"updatedAt\": \"2018-06-28T15:07:03.913Z\"\n    },\n    {\n        \"id\": \"5b34f99c0b9f1746d496abf0\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T15:07:08.437Z\",\n        \"updatedAt\": \"2018-06-28T15:07:08.437Z\"\n    },\n    {\n        \"id\": \"5b34f9a00b9f1746d496abf1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T15:07:12.613Z\",\n        \"updatedAt\": \"2018-06-28T15:07:12.613Z\"\n    },\n    {\n        \"id\": \"5b34f9a60b9f1746d496abf3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-28T15:07:18.629Z\",\n        \"updatedAt\": \"2018-06-28T15:07:18.629Z\"\n    },\n    {\n        \"id\": \"5b35b54e0b9f1746d496ad51\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-29T04:27:58.810Z\",\n        \"updatedAt\": \"2018-06-29T04:27:58.810Z\"\n    },\n    {\n        \"id\": \"5b35b5500b9f1746d496ad52\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-29T04:28:00.944Z\",\n        \"updatedAt\": \"2018-06-29T04:28:00.944Z\"\n    },\n    {\n        \"id\": \"5b35b5520b9f1746d496ad53\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-29T04:28:02.624Z\",\n        \"updatedAt\": \"2018-06-29T04:28:02.624Z\"\n    },\n    {\n        \"id\": \"5b35b5550b9f1746d496ad54\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-29T04:28:05.048Z\",\n        \"updatedAt\": \"2018-06-29T04:28:05.048Z\"\n    },\n    {\n        \"id\": \"5b35b5570b9f1746d496ad55\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-29T04:28:07.079Z\",\n        \"updatedAt\": \"2018-06-29T04:28:07.079Z\"\n    },\n    {\n        \"id\": \"5b35b5580b9f1746d496ad56\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-29T04:28:08.424Z\",\n        \"updatedAt\": \"2018-06-29T04:28:08.424Z\"\n    },\n    {\n        \"id\": \"5b35b5590b9f1746d496ad57\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-29T04:28:09.719Z\",\n        \"updatedAt\": \"2018-06-29T04:28:09.719Z\"\n    },\n    {\n        \"id\": \"5b35b5660b9f1746d496ad59\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-29T04:28:22.868Z\",\n        \"updatedAt\": \"2018-06-29T04:28:24.249Z\"\n    },\n    {\n        \"id\": \"5b35b56a0b9f1746d496ad5a\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-29T04:28:26.393Z\",\n        \"updatedAt\": \"2018-06-29T04:28:28.105Z\"\n    },\n    {\n        \"id\": \"5b35b56d0b9f1746d496ad5b\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-29T04:28:29.839Z\",\n        \"updatedAt\": \"2018-06-29T04:28:31.149Z\"\n    },\n    {\n        \"id\": \"5b35b5700b9f1746d496ad5c\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-29T04:28:32.518Z\",\n        \"updatedAt\": \"2018-06-29T04:28:33.785Z\"\n    },\n    {\n        \"id\": \"5b35b5730b9f1746d496ad5d\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-29T04:28:35.229Z\",\n        \"updatedAt\": \"2018-06-29T04:28:36.505Z\"\n    },\n    {\n        \"id\": \"5b35b5750b9f1746d496ad5e\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-29T04:28:37.798Z\",\n        \"updatedAt\": \"2018-06-29T04:28:39.169Z\"\n    },\n    {\n        \"id\": \"5b35b5780b9f1746d496ad5f\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-29T04:28:40.463Z\",\n        \"updatedAt\": \"2018-06-29T04:28:41.960Z\"\n    },\n    {\n        \"id\": \"5b35b57b0b9f1746d496ad60\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-29T04:28:43.344Z\",\n        \"updatedAt\": \"2018-06-29T04:28:43.344Z\"\n    },\n    {\n        \"id\": \"5b35b57f0b9f1746d496ad61\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-29T04:28:47.369Z\",\n        \"updatedAt\": \"2018-06-29T04:28:47.369Z\"\n    },\n    {\n        \"id\": \"5b35b5860b9f1746d496ad62\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-29T04:28:54.519Z\",\n        \"updatedAt\": \"2018-06-29T04:28:54.519Z\"\n    },\n    {\n        \"id\": \"5b35d50c0b9f171bcb85f04f\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-29T06:43:24.307Z\",\n        \"updatedAt\": \"2018-06-29T06:43:24.307Z\"\n    },\n    {\n        \"id\": \"5b35d50d0b9f171bcb85f050\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-29T06:43:25.307Z\",\n        \"updatedAt\": \"2018-06-29T06:43:25.307Z\"\n    },\n    {\n        \"id\": \"5b35d50e0b9f171bcb85f051\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-29T06:43:26.303Z\",\n        \"updatedAt\": \"2018-06-29T06:43:26.303Z\"\n    },\n    {\n        \"id\": \"5b35d50f0b9f171bcb85f052\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-29T06:43:27.294Z\",\n        \"updatedAt\": \"2018-06-29T06:43:27.294Z\"\n    },\n    {\n        \"id\": \"5b35d5100b9f171bcb85f053\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-29T06:43:28.280Z\",\n        \"updatedAt\": \"2018-06-29T06:43:28.280Z\"\n    },\n    {\n        \"id\": \"5b35d5110b9f171bcb85f054\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-29T06:43:29.285Z\",\n        \"updatedAt\": \"2018-06-29T06:43:29.285Z\"\n    },\n    {\n        \"id\": \"5b35d5120b9f171bcb85f055\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-29T06:43:30.270Z\",\n        \"updatedAt\": \"2018-06-29T06:43:30.270Z\"\n    },\n    {\n        \"id\": \"5b35d51a0b9f171bcb85f057\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-29T06:43:38.395Z\",\n        \"updatedAt\": \"2018-06-29T06:43:39.393Z\"\n    },\n    {\n        \"id\": \"5b35d51c0b9f171bcb85f058\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-29T06:43:40.384Z\",\n        \"updatedAt\": \"2018-06-29T06:43:41.379Z\"\n    },\n    {\n        \"id\": \"5b35d51e0b9f171bcb85f059\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-29T06:43:42.378Z\",\n        \"updatedAt\": \"2018-06-29T06:43:43.368Z\"\n    },\n    {\n        \"id\": \"5b35d5200b9f171bcb85f05a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-29T06:43:44.362Z\",\n        \"updatedAt\": \"2018-06-29T06:43:45.356Z\"\n    },\n    {\n        \"id\": \"5b35d5220b9f171bcb85f05b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-29T06:43:46.348Z\",\n        \"updatedAt\": \"2018-06-29T06:43:47.340Z\"\n    },\n    {\n        \"id\": \"5b35d5240b9f171bcb85f05c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-29T06:43:48.342Z\",\n        \"updatedAt\": \"2018-06-29T06:43:49.359Z\"\n    },\n    {\n        \"id\": \"5b35d5260b9f171bcb85f05d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-29T06:43:50.348Z\",\n        \"updatedAt\": \"2018-06-29T06:43:51.419Z\"\n    },\n    {\n        \"id\": \"5b35d5280b9f171bcb85f05e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-29T06:43:52.416Z\",\n        \"updatedAt\": \"2018-06-29T06:43:52.416Z\"\n    },\n    {\n        \"id\": \"5b35d52a0b9f171bcb85f05f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-29T06:43:54.404Z\",\n        \"updatedAt\": \"2018-06-29T06:43:54.404Z\"\n    },\n    {\n        \"id\": \"5b35d52e0b9f171bcb85f060\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-29T06:43:58.304Z\",\n        \"updatedAt\": \"2018-06-29T06:43:58.304Z\"\n    },\n    {\n        \"id\": \"5b39c99e0b9f171bcb85f245\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-02T06:43:42.736Z\",\n        \"updatedAt\": \"2018-07-02T06:43:42.736Z\"\n    },\n    {\n        \"id\": \"5b39c99f0b9f171bcb85f246\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-02T06:43:43.743Z\",\n        \"updatedAt\": \"2018-07-02T06:43:43.743Z\"\n    },\n    {\n        \"id\": \"5b39c9a00b9f171bcb85f247\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-02T06:43:44.751Z\",\n        \"updatedAt\": \"2018-07-02T06:43:44.751Z\"\n    },\n    {\n        \"id\": \"5b39c9a10b9f171bcb85f248\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-02T06:43:45.789Z\",\n        \"updatedAt\": \"2018-07-02T06:43:45.789Z\"\n    },\n    {\n        \"id\": \"5b39c9a20b9f171bcb85f249\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-02T06:43:46.813Z\",\n        \"updatedAt\": \"2018-07-02T06:43:46.813Z\"\n    },\n    {\n        \"id\": \"5b39c9a30b9f171bcb85f24a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-02T06:43:47.820Z\",\n        \"updatedAt\": \"2018-07-02T06:43:47.820Z\"\n    },\n    {\n        \"id\": \"5b39c9a40b9f171bcb85f24b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-02T06:43:48.823Z\",\n        \"updatedAt\": \"2018-07-02T06:43:48.823Z\"\n    },\n    {\n        \"id\": \"5b39c9ac0b9f171bcb85f24d\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-02T06:43:56.872Z\",\n        \"updatedAt\": \"2018-07-02T06:43:57.899Z\"\n    },\n    {\n        \"id\": \"5b39c9ae0b9f171bcb85f24e\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-02T06:43:58.902Z\",\n        \"updatedAt\": \"2018-07-02T06:43:59.907Z\"\n    },\n    {\n        \"id\": \"5b39c9b00b9f171bcb85f24f\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-02T06:44:00.929Z\",\n        \"updatedAt\": \"2018-07-02T06:44:01.938Z\"\n    },\n    {\n        \"id\": \"5b39c9b20b9f171bcb85f250\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-02T06:44:02.940Z\",\n        \"updatedAt\": \"2018-07-02T06:44:03.946Z\"\n    },\n    {\n        \"id\": \"5b39c9b40b9f171bcb85f251\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-02T06:44:04.952Z\",\n        \"updatedAt\": \"2018-07-02T06:44:05.954Z\"\n    },\n    {\n        \"id\": \"5b39c9b60b9f171bcb85f252\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-02T06:44:06.969Z\",\n        \"updatedAt\": \"2018-07-02T06:44:07.975Z\"\n    },\n    {\n        \"id\": \"5b39c9b80b9f171bcb85f253\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-02T06:44:08.987Z\",\n        \"updatedAt\": \"2018-07-02T06:44:10.044Z\"\n    },\n    {\n        \"id\": \"5b39c9bb0b9f171bcb85f254\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-02T06:44:11.048Z\",\n        \"updatedAt\": \"2018-07-02T06:44:11.048Z\"\n    },\n    {\n        \"id\": \"5b39c9bd0b9f171bcb85f255\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-02T06:44:13.061Z\",\n        \"updatedAt\": \"2018-07-02T06:44:13.061Z\"\n    },\n    {\n        \"id\": \"5b39c9c10b9f171bcb85f256\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-02T06:44:17.012Z\",\n        \"updatedAt\": \"2018-07-02T06:44:17.012Z\"\n    },\n    {\n        \"id\": \"5b39d4510b9f171bcb85f32e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-02T07:29:21.103Z\",\n        \"updatedAt\": \"2018-07-02T07:29:21.103Z\"\n    },\n    {\n        \"id\": \"5b39d4520b9f171bcb85f32f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-02T07:29:22.122Z\",\n        \"updatedAt\": \"2018-07-02T07:29:22.122Z\"\n    },\n    {\n        \"id\": \"5b39d4530b9f171bcb85f330\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-02T07:29:23.141Z\",\n        \"updatedAt\": \"2018-07-02T07:29:23.141Z\"\n    },\n    {\n        \"id\": \"5b39d4540b9f171bcb85f331\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-02T07:29:24.156Z\",\n        \"updatedAt\": \"2018-07-02T07:29:24.156Z\"\n    },\n    {\n        \"id\": \"5b39d4550b9f171bcb85f332\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-02T07:29:25.209Z\",\n        \"updatedAt\": \"2018-07-02T07:29:25.209Z\"\n    },\n    {\n        \"id\": \"5b39d4560b9f171bcb85f333\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-02T07:29:26.231Z\",\n        \"updatedAt\": \"2018-07-02T07:29:26.231Z\"\n    },\n    {\n        \"id\": \"5b39d4570b9f171bcb85f334\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-02T07:29:27.248Z\",\n        \"updatedAt\": \"2018-07-02T07:29:27.248Z\"\n    },\n    {\n        \"id\": \"5b39d45f0b9f171bcb85f336\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-02T07:29:35.327Z\",\n        \"updatedAt\": \"2018-07-02T07:29:36.358Z\"\n    },\n    {\n        \"id\": \"5b39d4610b9f171bcb85f337\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-02T07:29:37.374Z\",\n        \"updatedAt\": \"2018-07-02T07:29:38.393Z\"\n    },\n    {\n        \"id\": \"5b39d4630b9f171bcb85f338\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-02T07:29:39.413Z\",\n        \"updatedAt\": \"2018-07-02T07:29:40.471Z\"\n    },\n    {\n        \"id\": \"5b39d4650b9f171bcb85f339\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-02T07:29:41.491Z\",\n        \"updatedAt\": \"2018-07-02T07:29:42.513Z\"\n    },\n    {\n        \"id\": \"5b39d4670b9f171bcb85f33a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-02T07:29:43.539Z\",\n        \"updatedAt\": \"2018-07-02T07:29:44.560Z\"\n    },\n    {\n        \"id\": \"5b3b1b340b9f177e222414d3\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-03T06:44:04.480Z\",\n        \"updatedAt\": \"2018-07-03T06:44:04.480Z\"\n    },\n    {\n        \"id\": \"5b3b1b350b9f177e222414d4\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-03T06:44:05.515Z\",\n        \"updatedAt\": \"2018-07-03T06:44:05.515Z\"\n    },\n    {\n        \"id\": \"5b3b1b360b9f177e222414d5\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-03T06:44:06.536Z\",\n        \"updatedAt\": \"2018-07-03T06:44:06.536Z\"\n    },\n    {\n        \"id\": \"5b3b1b370b9f177e222414d6\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-03T06:44:07.549Z\",\n        \"updatedAt\": \"2018-07-03T06:44:07.549Z\"\n    },\n    {\n        \"id\": \"5b3b1b380b9f177e222414d7\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-03T06:44:08.562Z\",\n        \"updatedAt\": \"2018-07-03T06:44:08.562Z\"\n    },\n    {\n        \"id\": \"5b3b1b390b9f177e222414d8\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-03T06:44:09.579Z\",\n        \"updatedAt\": \"2018-07-03T06:44:09.579Z\"\n    },\n    {\n        \"id\": \"5b3b1b3a0b9f177e222414d9\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-03T06:44:10.592Z\",\n        \"updatedAt\": \"2018-07-03T06:44:10.592Z\"\n    },\n    {\n        \"id\": \"5b3b1b420b9f177e222414db\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-03T06:44:18.696Z\",\n        \"updatedAt\": \"2018-07-03T06:44:19.709Z\"\n    },\n    {\n        \"id\": \"5b3b1b440b9f177e222414dc\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-03T06:44:20.729Z\",\n        \"updatedAt\": \"2018-07-03T06:44:21.748Z\"\n    },\n    {\n        \"id\": \"5b3b1b460b9f177e222414dd\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-03T06:44:22.771Z\",\n        \"updatedAt\": \"2018-07-03T06:44:23.808Z\"\n    },\n    {\n        \"id\": \"5b3b1b480b9f177e222414de\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-03T06:44:24.853Z\",\n        \"updatedAt\": \"2018-07-03T06:44:25.923Z\"\n    },\n    {\n        \"id\": \"5b3b1b4a0b9f177e222414df\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-03T06:44:26.939Z\",\n        \"updatedAt\": \"2018-07-03T06:44:27.961Z\"\n    },\n    {\n        \"id\": \"5b3b1b4c0b9f177e222414e0\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-03T06:44:28.974Z\",\n        \"updatedAt\": \"2018-07-03T06:44:30.010Z\"\n    },\n    {\n        \"id\": \"5b3b1b4f0b9f177e222414e1\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-03T06:44:31.054Z\",\n        \"updatedAt\": \"2018-07-03T06:44:32.069Z\"\n    },\n    {\n        \"id\": \"5b3b1b510b9f177e222414e2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-03T06:44:33.089Z\",\n        \"updatedAt\": \"2018-07-03T06:44:33.089Z\"\n    },\n    {\n        \"id\": \"5b3b1b530b9f177e222414e3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-03T06:44:35.209Z\",\n        \"updatedAt\": \"2018-07-03T06:44:35.209Z\"\n    },\n    {\n        \"id\": \"5b3b1b570b9f177e222414e4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-03T06:44:39.161Z\",\n        \"updatedAt\": \"2018-07-03T06:44:39.161Z\"\n    },\n    {\n        \"id\": \"5b3c51e50b9f17588bad740f\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-04T04:49:41.324Z\",\n        \"updatedAt\": \"2018-07-04T04:49:41.324Z\"\n    },\n    {\n        \"id\": \"5b3c51e60b9f17588bad7410\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-04T04:49:42.335Z\",\n        \"updatedAt\": \"2018-07-04T04:49:42.335Z\"\n    },\n    {\n        \"id\": \"5b3c51e70b9f17588bad7411\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-04T04:49:43.355Z\",\n        \"updatedAt\": \"2018-07-04T04:49:43.355Z\"\n    },\n    {\n        \"id\": \"5b3c51e80b9f17588bad7412\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-04T04:49:44.356Z\",\n        \"updatedAt\": \"2018-07-04T04:49:44.356Z\"\n    },\n    {\n        \"id\": \"5b3c51e90b9f17588bad7413\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-04T04:49:45.349Z\",\n        \"updatedAt\": \"2018-07-04T04:49:45.349Z\"\n    },\n    {\n        \"id\": \"5b3c51ea0b9f17588bad7414\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-04T04:49:46.345Z\",\n        \"updatedAt\": \"2018-07-04T04:49:46.345Z\"\n    },\n    {\n        \"id\": \"5b3c51eb0b9f17588bad7415\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-04T04:49:47.339Z\",\n        \"updatedAt\": \"2018-07-04T04:49:47.339Z\"\n    },\n    {\n        \"id\": \"5b3c51f60b9f17588bad7417\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-04T04:49:58.378Z\",\n        \"updatedAt\": \"2018-07-04T04:49:59.376Z\"\n    },\n    {\n        \"id\": \"5b3c51f80b9f17588bad7418\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-04T04:50:00.410Z\",\n        \"updatedAt\": \"2018-07-04T04:50:01.405Z\"\n    },\n    {\n        \"id\": \"5b3c51fa0b9f17588bad7419\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-04T04:50:02.404Z\",\n        \"updatedAt\": \"2018-07-04T04:50:03.416Z\"\n    },\n    {\n        \"id\": \"5b3c51fc0b9f17588bad741a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-04T04:50:04.409Z\",\n        \"updatedAt\": \"2018-07-04T04:50:05.407Z\"\n    },\n    {\n        \"id\": \"5b3c51fe0b9f17588bad741b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-04T04:50:06.408Z\",\n        \"updatedAt\": \"2018-07-04T04:50:07.401Z\"\n    },\n    {\n        \"id\": \"5b3c52000b9f17588bad741c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-04T04:50:08.395Z\",\n        \"updatedAt\": \"2018-07-04T04:50:09.392Z\"\n    },\n    {\n        \"id\": \"5b3c52020b9f17588bad741d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-04T04:50:10.419Z\",\n        \"updatedAt\": \"2018-07-04T04:50:11.416Z\"\n    },\n    {\n        \"id\": \"5b3c52040b9f17588bad741e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T04:50:12.412Z\",\n        \"updatedAt\": \"2018-07-04T04:50:12.412Z\"\n    },\n    {\n        \"id\": \"5b3c52060b9f17588bad741f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T04:50:14.449Z\",\n        \"updatedAt\": \"2018-07-04T04:50:14.449Z\"\n    },\n    {\n        \"id\": \"5b3c520a0b9f17588bad7420\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T04:50:18.340Z\",\n        \"updatedAt\": \"2018-07-04T04:50:18.340Z\"\n    },\n    {\n        \"id\": \"5b3c6caa0b9f172d3ecd5566\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-04T06:43:54.371Z\",\n        \"updatedAt\": \"2018-07-04T06:43:54.371Z\"\n    },\n    {\n        \"id\": \"5b3c6cab0b9f172d3ecd5567\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-04T06:43:55.391Z\",\n        \"updatedAt\": \"2018-07-04T06:43:55.391Z\"\n    },\n    {\n        \"id\": \"5b3c6cac0b9f172d3ecd5568\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-04T06:43:56.412Z\",\n        \"updatedAt\": \"2018-07-04T06:43:56.412Z\"\n    },\n    {\n        \"id\": \"5b3c6cad0b9f172d3ecd5569\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-04T06:43:57.448Z\",\n        \"updatedAt\": \"2018-07-04T06:43:57.448Z\"\n    },\n    {\n        \"id\": \"5b3c6cae0b9f172d3ecd556a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-04T06:43:58.512Z\",\n        \"updatedAt\": \"2018-07-04T06:43:58.512Z\"\n    },\n    {\n        \"id\": \"5b3c6caf0b9f172d3ecd556b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-04T06:43:59.577Z\",\n        \"updatedAt\": \"2018-07-04T06:43:59.577Z\"\n    },\n    {\n        \"id\": \"5b3c6cb00b9f172d3ecd556c\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-04T06:44:00.610Z\",\n        \"updatedAt\": \"2018-07-04T06:44:00.610Z\"\n    },\n    {\n        \"id\": \"5b3c6cb80b9f172d3ecd556e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-04T06:44:08.851Z\",\n        \"updatedAt\": \"2018-07-04T06:44:09.861Z\"\n    },\n    {\n        \"id\": \"5b3c6cba0b9f172d3ecd556f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-04T06:44:10.856Z\",\n        \"updatedAt\": \"2018-07-04T06:44:11.852Z\"\n    },\n    {\n        \"id\": \"5b3c6cbc0b9f172d3ecd5570\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-04T06:44:12.851Z\",\n        \"updatedAt\": \"2018-07-04T06:44:13.854Z\"\n    },\n    {\n        \"id\": \"5b3c6cbe0b9f172d3ecd5571\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-04T06:44:14.850Z\",\n        \"updatedAt\": \"2018-07-04T06:44:15.855Z\"\n    },\n    {\n        \"id\": \"5b3c6cc00b9f172d3ecd5572\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-04T06:44:16.895Z\",\n        \"updatedAt\": \"2018-07-04T06:44:17.891Z\"\n    },\n    {\n        \"id\": \"5b3c6cc20b9f172d3ecd5573\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-04T06:44:18.900Z\",\n        \"updatedAt\": \"2018-07-04T06:44:19.899Z\"\n    },\n    {\n        \"id\": \"5b3c6cc40b9f172d3ecd5574\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-04T06:44:20.972Z\",\n        \"updatedAt\": \"2018-07-04T06:44:21.969Z\"\n    },\n    {\n        \"id\": \"5b3c6cc60b9f172d3ecd5575\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T06:44:22.964Z\",\n        \"updatedAt\": \"2018-07-04T06:44:22.964Z\"\n    },\n    {\n        \"id\": \"5b3c6cc90b9f172d3ecd5576\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T06:44:25.077Z\",\n        \"updatedAt\": \"2018-07-04T06:44:25.077Z\"\n    },\n    {\n        \"id\": \"5b3c6ccd0b9f172d3ecd5577\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T06:44:29.153Z\",\n        \"updatedAt\": \"2018-07-04T06:44:29.153Z\"\n    },\n    {\n        \"id\": \"5b3cb2c9fd8a541fb512d5a4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-04T11:43:05.731Z\",\n        \"updatedAt\": \"2018-07-04T11:43:05.731Z\"\n    },\n    {\n        \"id\": \"5b3cb2cbfd8a541fb512d5a5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-04T11:43:07.241Z\",\n        \"updatedAt\": \"2018-07-04T11:43:07.241Z\"\n    },\n    {\n        \"id\": \"5b3cb2ccfd8a541fb512d5a6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-04T11:43:08.777Z\",\n        \"updatedAt\": \"2018-07-04T11:43:08.777Z\"\n    },\n    {\n        \"id\": \"5b3cb2cefd8a541fb512d5a7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-04T11:43:10.219Z\",\n        \"updatedAt\": \"2018-07-04T11:43:10.219Z\"\n    },\n    {\n        \"id\": \"5b3cb2d0fd8a541fb512d5a8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-04T11:43:12.192Z\",\n        \"updatedAt\": \"2018-07-04T11:43:12.192Z\"\n    },\n    {\n        \"id\": \"5b3cb2d1fd8a541fb512d5a9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-04T11:43:13.707Z\",\n        \"updatedAt\": \"2018-07-04T11:43:13.707Z\"\n    },\n    {\n        \"id\": \"5b3cb2d3fd8a541fb512d5aa\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-04T11:43:15.234Z\",\n        \"updatedAt\": \"2018-07-04T11:43:15.234Z\"\n    },\n    {\n        \"id\": \"5b3cb2d4fd8a541fb512d5ab\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T11:43:16.820Z\",\n        \"updatedAt\": \"2018-07-04T11:43:16.820Z\"\n    },\n    {\n        \"id\": \"5b3cb33afd8a541fb512d5b4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T11:44:58.103Z\",\n        \"updatedAt\": \"2018-07-04T11:44:58.103Z\"\n    },\n    {\n        \"id\": \"5b3cb3fbfd8a541fb512d5c5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-04T11:48:11.032Z\",\n        \"updatedAt\": \"2018-07-04T11:48:11.032Z\"\n    },\n    {\n        \"id\": \"5b3cb43afd8a541fb512d5cd\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-04T11:49:14.676Z\",\n        \"updatedAt\": \"2018-07-04T11:49:15.934Z\"\n    },\n    {\n        \"id\": \"5b3cb43dfd8a541fb512d5ce\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-04T11:49:17.144Z\",\n        \"updatedAt\": \"2018-07-04T11:49:18.828Z\"\n    },\n    {\n        \"id\": \"5b3cb440fd8a541fb512d5cf\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-04T11:49:20.712Z\",\n        \"updatedAt\": \"2018-07-04T11:49:21.875Z\"\n    },\n    {\n        \"id\": \"5b3cb443fd8a541fb512d5d0\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-04T11:49:23.023Z\",\n        \"updatedAt\": \"2018-07-04T11:49:24.091Z\"\n    },\n    {\n        \"id\": \"5b3cb445fd8a541fb512d5d1\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-04T11:49:25.772Z\",\n        \"updatedAt\": \"2018-07-04T11:49:27.659Z\"\n    },\n    {\n        \"id\": \"5b3cb448fd8a541fb512d5d2\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-04T11:49:28.865Z\",\n        \"updatedAt\": \"2018-07-04T11:49:29.985Z\"\n    },\n    {\n        \"id\": \"5b3cb44bfd8a541fb512d5d3\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-04T11:49:31.098Z\",\n        \"updatedAt\": \"2018-07-04T11:49:35.212Z\"\n    },\n    {\n        \"id\": \"5b3dbe94fd8a541fb512d690\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-05T06:45:40.920Z\",\n        \"updatedAt\": \"2018-07-05T06:45:40.920Z\"\n    },\n    {\n        \"id\": \"5b3dbe95fd8a541fb512d691\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-05T06:45:41.979Z\",\n        \"updatedAt\": \"2018-07-05T06:45:41.979Z\"\n    },\n    {\n        \"id\": \"5b3dbe97fd8a541fb512d692\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-05T06:45:43.037Z\",\n        \"updatedAt\": \"2018-07-05T06:45:43.037Z\"\n    },\n    {\n        \"id\": \"5b3dbe98fd8a541fb512d693\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-05T06:45:44.081Z\",\n        \"updatedAt\": \"2018-07-05T06:45:44.081Z\"\n    },\n    {\n        \"id\": \"5b3dbe99fd8a541fb512d694\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-05T06:45:45.170Z\",\n        \"updatedAt\": \"2018-07-05T06:45:45.170Z\"\n    },\n    {\n        \"id\": \"5b3dbe9afd8a541fb512d695\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-05T06:45:46.209Z\",\n        \"updatedAt\": \"2018-07-05T06:45:46.209Z\"\n    },\n    {\n        \"id\": \"5b3dbe9bfd8a541fb512d696\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-05T06:45:47.272Z\",\n        \"updatedAt\": \"2018-07-05T06:45:47.272Z\"\n    },\n    {\n        \"id\": \"5b3dbea3fd8a541fb512d698\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-05T06:45:55.712Z\",\n        \"updatedAt\": \"2018-07-05T06:45:56.825Z\"\n    },\n    {\n        \"id\": \"5b3dbea5fd8a541fb512d699\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-05T06:45:57.893Z\",\n        \"updatedAt\": \"2018-07-05T06:45:58.945Z\"\n    },\n    {\n        \"id\": \"5b3dbea7fd8a541fb512d69a\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-05T06:45:59.988Z\",\n        \"updatedAt\": \"2018-07-05T06:46:01.031Z\"\n    },\n    {\n        \"id\": \"5b3dbeaafd8a541fb512d69b\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-05T06:46:02.087Z\",\n        \"updatedAt\": \"2018-07-05T06:46:03.130Z\"\n    },\n    {\n        \"id\": \"5b3dbeacfd8a541fb512d69c\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-05T06:46:04.181Z\",\n        \"updatedAt\": \"2018-07-05T06:46:05.270Z\"\n    },\n    {\n        \"id\": \"5b3dbeaefd8a541fb512d69d\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-05T06:46:06.364Z\",\n        \"updatedAt\": \"2018-07-05T06:46:07.414Z\"\n    },\n    {\n        \"id\": \"5b3dbeb0fd8a541fb512d69e\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-05T06:46:08.470Z\",\n        \"updatedAt\": \"2018-07-05T06:46:09.514Z\"\n    },\n    {\n        \"id\": \"5b3dbeb2fd8a541fb512d69f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-05T06:46:10.554Z\",\n        \"updatedAt\": \"2018-07-05T06:46:10.554Z\"\n    },\n    {\n        \"id\": \"5b3dbeb4fd8a541fb512d6a0\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-05T06:46:12.650Z\",\n        \"updatedAt\": \"2018-07-05T06:46:12.650Z\"\n    },\n    {\n        \"id\": \"5b3dbeb8fd8a541fb512d6a1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-05T06:46:16.709Z\",\n        \"updatedAt\": \"2018-07-05T06:46:16.709Z\"\n    },\n    {\n        \"id\": \"5b40eca6fd8a541559479939\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-07T16:39:02.291Z\",\n        \"updatedAt\": \"2018-07-07T16:39:02.291Z\"\n    },\n    {\n        \"id\": \"5b40eca7fd8a54155947993a\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-07T16:39:03.572Z\",\n        \"updatedAt\": \"2018-07-07T16:39:03.572Z\"\n    },\n    {\n        \"id\": \"5b40eca8fd8a54155947993b\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-07T16:39:04.763Z\",\n        \"updatedAt\": \"2018-07-07T16:39:04.763Z\"\n    },\n    {\n        \"id\": \"5b40eca9fd8a54155947993c\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-07T16:39:05.952Z\",\n        \"updatedAt\": \"2018-07-07T16:39:05.952Z\"\n    },\n    {\n        \"id\": \"5b40ecabfd8a54155947993d\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-07T16:39:07.237Z\",\n        \"updatedAt\": \"2018-07-07T16:39:07.237Z\"\n    },\n    {\n        \"id\": \"5b40ecacfd8a54155947993e\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-07T16:39:08.407Z\",\n        \"updatedAt\": \"2018-07-07T16:39:08.407Z\"\n    },\n    {\n        \"id\": \"5b40ecadfd8a54155947993f\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-07T16:39:09.592Z\",\n        \"updatedAt\": \"2018-07-07T16:39:09.592Z\"\n    },\n    {\n        \"id\": \"5b40ecb7fd8a541559479941\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-07T16:39:19.302Z\",\n        \"updatedAt\": \"2018-07-07T16:39:20.463Z\"\n    },\n    {\n        \"id\": \"5b40ecb9fd8a541559479942\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-07T16:39:21.792Z\",\n        \"updatedAt\": \"2018-07-07T16:39:23.013Z\"\n    },\n    {\n        \"id\": \"5b40ecbcfd8a541559479943\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-07T16:39:24.277Z\",\n        \"updatedAt\": \"2018-07-07T16:39:25.524Z\"\n    },\n    {\n        \"id\": \"5b40ecbefd8a541559479944\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-07T16:39:26.713Z\",\n        \"updatedAt\": \"2018-07-07T16:39:27.994Z\"\n    },\n    {\n        \"id\": \"5b40ecc1fd8a541559479945\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-07T16:39:29.222Z\",\n        \"updatedAt\": \"2018-07-07T16:39:30.404Z\"\n    },\n    {\n        \"id\": \"5b40ecc3fd8a541559479946\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-07T16:39:31.567Z\",\n        \"updatedAt\": \"2018-07-07T16:39:32.724Z\"\n    },\n    {\n        \"id\": \"5b40ecc6fd8a541559479947\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-07T16:39:34.022Z\",\n        \"updatedAt\": \"2018-07-07T16:39:35.283Z\"\n    },\n    {\n        \"id\": \"5b40ecc8fd8a541559479948\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-07T16:39:36.518Z\",\n        \"updatedAt\": \"2018-07-07T16:39:36.518Z\"\n    },\n    {\n        \"id\": \"5b40eccbfd8a541559479949\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-07T16:39:39.062Z\",\n        \"updatedAt\": \"2018-07-07T16:39:39.062Z\"\n    },\n    {\n        \"id\": \"5b40eccffd8a54155947994a\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-07T16:39:43.763Z\",\n        \"updatedAt\": \"2018-07-07T16:39:43.763Z\"\n    },\n    {\n        \"id\": \"5b40f5bcfd8a5415594799e4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-07T17:17:48.840Z\",\n        \"updatedAt\": \"2018-07-07T17:17:48.840Z\"\n    },\n    {\n        \"id\": \"5b40f5befd8a5415594799e5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-07T17:17:50.092Z\",\n        \"updatedAt\": \"2018-07-07T17:17:50.092Z\"\n    },\n    {\n        \"id\": \"5b40f5bffd8a5415594799e6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-07T17:17:51.293Z\",\n        \"updatedAt\": \"2018-07-07T17:17:51.293Z\"\n    },\n    {\n        \"id\": \"5b40f5c0fd8a5415594799e7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-07T17:17:52.477Z\",\n        \"updatedAt\": \"2018-07-07T17:17:52.477Z\"\n    },\n    {\n        \"id\": \"5b40f5c1fd8a5415594799e8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-07T17:17:53.702Z\",\n        \"updatedAt\": \"2018-07-07T17:17:53.702Z\"\n    },\n    {\n        \"id\": \"5b40f5c2fd8a5415594799e9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-07T17:17:54.932Z\",\n        \"updatedAt\": \"2018-07-07T17:17:54.932Z\"\n    },\n    {\n        \"id\": \"5b40f5c4fd8a5415594799ea\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-07T17:17:56.082Z\",\n        \"updatedAt\": \"2018-07-07T17:17:56.082Z\"\n    },\n    {\n        \"id\": \"5b40f5cdfd8a5415594799ec\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-07T17:18:05.563Z\",\n        \"updatedAt\": \"2018-07-07T17:18:06.754Z\"\n    },\n    {\n        \"id\": \"5b40f5cffd8a5415594799ed\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-07T17:18:07.922Z\",\n        \"updatedAt\": \"2018-07-07T17:18:09.123Z\"\n    },\n    {\n        \"id\": \"5b40f5d2fd8a5415594799ee\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-07T17:18:10.302Z\",\n        \"updatedAt\": \"2018-07-07T17:18:11.593Z\"\n    },\n    {\n        \"id\": \"5b40f5d4fd8a5415594799ef\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-07T17:18:12.792Z\",\n        \"updatedAt\": \"2018-07-07T17:18:13.958Z\"\n    },\n    {\n        \"id\": \"5b40f5d7fd8a5415594799f0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-07T17:18:15.102Z\",\n        \"updatedAt\": \"2018-07-07T17:18:16.343Z\"\n    },\n    {\n        \"id\": \"5b40f5d9fd8a5415594799f1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-07T17:18:17.662Z\",\n        \"updatedAt\": \"2018-07-07T17:18:18.888Z\"\n    },\n    {\n        \"id\": \"5b40f5dcfd8a5415594799f2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-07T17:18:20.092Z\",\n        \"updatedAt\": \"2018-07-07T17:18:21.323Z\"\n    },\n    {\n        \"id\": \"5b40f5defd8a5415594799f3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-07T17:18:22.582Z\",\n        \"updatedAt\": \"2018-07-07T17:18:22.582Z\"\n    },\n    {\n        \"id\": \"5b40f5e1fd8a5415594799f4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-07T17:18:25.067Z\",\n        \"updatedAt\": \"2018-07-07T17:18:25.067Z\"\n    },\n    {\n        \"id\": \"5b40f5e5fd8a5415594799f5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-07T17:18:29.817Z\",\n        \"updatedAt\": \"2018-07-07T17:18:29.817Z\"\n    },\n    {\n        \"id\": \"5b42e8d42e02d81715863f33\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T04:47:16.632Z\",\n        \"updatedAt\": \"2018-07-09T04:47:16.632Z\"\n    },\n    {\n        \"id\": \"5b42e8d52e02d81715863f34\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T04:47:17.636Z\",\n        \"updatedAt\": \"2018-07-09T04:47:17.636Z\"\n    },\n    {\n        \"id\": \"5b42e8d62e02d81715863f35\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T04:47:18.634Z\",\n        \"updatedAt\": \"2018-07-09T04:47:18.634Z\"\n    },\n    {\n        \"id\": \"5b42e8d72e02d81715863f36\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T04:47:19.626Z\",\n        \"updatedAt\": \"2018-07-09T04:47:19.626Z\"\n    },\n    {\n        \"id\": \"5b42e8d82e02d81715863f37\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T04:47:20.624Z\",\n        \"updatedAt\": \"2018-07-09T04:47:20.624Z\"\n    },\n    {\n        \"id\": \"5b42e8d92e02d81715863f38\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T04:47:21.618Z\",\n        \"updatedAt\": \"2018-07-09T04:47:21.618Z\"\n    },\n    {\n        \"id\": \"5b42e8da2e02d81715863f39\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T04:47:22.611Z\",\n        \"updatedAt\": \"2018-07-09T04:47:22.611Z\"\n    },\n    {\n        \"id\": \"5b42e8e22e02d81715863f3b\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T04:47:30.641Z\",\n        \"updatedAt\": \"2018-07-09T04:47:31.656Z\"\n    },\n    {\n        \"id\": \"5b42e8e42e02d81715863f3c\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T04:47:32.654Z\",\n        \"updatedAt\": \"2018-07-09T04:47:33.650Z\"\n    },\n    {\n        \"id\": \"5b42e8e62e02d81715863f3d\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T04:47:34.645Z\",\n        \"updatedAt\": \"2018-07-09T04:47:35.732Z\"\n    },\n    {\n        \"id\": \"5b42e8e82e02d81715863f3e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T04:47:36.771Z\",\n        \"updatedAt\": \"2018-07-09T04:47:37.788Z\"\n    },\n    {\n        \"id\": \"5b42e8ea2e02d81715863f3f\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T04:47:38.785Z\",\n        \"updatedAt\": \"2018-07-09T04:47:39.785Z\"\n    },\n    {\n        \"id\": \"5b42e8ec2e02d81715863f40\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T04:47:40.779Z\",\n        \"updatedAt\": \"2018-07-09T04:47:41.777Z\"\n    },\n    {\n        \"id\": \"5b42e8ee2e02d81715863f41\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T04:47:42.775Z\",\n        \"updatedAt\": \"2018-07-09T04:47:43.802Z\"\n    },\n    {\n        \"id\": \"5b42e8f02e02d81715863f42\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T04:47:44.798Z\",\n        \"updatedAt\": \"2018-07-09T04:47:44.798Z\"\n    },\n    {\n        \"id\": \"5b42e8f22e02d81715863f43\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T04:47:46.793Z\",\n        \"updatedAt\": \"2018-07-09T04:47:46.793Z\"\n    },\n    {\n        \"id\": \"5b42e8f62e02d81715863f44\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T04:47:50.654Z\",\n        \"updatedAt\": \"2018-07-09T04:47:50.654Z\"\n    },\n    {\n        \"id\": \"5b430453fd8a541559479a96\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T06:44:35.791Z\",\n        \"updatedAt\": \"2018-07-09T06:44:35.791Z\"\n    },\n    {\n        \"id\": \"5b430454fd8a541559479a97\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T06:44:36.848Z\",\n        \"updatedAt\": \"2018-07-09T06:44:36.848Z\"\n    },\n    {\n        \"id\": \"5b430455fd8a541559479a98\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T06:44:37.866Z\",\n        \"updatedAt\": \"2018-07-09T06:44:37.866Z\"\n    },\n    {\n        \"id\": \"5b430456fd8a541559479a99\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T06:44:38.904Z\",\n        \"updatedAt\": \"2018-07-09T06:44:38.904Z\"\n    },\n    {\n        \"id\": \"5b430457fd8a541559479a9a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T06:44:39.925Z\",\n        \"updatedAt\": \"2018-07-09T06:44:39.925Z\"\n    },\n    {\n        \"id\": \"5b430458fd8a541559479a9b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T06:44:40.921Z\",\n        \"updatedAt\": \"2018-07-09T06:44:40.921Z\"\n    },\n    {\n        \"id\": \"5b430459fd8a541559479a9c\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T06:44:41.923Z\",\n        \"updatedAt\": \"2018-07-09T06:44:41.923Z\"\n    },\n    {\n        \"id\": \"5b430461fd8a541559479a9e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T06:44:49.880Z\",\n        \"updatedAt\": \"2018-07-09T06:44:50.883Z\"\n    },\n    {\n        \"id\": \"5b430463fd8a541559479a9f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T06:44:51.878Z\",\n        \"updatedAt\": \"2018-07-09T06:44:52.876Z\"\n    },\n    {\n        \"id\": \"5b430465fd8a541559479aa0\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T06:44:53.876Z\",\n        \"updatedAt\": \"2018-07-09T06:44:54.874Z\"\n    },\n    {\n        \"id\": \"5b430467fd8a541559479aa1\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T06:44:55.882Z\",\n        \"updatedAt\": \"2018-07-09T06:44:56.884Z\"\n    },\n    {\n        \"id\": \"5b430469fd8a541559479aa2\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T06:44:57.895Z\",\n        \"updatedAt\": \"2018-07-09T06:44:58.891Z\"\n    },\n    {\n        \"id\": \"5b43046bfd8a541559479aa3\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T06:44:59.891Z\",\n        \"updatedAt\": \"2018-07-09T06:45:00.915Z\"\n    },\n    {\n        \"id\": \"5b43046dfd8a541559479aa4\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T06:45:01.918Z\",\n        \"updatedAt\": \"2018-07-09T06:45:02.938Z\"\n    },\n    {\n        \"id\": \"5b43046ffd8a541559479aa5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T06:45:03.941Z\",\n        \"updatedAt\": \"2018-07-09T06:45:03.941Z\"\n    },\n    {\n        \"id\": \"5b430471fd8a541559479aa6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T06:45:05.965Z\",\n        \"updatedAt\": \"2018-07-09T06:45:05.965Z\"\n    },\n    {\n        \"id\": \"5b430475fd8a541559479aa7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T06:45:09.886Z\",\n        \"updatedAt\": \"2018-07-09T06:45:09.886Z\"\n    },\n    {\n        \"id\": \"5b431130fd8a541559479b3e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T07:39:28.889Z\",\n        \"updatedAt\": \"2018-07-09T07:39:28.889Z\"\n    },\n    {\n        \"id\": \"5b431131fd8a541559479b3f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T07:39:29.900Z\",\n        \"updatedAt\": \"2018-07-09T07:39:29.900Z\"\n    },\n    {\n        \"id\": \"5b431132fd8a541559479b40\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T07:39:30.908Z\",\n        \"updatedAt\": \"2018-07-09T07:39:30.908Z\"\n    },\n    {\n        \"id\": \"5b431133fd8a541559479b41\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T07:39:31.916Z\",\n        \"updatedAt\": \"2018-07-09T07:39:31.916Z\"\n    },\n    {\n        \"id\": \"5b431134fd8a541559479b42\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T07:39:32.922Z\",\n        \"updatedAt\": \"2018-07-09T07:39:32.922Z\"\n    },\n    {\n        \"id\": \"5b431135fd8a541559479b43\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T07:39:33.934Z\",\n        \"updatedAt\": \"2018-07-09T07:39:33.934Z\"\n    },\n    {\n        \"id\": \"5b431136fd8a541559479b44\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T07:39:34.955Z\",\n        \"updatedAt\": \"2018-07-09T07:39:34.955Z\"\n    },\n    {\n        \"id\": \"5b43113efd8a541559479b46\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T07:39:42.908Z\",\n        \"updatedAt\": \"2018-07-09T07:39:43.920Z\"\n    },\n    {\n        \"id\": \"5b431140fd8a541559479b47\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T07:39:44.927Z\",\n        \"updatedAt\": \"2018-07-09T07:39:45.935Z\"\n    },\n    {\n        \"id\": \"5b431142fd8a541559479b48\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T07:39:46.945Z\",\n        \"updatedAt\": \"2018-07-09T07:39:47.954Z\"\n    },\n    {\n        \"id\": \"5b431144fd8a541559479b49\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T07:39:48.961Z\",\n        \"updatedAt\": \"2018-07-09T07:39:49.975Z\"\n    },\n    {\n        \"id\": \"5b431146fd8a541559479b4a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T07:39:50.981Z\",\n        \"updatedAt\": \"2018-07-09T07:39:51.988Z\"\n    },\n    {\n        \"id\": \"5b431149fd8a541559479b4b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T07:39:53.000Z\",\n        \"updatedAt\": \"2018-07-09T07:39:54.014Z\"\n    },\n    {\n        \"id\": \"5b43114bfd8a541559479b4c\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T07:39:55.022Z\",\n        \"updatedAt\": \"2018-07-09T07:39:56.033Z\"\n    },\n    {\n        \"id\": \"5b43114dfd8a541559479b4d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T07:39:57.042Z\",\n        \"updatedAt\": \"2018-07-09T07:39:57.042Z\"\n    },\n    {\n        \"id\": \"5b43114ffd8a541559479b4e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T07:39:59.081Z\",\n        \"updatedAt\": \"2018-07-09T07:39:59.081Z\"\n    },\n    {\n        \"id\": \"5b431153fd8a541559479b4f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T07:40:03.056Z\",\n        \"updatedAt\": \"2018-07-09T07:40:03.056Z\"\n    },\n    {\n        \"id\": \"5b433576fd8a541559479d07\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T10:14:14.903Z\",\n        \"updatedAt\": \"2018-07-09T10:14:14.903Z\"\n    },\n    {\n        \"id\": \"5b43357bfd8a541559479d08\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T10:14:19.726Z\",\n        \"updatedAt\": \"2018-07-09T10:14:19.726Z\"\n    },\n    {\n        \"id\": \"5b4336b0fd8a541559479d7f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T10:19:28.790Z\",\n        \"updatedAt\": \"2018-07-09T10:19:28.790Z\"\n    },\n    {\n        \"id\": \"5b4336b3fd8a541559479d80\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T10:19:31.204Z\",\n        \"updatedAt\": \"2018-07-09T10:19:32.469Z\"\n    },\n    {\n        \"id\": \"5b4336b5fd8a541559479d81\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T10:19:33.653Z\",\n        \"updatedAt\": \"2018-07-09T10:19:34.847Z\"\n    },\n    {\n        \"id\": \"5b4336b8fd8a541559479d82\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T10:19:36.091Z\",\n        \"updatedAt\": \"2018-07-09T10:19:37.327Z\"\n    },\n    {\n        \"id\": \"5b4336bafd8a541559479d83\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T10:19:38.579Z\",\n        \"updatedAt\": \"2018-07-09T10:19:39.806Z\"\n    },\n    {\n        \"id\": \"5b4336bdfd8a541559479d84\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T10:19:41.257Z\",\n        \"updatedAt\": \"2018-07-09T10:19:42.421Z\"\n    },\n    {\n        \"id\": \"5b4336bffd8a541559479d85\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T10:19:43.761Z\",\n        \"updatedAt\": \"2018-07-09T10:19:44.915Z\"\n    },\n    {\n        \"id\": \"5b4336c2fd8a541559479d86\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T10:19:46.148Z\",\n        \"updatedAt\": \"2018-07-09T10:19:47.437Z\"\n    },\n    {\n        \"id\": \"5b433775fd8a541559479de8\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T10:22:45.024Z\",\n        \"updatedAt\": \"2018-07-09T10:22:45.024Z\"\n    },\n    {\n        \"id\": \"5b433776fd8a541559479de9\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T10:22:46.174Z\",\n        \"updatedAt\": \"2018-07-09T10:22:46.174Z\"\n    },\n    {\n        \"id\": \"5b433777fd8a541559479dea\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T10:22:47.346Z\",\n        \"updatedAt\": \"2018-07-09T10:22:47.346Z\"\n    },\n    {\n        \"id\": \"5b433778fd8a541559479dec\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T10:22:48.582Z\",\n        \"updatedAt\": \"2018-07-09T10:22:48.582Z\"\n    },\n    {\n        \"id\": \"5b433779fd8a541559479ded\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T10:22:49.734Z\",\n        \"updatedAt\": \"2018-07-09T10:22:49.734Z\"\n    },\n    {\n        \"id\": \"5b43377afd8a541559479dee\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T10:22:50.936Z\",\n        \"updatedAt\": \"2018-07-09T10:22:50.936Z\"\n    },\n    {\n        \"id\": \"5b43377cfd8a541559479def\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T10:22:52.054Z\",\n        \"updatedAt\": \"2018-07-09T10:22:52.054Z\"\n    },\n    {\n        \"id\": \"5b4382fcfd8a541559479dff\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T15:45:00.497Z\",\n        \"updatedAt\": \"2018-07-09T15:45:00.497Z\"\n    },\n    {\n        \"id\": \"5b438304fd8a541559479e00\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T15:45:08.450Z\",\n        \"updatedAt\": \"2018-07-09T15:45:08.450Z\"\n    },\n    {\n        \"id\": \"5b438482fd8a541559479e75\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-09T15:51:30.428Z\",\n        \"updatedAt\": \"2018-07-09T15:51:30.428Z\"\n    },\n    {\n        \"id\": \"5b438485fd8a541559479e76\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T15:51:33.294Z\",\n        \"updatedAt\": \"2018-07-09T15:51:34.729Z\"\n    },\n    {\n        \"id\": \"5b438488fd8a541559479e77\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T15:51:36.369Z\",\n        \"updatedAt\": \"2018-07-09T15:51:37.800Z\"\n    },\n    {\n        \"id\": \"5b43848bfd8a541559479e78\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T15:51:39.144Z\",\n        \"updatedAt\": \"2018-07-09T15:51:40.564Z\"\n    },\n    {\n        \"id\": \"5b43848efd8a541559479e79\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T15:51:42.204Z\",\n        \"updatedAt\": \"2018-07-09T15:51:43.724Z\"\n    },\n    {\n        \"id\": \"5b438491fd8a541559479e7a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T15:51:45.288Z\",\n        \"updatedAt\": \"2018-07-09T15:51:46.724Z\"\n    },\n    {\n        \"id\": \"5b438494fd8a541559479e7b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T15:51:48.245Z\",\n        \"updatedAt\": \"2018-07-09T15:51:49.711Z\"\n    },\n    {\n        \"id\": \"5b438497fd8a541559479e7c\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T15:51:51.133Z\",\n        \"updatedAt\": \"2018-07-09T15:51:52.445Z\"\n    },\n    {\n        \"id\": \"5b438566fd8a541559479edc\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-09T15:55:18.577Z\",\n        \"updatedAt\": \"2018-07-09T15:55:18.577Z\"\n    },\n    {\n        \"id\": \"5b438567fd8a541559479edd\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-09T15:55:19.903Z\",\n        \"updatedAt\": \"2018-07-09T15:55:19.903Z\"\n    },\n    {\n        \"id\": \"5b438569fd8a541559479ede\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-09T15:55:21.243Z\",\n        \"updatedAt\": \"2018-07-09T15:55:21.243Z\"\n    },\n    {\n        \"id\": \"5b43856afd8a541559479edf\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-09T15:55:22.583Z\",\n        \"updatedAt\": \"2018-07-09T15:55:22.583Z\"\n    },\n    {\n        \"id\": \"5b43856cfd8a541559479ee0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-09T15:55:24.203Z\",\n        \"updatedAt\": \"2018-07-09T15:55:24.203Z\"\n    },\n    {\n        \"id\": \"5b43856dfd8a541559479ee1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-09T15:55:25.717Z\",\n        \"updatedAt\": \"2018-07-09T15:55:25.717Z\"\n    },\n    {\n        \"id\": \"5b438570fd8a541559479ee2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-09T15:55:28.788Z\",\n        \"updatedAt\": \"2018-07-09T15:55:28.788Z\"\n    },\n    {\n        \"id\": \"5b443a3f2e02d81715863fe2\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-10T04:46:55.644Z\",\n        \"updatedAt\": \"2018-07-10T04:46:55.644Z\"\n    },\n    {\n        \"id\": \"5b443a402e02d81715863fe3\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-10T04:46:56.685Z\",\n        \"updatedAt\": \"2018-07-10T04:46:56.685Z\"\n    },\n    {\n        \"id\": \"5b443a412e02d81715863fe4\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-10T04:46:57.721Z\",\n        \"updatedAt\": \"2018-07-10T04:46:57.721Z\"\n    },\n    {\n        \"id\": \"5b443a422e02d81715863fe5\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-10T04:46:58.777Z\",\n        \"updatedAt\": \"2018-07-10T04:46:58.777Z\"\n    },\n    {\n        \"id\": \"5b443a432e02d81715863fe6\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-10T04:46:59.858Z\",\n        \"updatedAt\": \"2018-07-10T04:46:59.858Z\"\n    },\n    {\n        \"id\": \"5b443a442e02d81715863fe7\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-10T04:47:00.915Z\",\n        \"updatedAt\": \"2018-07-10T04:47:00.915Z\"\n    },\n    {\n        \"id\": \"5b443a452e02d81715863fe8\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-10T04:47:01.993Z\",\n        \"updatedAt\": \"2018-07-10T04:47:01.993Z\"\n    },\n    {\n        \"id\": \"5b443a4e2e02d81715863fea\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-10T04:47:10.219Z\",\n        \"updatedAt\": \"2018-07-10T04:47:11.263Z\"\n    },\n    {\n        \"id\": \"5b443a502e02d81715863feb\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-10T04:47:12.306Z\",\n        \"updatedAt\": \"2018-07-10T04:47:13.344Z\"\n    },\n    {\n        \"id\": \"5b443a522e02d81715863fec\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-10T04:47:14.429Z\",\n        \"updatedAt\": \"2018-07-10T04:47:15.472Z\"\n    },\n    {\n        \"id\": \"5b443a542e02d81715863fed\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-10T04:47:16.514Z\",\n        \"updatedAt\": \"2018-07-10T04:47:17.555Z\"\n    },\n    {\n        \"id\": \"5b443a562e02d81715863fee\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-10T04:47:18.601Z\",\n        \"updatedAt\": \"2018-07-10T04:47:19.642Z\"\n    },\n    {\n        \"id\": \"5b443a582e02d81715863fef\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-10T04:47:20.678Z\",\n        \"updatedAt\": \"2018-07-10T04:47:21.717Z\"\n    },\n    {\n        \"id\": \"5b443a5a2e02d81715863ff0\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-10T04:47:22.756Z\",\n        \"updatedAt\": \"2018-07-10T04:47:23.792Z\"\n    },\n    {\n        \"id\": \"5b443a5c2e02d81715863ff1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-10T04:47:24.832Z\",\n        \"updatedAt\": \"2018-07-10T04:47:24.832Z\"\n    },\n    {\n        \"id\": \"5b443a5e2e02d81715863ff2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-10T04:47:26.927Z\",\n        \"updatedAt\": \"2018-07-10T04:47:26.927Z\"\n    },\n    {\n        \"id\": \"5b443a622e02d81715863ff3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-10T04:47:30.976Z\",\n        \"updatedAt\": \"2018-07-10T04:47:30.976Z\"\n    },\n    {\n        \"id\": \"5b4455fcfd8a54155947a0cc\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-10T06:45:16.281Z\",\n        \"updatedAt\": \"2018-07-10T06:45:16.281Z\"\n    },\n    {\n        \"id\": \"5b4455fdfd8a54155947a0cd\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-10T06:45:17.344Z\",\n        \"updatedAt\": \"2018-07-10T06:45:17.344Z\"\n    },\n    {\n        \"id\": \"5b4455fefd8a54155947a0ce\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-10T06:45:18.430Z\",\n        \"updatedAt\": \"2018-07-10T06:45:18.430Z\"\n    },\n    {\n        \"id\": \"5b4455fffd8a54155947a0cf\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-10T06:45:19.469Z\",\n        \"updatedAt\": \"2018-07-10T06:45:19.469Z\"\n    },\n    {\n        \"id\": \"5b445600fd8a54155947a0d0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-10T06:45:20.527Z\",\n        \"updatedAt\": \"2018-07-10T06:45:20.527Z\"\n    },\n    {\n        \"id\": \"5b445601fd8a54155947a0d1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-10T06:45:21.573Z\",\n        \"updatedAt\": \"2018-07-10T06:45:21.573Z\"\n    },\n    {\n        \"id\": \"5b445602fd8a54155947a0d2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-10T06:45:22.611Z\",\n        \"updatedAt\": \"2018-07-10T06:45:22.611Z\"\n    },\n    {\n        \"id\": \"5b44560afd8a54155947a0d5\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-10T06:45:30.859Z\",\n        \"updatedAt\": \"2018-07-10T06:45:31.912Z\"\n    },\n    {\n        \"id\": \"5b44560cfd8a54155947a0d6\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-10T06:45:32.955Z\",\n        \"updatedAt\": \"2018-07-10T06:45:33.997Z\"\n    },\n    {\n        \"id\": \"5b44560ffd8a54155947a0d7\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-10T06:45:35.034Z\",\n        \"updatedAt\": \"2018-07-10T06:45:36.082Z\"\n    },\n    {\n        \"id\": \"5b445611fd8a54155947a0d9\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-10T06:45:37.131Z\",\n        \"updatedAt\": \"2018-07-10T06:45:38.171Z\"\n    },\n    {\n        \"id\": \"5b445613fd8a54155947a0da\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-10T06:45:39.255Z\",\n        \"updatedAt\": \"2018-07-10T06:45:40.312Z\"\n    },\n    {\n        \"id\": \"5b445615fd8a54155947a0db\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-10T06:45:41.376Z\",\n        \"updatedAt\": \"2018-07-10T06:45:42.485Z\"\n    },\n    {\n        \"id\": \"5b445617fd8a54155947a0dd\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-10T06:45:43.563Z\",\n        \"updatedAt\": \"2018-07-10T06:45:44.606Z\"\n    },\n    {\n        \"id\": \"5b445619fd8a54155947a0de\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-10T06:45:45.647Z\",\n        \"updatedAt\": \"2018-07-10T06:45:45.647Z\"\n    },\n    {\n        \"id\": \"5b44561bfd8a54155947a0df\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-10T06:45:47.752Z\",\n        \"updatedAt\": \"2018-07-10T06:45:47.752Z\"\n    },\n    {\n        \"id\": \"5b44561ffd8a54155947a0e1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-10T06:45:51.863Z\",\n        \"updatedAt\": \"2018-07-10T06:45:51.863Z\"\n    },\n    {\n        \"id\": \"5b458ad92e02d81715864173\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-11T04:43:05.203Z\",\n        \"updatedAt\": \"2018-07-11T04:43:05.203Z\"\n    },\n    {\n        \"id\": \"5b458ada2e02d81715864174\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-11T04:43:06.382Z\",\n        \"updatedAt\": \"2018-07-11T04:43:06.382Z\"\n    },\n    {\n        \"id\": \"5b458adb2e02d81715864175\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-11T04:43:07.565Z\",\n        \"updatedAt\": \"2018-07-11T04:43:07.565Z\"\n    },\n    {\n        \"id\": \"5b458adc2e02d81715864176\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-11T04:43:08.746Z\",\n        \"updatedAt\": \"2018-07-11T04:43:08.746Z\"\n    },\n    {\n        \"id\": \"5b458ade2e02d81715864178\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-11T04:43:10.102Z\",\n        \"updatedAt\": \"2018-07-11T04:43:10.102Z\"\n    },\n    {\n        \"id\": \"5b458adf2e02d81715864179\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-11T04:43:11.250Z\",\n        \"updatedAt\": \"2018-07-11T04:43:11.250Z\"\n    },\n    {\n        \"id\": \"5b458ae02e02d8171586417a\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-11T04:43:12.422Z\",\n        \"updatedAt\": \"2018-07-11T04:43:12.422Z\"\n    },\n    {\n        \"id\": \"5b458aea2e02d8171586417e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-11T04:43:22.154Z\",\n        \"updatedAt\": \"2018-07-11T04:43:23.335Z\"\n    },\n    {\n        \"id\": \"5b458aec2e02d8171586417f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-11T04:43:24.487Z\",\n        \"updatedAt\": \"2018-07-11T04:43:25.676Z\"\n    },\n    {\n        \"id\": \"5b458aee2e02d81715864180\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-11T04:43:26.962Z\",\n        \"updatedAt\": \"2018-07-11T04:43:28.346Z\"\n    },\n    {\n        \"id\": \"5b458af12e02d81715864181\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-11T04:43:29.599Z\",\n        \"updatedAt\": \"2018-07-11T04:43:30.837Z\"\n    },\n    {\n        \"id\": \"5b458af32e02d81715864182\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-11T04:43:31.998Z\",\n        \"updatedAt\": \"2018-07-11T04:43:33.191Z\"\n    },\n    {\n        \"id\": \"5b458af62e02d81715864184\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-11T04:43:34.536Z\",\n        \"updatedAt\": \"2018-07-11T04:43:35.894Z\"\n    },\n    {\n        \"id\": \"5b458af92e02d81715864185\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-11T04:43:37.135Z\",\n        \"updatedAt\": \"2018-07-11T04:43:38.404Z\"\n    },\n    {\n        \"id\": \"5b458afb2e02d81715864186\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-11T04:43:39.560Z\",\n        \"updatedAt\": \"2018-07-11T04:43:39.560Z\"\n    },\n    {\n        \"id\": \"5b458afe2e02d81715864188\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-11T04:43:42.089Z\",\n        \"updatedAt\": \"2018-07-11T04:43:42.089Z\"\n    },\n    {\n        \"id\": \"5b458b022e02d81715864189\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-11T04:43:46.780Z\",\n        \"updatedAt\": \"2018-07-11T04:43:46.780Z\"\n    },\n    {\n        \"id\": \"5b458bc32e02d817158641a8\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-11T04:46:59.766Z\",\n        \"updatedAt\": \"2018-07-11T04:46:59.766Z\"\n    },\n    {\n        \"id\": \"5b458bc42e02d817158641a9\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-11T04:47:00.833Z\",\n        \"updatedAt\": \"2018-07-11T04:47:00.833Z\"\n    },\n    {\n        \"id\": \"5b458bc52e02d817158641aa\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-11T04:47:01.894Z\",\n        \"updatedAt\": \"2018-07-11T04:47:01.894Z\"\n    },\n    {\n        \"id\": \"5b458bc62e02d817158641ab\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-11T04:47:02.976Z\",\n        \"updatedAt\": \"2018-07-11T04:47:02.976Z\"\n    },\n    {\n        \"id\": \"5b458bc82e02d817158641ac\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-11T04:47:04.038Z\",\n        \"updatedAt\": \"2018-07-11T04:47:04.038Z\"\n    },\n    {\n        \"id\": \"5b458bc92e02d817158641ad\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-11T04:47:05.100Z\",\n        \"updatedAt\": \"2018-07-11T04:47:05.100Z\"\n    },\n    {\n        \"id\": \"5b458bca2e02d817158641ae\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-11T04:47:06.165Z\",\n        \"updatedAt\": \"2018-07-11T04:47:06.165Z\"\n    },\n    {\n        \"id\": \"5b458bd22e02d817158641b0\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-11T04:47:14.629Z\",\n        \"updatedAt\": \"2018-07-11T04:47:15.698Z\"\n    },\n    {\n        \"id\": \"5b458bd42e02d817158641b1\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-11T04:47:16.820Z\",\n        \"updatedAt\": \"2018-07-11T04:47:17.895Z\"\n    },\n    {\n        \"id\": \"5b458bd62e02d817158641b2\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-11T04:47:18.956Z\",\n        \"updatedAt\": \"2018-07-11T04:47:20.043Z\"\n    },\n    {\n        \"id\": \"5b458bd92e02d817158641b3\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-11T04:47:21.132Z\",\n        \"updatedAt\": \"2018-07-11T04:47:22.198Z\"\n    },\n    {\n        \"id\": \"5b458bdb2e02d817158641b4\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-11T04:47:23.293Z\",\n        \"updatedAt\": \"2018-07-11T04:47:24.356Z\"\n    },\n    {\n        \"id\": \"5b458bdd2e02d817158641b5\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-11T04:47:25.415Z\",\n        \"updatedAt\": \"2018-07-11T04:47:26.513Z\"\n    },\n    {\n        \"id\": \"5b458bdf2e02d817158641b6\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-11T04:47:27.577Z\",\n        \"updatedAt\": \"2018-07-11T04:47:28.640Z\"\n    },\n    {\n        \"id\": \"5b458be12e02d817158641b7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-11T04:47:29.707Z\",\n        \"updatedAt\": \"2018-07-11T04:47:29.707Z\"\n    },\n    {\n        \"id\": \"5b458be32e02d817158641b8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-11T04:47:31.838Z\",\n        \"updatedAt\": \"2018-07-11T04:47:31.838Z\"\n    },\n    {\n        \"id\": \"5b458be72e02d817158641b9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-11T04:47:35.992Z\",\n        \"updatedAt\": \"2018-07-11T04:47:35.992Z\"\n    },\n    {\n        \"id\": \"5b46dd202e02d81116db9da4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-12T04:46:24.436Z\",\n        \"updatedAt\": \"2018-07-12T04:46:24.436Z\"\n    },\n    {\n        \"id\": \"5b46dd212e02d81116db9da5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-12T04:46:25.515Z\",\n        \"updatedAt\": \"2018-07-12T04:46:25.515Z\"\n    },\n    {\n        \"id\": \"5b46dd222e02d81116db9da6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-12T04:46:26.565Z\",\n        \"updatedAt\": \"2018-07-12T04:46:26.565Z\"\n    },\n    {\n        \"id\": \"5b46dd232e02d81116db9da7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-12T04:46:27.593Z\",\n        \"updatedAt\": \"2018-07-12T04:46:27.593Z\"\n    },\n    {\n        \"id\": \"5b46dd242e02d81116db9da8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-12T04:46:28.621Z\",\n        \"updatedAt\": \"2018-07-12T04:46:28.621Z\"\n    },\n    {\n        \"id\": \"5b46dd252e02d81116db9da9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-12T04:46:29.651Z\",\n        \"updatedAt\": \"2018-07-12T04:46:29.651Z\"\n    },\n    {\n        \"id\": \"5b46dd262e02d81116db9daa\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-12T04:46:30.677Z\",\n        \"updatedAt\": \"2018-07-12T04:46:30.677Z\"\n    },\n    {\n        \"id\": \"5b46dd2e2e02d81116db9dac\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-12T04:46:38.939Z\",\n        \"updatedAt\": \"2018-07-12T04:46:40.008Z\"\n    },\n    {\n        \"id\": \"5b46dd312e02d81116db9dad\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-12T04:46:41.031Z\",\n        \"updatedAt\": \"2018-07-12T04:46:42.115Z\"\n    },\n    {\n        \"id\": \"5b46dd332e02d81116db9dae\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-12T04:46:43.159Z\",\n        \"updatedAt\": \"2018-07-12T04:46:44.197Z\"\n    },\n    {\n        \"id\": \"5b46dd352e02d81116db9daf\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-12T04:46:45.233Z\",\n        \"updatedAt\": \"2018-07-12T04:46:46.281Z\"\n    },\n    {\n        \"id\": \"5b46dd372e02d81116db9db0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-12T04:46:47.334Z\",\n        \"updatedAt\": \"2018-07-12T04:46:48.362Z\"\n    },\n    {\n        \"id\": \"5b46dd392e02d81116db9db1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-12T04:46:49.390Z\",\n        \"updatedAt\": \"2018-07-12T04:46:50.472Z\"\n    },\n    {\n        \"id\": \"5b46dd3b2e02d81116db9db2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-12T04:46:51.500Z\",\n        \"updatedAt\": \"2018-07-12T04:46:52.568Z\"\n    },\n    {\n        \"id\": \"5b46dd3d2e02d81116db9db3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-12T04:46:53.605Z\",\n        \"updatedAt\": \"2018-07-12T04:46:53.605Z\"\n    },\n    {\n        \"id\": \"5b46dd3f2e02d81116db9db4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-12T04:46:55.686Z\",\n        \"updatedAt\": \"2018-07-12T04:46:55.686Z\"\n    },\n    {\n        \"id\": \"5b46dd442e02d81116db9db5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-12T04:47:00.016Z\",\n        \"updatedAt\": \"2018-07-12T04:47:00.016Z\"\n    },\n    {\n        \"id\": \"5b482ec02e02d81116db9eda\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-13T04:46:56.758Z\",\n        \"updatedAt\": \"2018-07-13T04:46:56.758Z\"\n    },\n    {\n        \"id\": \"5b482ec12e02d81116db9edb\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-13T04:46:57.812Z\",\n        \"updatedAt\": \"2018-07-13T04:46:57.812Z\"\n    },\n    {\n        \"id\": \"5b482ec22e02d81116db9edc\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-13T04:46:58.927Z\",\n        \"updatedAt\": \"2018-07-13T04:46:58.927Z\"\n    },\n    {\n        \"id\": \"5b482ec32e02d81116db9edd\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-13T04:46:59.984Z\",\n        \"updatedAt\": \"2018-07-13T04:46:59.984Z\"\n    },\n    {\n        \"id\": \"5b482ec52e02d81116db9ede\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-13T04:47:01.040Z\",\n        \"updatedAt\": \"2018-07-13T04:47:01.040Z\"\n    },\n    {\n        \"id\": \"5b482ec62e02d81116db9edf\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-13T04:47:02.121Z\",\n        \"updatedAt\": \"2018-07-13T04:47:02.121Z\"\n    },\n    {\n        \"id\": \"5b482ec72e02d81116db9ee0\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-13T04:47:03.182Z\",\n        \"updatedAt\": \"2018-07-13T04:47:03.182Z\"\n    },\n    {\n        \"id\": \"5b482ecf2e02d81116db9ee2\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-13T04:47:11.542Z\",\n        \"updatedAt\": \"2018-07-13T04:47:12.636Z\"\n    },\n    {\n        \"id\": \"5b482ed12e02d81116db9ee3\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-13T04:47:13.691Z\",\n        \"updatedAt\": \"2018-07-13T04:47:14.747Z\"\n    },\n    {\n        \"id\": \"5b482ed32e02d81116db9ee4\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-13T04:47:15.804Z\",\n        \"updatedAt\": \"2018-07-13T04:47:16.860Z\"\n    },\n    {\n        \"id\": \"5b482ed52e02d81116db9ee5\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-13T04:47:17.933Z\",\n        \"updatedAt\": \"2018-07-13T04:47:19.067Z\"\n    },\n    {\n        \"id\": \"5b482ed82e02d81116db9ee6\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-13T04:47:20.123Z\",\n        \"updatedAt\": \"2018-07-13T04:47:21.187Z\"\n    },\n    {\n        \"id\": \"5b482eda2e02d81116db9ee7\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-13T04:47:22.269Z\",\n        \"updatedAt\": \"2018-07-13T04:47:23.325Z\"\n    },\n    {\n        \"id\": \"5b482edc2e02d81116db9ee8\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-13T04:47:24.639Z\",\n        \"updatedAt\": \"2018-07-13T04:47:25.728Z\"\n    },\n    {\n        \"id\": \"5b482ede2e02d81116db9ee9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-13T04:47:26.833Z\",\n        \"updatedAt\": \"2018-07-13T04:47:26.833Z\"\n    },\n    {\n        \"id\": \"5b482ee02e02d81116db9eea\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-13T04:47:28.999Z\",\n        \"updatedAt\": \"2018-07-13T04:47:28.999Z\"\n    },\n    {\n        \"id\": \"5b482ee52e02d81116db9eeb\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-13T04:47:33.178Z\",\n        \"updatedAt\": \"2018-07-13T04:47:33.178Z\"\n    },\n    {\n        \"id\": \"5b483210fd8a54155947a6d9\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-13T05:01:04.027Z\",\n        \"updatedAt\": \"2018-07-13T05:01:04.027Z\"\n    },\n    {\n        \"id\": \"5b483211fd8a54155947a6da\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-13T05:01:05.314Z\",\n        \"updatedAt\": \"2018-07-13T05:01:05.314Z\"\n    },\n    {\n        \"id\": \"5b483212fd8a54155947a6db\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-13T05:01:06.716Z\",\n        \"updatedAt\": \"2018-07-13T05:01:06.716Z\"\n    },\n    {\n        \"id\": \"5b483214fd8a54155947a6dc\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-13T05:01:08.093Z\",\n        \"updatedAt\": \"2018-07-13T05:01:08.093Z\"\n    },\n    {\n        \"id\": \"5b483215fd8a54155947a6dd\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-13T05:01:09.370Z\",\n        \"updatedAt\": \"2018-07-13T05:01:09.370Z\"\n    },\n    {\n        \"id\": \"5b483216fd8a54155947a6de\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-13T05:01:10.669Z\",\n        \"updatedAt\": \"2018-07-13T05:01:10.669Z\"\n    },\n    {\n        \"id\": \"5b483217fd8a54155947a6df\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-13T05:01:11.963Z\",\n        \"updatedAt\": \"2018-07-13T05:01:11.963Z\"\n    },\n    {\n        \"id\": \"5b483222fd8a54155947a6e1\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-13T05:01:22.440Z\",\n        \"updatedAt\": \"2018-07-13T05:01:23.699Z\"\n    },\n    {\n        \"id\": \"5b483225fd8a54155947a6e2\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-13T05:01:25.059Z\",\n        \"updatedAt\": \"2018-07-13T05:01:26.354Z\"\n    },\n    {\n        \"id\": \"5b483227fd8a54155947a6e3\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-13T05:01:27.853Z\",\n        \"updatedAt\": \"2018-07-13T05:01:29.086Z\"\n    },\n    {\n        \"id\": \"5b48322afd8a54155947a6e4\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-13T05:01:30.326Z\",\n        \"updatedAt\": \"2018-07-13T05:01:31.832Z\"\n    },\n    {\n        \"id\": \"5b48322dfd8a54155947a6e5\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-13T05:01:33.132Z\",\n        \"updatedAt\": \"2018-07-13T05:01:34.550Z\"\n    },\n    {\n        \"id\": \"5b48322ffd8a54155947a6e6\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-13T05:01:35.895Z\",\n        \"updatedAt\": \"2018-07-13T05:01:37.154Z\"\n    },\n    {\n        \"id\": \"5b483232fd8a54155947a6e7\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-13T05:01:38.452Z\",\n        \"updatedAt\": \"2018-07-13T05:01:39.818Z\"\n    },\n    {\n        \"id\": \"5b483235fd8a54155947a6e8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-13T05:01:41.286Z\",\n        \"updatedAt\": \"2018-07-13T05:01:41.286Z\"\n    },\n    {\n        \"id\": \"5b483237fd8a54155947a6e9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-13T05:01:43.817Z\",\n        \"updatedAt\": \"2018-07-13T05:01:43.817Z\"\n    },\n    {\n        \"id\": \"5b48323cfd8a54155947a6ea\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-13T05:01:48.946Z\",\n        \"updatedAt\": \"2018-07-13T05:01:48.946Z\"\n    },\n    {\n        \"id\": \"5b4c23892e02d81116db9f8b\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-16T04:48:09.966Z\",\n        \"updatedAt\": \"2018-07-16T04:48:09.966Z\"\n    },\n    {\n        \"id\": \"5b4c238c2e02d81116db9f8c\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-16T04:48:12.129Z\",\n        \"updatedAt\": \"2018-07-16T04:48:12.129Z\"\n    },\n    {\n        \"id\": \"5b4c238d2e02d81116db9f8d\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-16T04:48:13.262Z\",\n        \"updatedAt\": \"2018-07-16T04:48:13.262Z\"\n    },\n    {\n        \"id\": \"5b4c238e2e02d81116db9f8e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-16T04:48:14.336Z\",\n        \"updatedAt\": \"2018-07-16T04:48:14.336Z\"\n    },\n    {\n        \"id\": \"5b4c238f2e02d81116db9f8f\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-16T04:48:15.419Z\",\n        \"updatedAt\": \"2018-07-16T04:48:15.419Z\"\n    },\n    {\n        \"id\": \"5b4c23902e02d81116db9f90\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-16T04:48:16.530Z\",\n        \"updatedAt\": \"2018-07-16T04:48:16.530Z\"\n    },\n    {\n        \"id\": \"5b4c23912e02d81116db9f91\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-16T04:48:17.604Z\",\n        \"updatedAt\": \"2018-07-16T04:48:17.604Z\"\n    },\n    {\n        \"id\": \"5b4c239a2e02d81116db9f93\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-16T04:48:26.179Z\",\n        \"updatedAt\": \"2018-07-16T04:48:27.262Z\"\n    },\n    {\n        \"id\": \"5b4c239c2e02d81116db9f94\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-16T04:48:28.409Z\",\n        \"updatedAt\": \"2018-07-16T04:48:29.516Z\"\n    },\n    {\n        \"id\": \"5b4c239e2e02d81116db9f95\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-16T04:48:30.589Z\",\n        \"updatedAt\": \"2018-07-16T04:48:31.674Z\"\n    },\n    {\n        \"id\": \"5b4c23a02e02d81116db9f96\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-16T04:48:32.762Z\",\n        \"updatedAt\": \"2018-07-16T04:48:33.864Z\"\n    },\n    {\n        \"id\": \"5b4c23a22e02d81116db9f97\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-16T04:48:34.935Z\",\n        \"updatedAt\": \"2018-07-16T04:48:36.054Z\"\n    },\n    {\n        \"id\": \"5b4c23a52e02d81116db9f98\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-16T04:48:37.158Z\",\n        \"updatedAt\": \"2018-07-16T04:48:38.252Z\"\n    },\n    {\n        \"id\": \"5b4c23a72e02d81116db9f99\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-16T04:48:39.334Z\",\n        \"updatedAt\": \"2018-07-16T04:48:40.408Z\"\n    },\n    {\n        \"id\": \"5b4c23a92e02d81116db9f9a\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-16T04:48:41.500Z\",\n        \"updatedAt\": \"2018-07-16T04:48:41.500Z\"\n    },\n    {\n        \"id\": \"5b4c23ab2e02d81116db9f9b\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-16T04:48:43.654Z\",\n        \"updatedAt\": \"2018-07-16T04:48:43.654Z\"\n    },\n    {\n        \"id\": \"5b4c23af2e02d81116db9f9c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-16T04:48:47.973Z\",\n        \"updatedAt\": \"2018-07-16T04:48:47.973Z\"\n    },\n    {\n        \"id\": \"5b4d74d92e02d81116dba04e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-17T04:47:21.037Z\",\n        \"updatedAt\": \"2018-07-17T04:47:21.037Z\"\n    },\n    {\n        \"id\": \"5b4d74da2e02d81116dba04f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-17T04:47:22.111Z\",\n        \"updatedAt\": \"2018-07-17T04:47:22.111Z\"\n    },\n    {\n        \"id\": \"5b4d74db2e02d81116dba050\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-17T04:47:23.205Z\",\n        \"updatedAt\": \"2018-07-17T04:47:23.205Z\"\n    },\n    {\n        \"id\": \"5b4d74dc2e02d81116dba051\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-17T04:47:24.241Z\",\n        \"updatedAt\": \"2018-07-17T04:47:24.241Z\"\n    },\n    {\n        \"id\": \"5b4d74dd2e02d81116dba052\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-17T04:47:25.277Z\",\n        \"updatedAt\": \"2018-07-17T04:47:25.277Z\"\n    },\n    {\n        \"id\": \"5b4d74de2e02d81116dba053\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-17T04:47:26.318Z\",\n        \"updatedAt\": \"2018-07-17T04:47:26.318Z\"\n    },\n    {\n        \"id\": \"5b4d74df2e02d81116dba054\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-17T04:47:27.352Z\",\n        \"updatedAt\": \"2018-07-17T04:47:27.352Z\"\n    },\n    {\n        \"id\": \"5b4d74e72e02d81116dba056\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-07-17T04:47:35.720Z\",\n        \"updatedAt\": \"2018-07-17T04:47:36.763Z\"\n    },\n    {\n        \"id\": \"5b4d74e92e02d81116dba057\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-07-17T04:47:37.803Z\",\n        \"updatedAt\": \"2018-07-17T04:47:38.836Z\"\n    },\n    {\n        \"id\": \"5b4d74eb2e02d81116dba058\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-07-17T04:47:39.906Z\",\n        \"updatedAt\": \"2018-07-17T04:47:40.947Z\"\n    },\n    {\n        \"id\": \"5b4d74ed2e02d81116dba059\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-07-17T04:47:41.980Z\",\n        \"updatedAt\": \"2018-07-17T04:47:43.029Z\"\n    },\n    {\n        \"id\": \"5b4d74f02e02d81116dba05a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-07-17T04:47:44.073Z\",\n        \"updatedAt\": \"2018-07-17T04:47:45.109Z\"\n    },\n    {\n        \"id\": \"5b4d74f22e02d81116dba05b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-07-17T04:47:46.175Z\",\n        \"updatedAt\": \"2018-07-17T04:47:47.215Z\"\n    },\n    {\n        \"id\": \"5b4d74f42e02d81116dba05c\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-07-17T04:47:48.257Z\",\n        \"updatedAt\": \"2018-07-17T04:47:49.292Z\"\n    },\n    {\n        \"id\": \"5b4d74f62e02d81116dba05d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-17T04:47:50.348Z\",\n        \"updatedAt\": \"2018-07-17T04:47:50.348Z\"\n    },\n    {\n        \"id\": \"5b4d74f82e02d81116dba05e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-17T04:47:52.461Z\",\n        \"updatedAt\": \"2018-07-17T04:47:52.461Z\"\n    },\n    {\n        \"id\": \"5b4d74fc2e02d81116dba05f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-07-17T04:47:56.486Z\",\n        \"updatedAt\": \"2018-07-17T04:47:56.486Z\"\n    }\n]\n\n",
									"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:35:49 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Write to CSV Specification",
			"fileName": "C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Write to CSV.spec",
			"tags": [],
			"executionTime": 70312,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Get all questions of a deck using a valid deckId",
					"tags": [],
					"executionTime": 70312,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a my deck with all types of 9 questions",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "pass",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 67895,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 92,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"\"null\""
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"0"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"osan"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 51,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": null,\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00\",\n    \"notificationFrequency\": \"0\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"osan\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 51504,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 51236ms\n\n",
											"Response is: \n{\n    \"id\": \"5b4ed1ec2e02d81116dba075\",\n    \"title\": \"API Deck3\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1512021142001,\n        \"price\": 777.0,\n        \"sku\": \"com.pearson.smartflashcards.test3\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00\",\n        \"notificationFrequency\": \"0\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1531892204227,\n        \"updatedAt\": 1531892204227\n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"osan\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-07-18T05:36:44.227Z\",\n    \"updatedAt\": \"2018-07-18T05:36:44.229Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"examReminder\": {\n        \"startDate\": 1510811542000,\n        \"endDate\": 1512021142000,\n        \"time\": \"08:00\"\n    },\n    \"expert\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=afabcd2a-6ee1-456f-a2aa-2a0f0d8fa83a\nX-Application-Context=application:qa:8090\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:44 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"spec",
													"myDeckIdWith9Questions",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [
											"\"5b4ed1ec2e02d81116dba075\" is successfully saved as a text in Specification Data Store [myDeckIdWith9Questions]"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 111,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 29,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"MULTIPLE_CHOICE\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Osanda\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"Gemunu\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"Eranga\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Heshan\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Thilina\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1814,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1571ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"MULTIPLE_CHOICE\",\n    \"learningObjectives\": [\n        \"learningObjective1\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892206007,\n        \"updatedAt\": 1531892206007\n    },\n    \"answers\": [\n        {\n            \"id\": 1,\n            \"value\": \"Osanda\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        },\n        {\n            \"id\": 5,\n            \"value\": \"Thilina\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        },\n        {\n            \"id\": 3,\n            \"value\": \"Eranga\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": true\n        },\n        {\n            \"id\": 2,\n            \"value\": \"Gemunu\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": true\n        },\n        {\n            \"id\": 4,\n            \"value\": \"Heshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        }\n    ],\n    \"correctAnswers\": [\n        1,\n        2\n    ],\n    \"id\": \"5b4ed1ee2e02d8450f55157e\",\n    \"createdAt\": \"2018-07-18T05:36:46.007Z\",\n    \"updatedAt\": \"2018-07-18T05:36:46.009Z\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=b6dc95c6-de49-415d-ac19-232c12661f92\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=eeff859c-80e7-4340-8cc7-95e2bba98f9d\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:46 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 75,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 38,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"MULTIPLE_CHOICE\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Osanda\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"Gemunu\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"Eranga\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Heshan\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Thilina\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1754,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1499ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"MULTIPLE_CHOICE\",\n    \"learningObjectives\": [\n        \"learningObjective1\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892207877,\n        \"updatedAt\": 1531892207877\n    },\n    \"answers\": [\n        {\n            \"id\": 3,\n            \"value\": \"Eranga\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": true\n        },\n        {\n            \"id\": 1,\n            \"value\": \"Osanda\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        },\n        {\n            \"id\": 2,\n            \"value\": \"Gemunu\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": true\n        },\n        {\n            \"id\": 4,\n            \"value\": \"Heshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        },\n        {\n            \"id\": 5,\n            \"value\": \"Thilina\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        }\n    ],\n    \"correctAnswers\": [\n        1,\n        2\n    ],\n    \"id\": \"5b4ed1ef2e02d8450f55157f\",\n    \"createdAt\": \"2018-07-18T05:36:47.877Z\",\n    \"updatedAt\": \"2018-07-18T05:36:47.878Z\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=68c9e208-d6f5-4095-a996-4a0f8a58dcec\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=b7b79ed4-caca-4812-b951-3dff0673c184\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:47 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId2",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [
											"\"5b4ed1ef2e02d8450f55157f\" is successfully saved as a text in Scenario Data Store [cardId2]"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 113,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 55,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"MULTIPLE_CHOICE\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Osanda\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"Gemunu\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"Eranga\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Heshan\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Thilina\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1698,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1411ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"MULTIPLE_CHOICE\",\n    \"learningObjectives\": [\n        \"learningObjective1\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892209730,\n        \"updatedAt\": 1531892209730\n    },\n    \"answers\": [\n        {\n            \"id\": 3,\n            \"value\": \"Eranga\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": true\n        },\n        {\n            \"id\": 5,\n            \"value\": \"Thilina\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        },\n        {\n            \"id\": 2,\n            \"value\": \"Gemunu\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": true\n        },\n        {\n            \"id\": 4,\n            \"value\": \"Heshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        },\n        {\n            \"id\": 1,\n            \"value\": \"Osanda\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        }\n    ],\n    \"correctAnswers\": [\n        1,\n        2\n    ],\n    \"id\": \"5b4ed1f12e02d8450f551580\",\n    \"createdAt\": \"2018-07-18T05:36:49.730Z\",\n    \"updatedAt\": \"2018-07-18T05:36:49.739Z\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=3839e528-0ca7-466d-bcd4-a9ad0b8160ce\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=980ac46b-0584-4a40-be29-0d7af0ccc044\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:49 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 94,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 44,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"MULTIPLE_CHOICE\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Osanda\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"Gemunu\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"Eranga\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Heshan\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Thilina\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1855,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1543ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"MULTIPLE_CHOICE\",\n    \"learningObjectives\": [\n        \"learningObjective1\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892211720,\n        \"updatedAt\": 1531892211720\n    },\n    \"answers\": [\n        {\n            \"id\": 5,\n            \"value\": \"Thilina\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        },\n        {\n            \"id\": 4,\n            \"value\": \"Heshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        },\n        {\n            \"id\": 3,\n            \"value\": \"Eranga\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": true\n        },\n        {\n            \"id\": 2,\n            \"value\": \"Gemunu\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": true\n        },\n        {\n            \"id\": 1,\n            \"value\": \"Osanda\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        }\n    ],\n    \"correctAnswers\": [\n        1,\n        2\n    ],\n    \"id\": \"5b4ed1f32e02d8450f551581\",\n    \"createdAt\": \"2018-07-18T05:36:51.720Z\",\n    \"updatedAt\": \"2018-07-18T05:36:51.721Z\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=feb37479-d2b8-49c0-84cd-fc637892aeb3\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=69463b81-a256-4ca6-9c60-638453194220\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:51 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create All Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 145,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"ALL"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 34,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"ALL\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"learningObjective1\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"correctAnswers\": [\n        1,2\n  ],\n  \"answers\": [\n      {\n        \"id\": 1,\n        \"value\": \"Osanda\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 2,\n        \"value\": \"Gemunu\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      },\n      {\n        \"id\": 3,\n        \"value\": \"Eranga\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 4,\n        \"value\": \"Heshan\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": false\n      },\n      {\n        \"id\": 5,\n        \"value\": \"Thilina\",\n        \"type\": \"TEXT\",\n        \"caseSensitive\": true\n      }\n    ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1554,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1357ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"ALL\",\n    \"learningObjectives\": [\n        \"learningObjective1\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892213601,\n        \"updatedAt\": 1531892213601\n    },\n    \"answers\": [\n        {\n            \"id\": 1,\n            \"value\": \"Osanda\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        },\n        {\n            \"id\": 5,\n            \"value\": \"Thilina\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": false\n        },\n        {\n            \"id\": 2,\n            \"value\": \"Gemunu\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": true,\n            \"correct\": true\n        },\n        {\n            \"id\": 3,\n            \"value\": \"Eranga\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": true\n        },\n        {\n            \"id\": 4,\n            \"value\": \"Heshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        }\n    ],\n    \"correctAnswers\": [\n        1,\n        2\n    ],\n    \"id\": \"5b4ed1f52e02d8450f551582\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=2111d2ce-ee40-4f8a-96b2-dafabc430c4b\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=6765adcb-6492-472b-9fa2-2044956600aa\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:53 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId5",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [
											"\"5b4ed1f52e02d8450f551582\" is successfully saved as a text in Scenario Data Store [cardId5]"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 81,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 27,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"SHORT_ANSWER\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"answers\": [\n        {\n          \"id\": 1,\n          \"value\": \"Osanda Deshan\",\n          \"caseSensitive\": false,\n          \"type\": \"TEXT\"\n        }\n  ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1553,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1340ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"SHORT_ANSWER\",\n    \"learningObjectives\": [\n        \"\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892215272,\n        \"updatedAt\": 1531892215272\n    },\n    \"answers\": [\n        {\n            \"id\": 1,\n            \"value\": \"Osanda Deshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        }\n    ],\n    \"id\": \"5b4ed1f72e02d8450f551583\",\n    \"createdAt\": \"2018-07-18T05:36:55.272Z\",\n    \"updatedAt\": \"2018-07-18T05:36:55.273Z\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=fd0d4fa1-d460-44c2-a657-640e86b1249b\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=42c403b3-6639-485b-aa0a-98ae4eba9e9d\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:55 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 71,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 37,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"SHORT_ANSWER\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"answers\": [\n        {\n          \"id\": 1,\n          \"value\": \"Osanda Deshan\",\n          \"caseSensitive\": false,\n          \"type\": \"TEXT\"\n        }\n  ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1550,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1361ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"SHORT_ANSWER\",\n    \"learningObjectives\": [\n        \"\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892216934,\n        \"updatedAt\": 1531892216934\n    },\n    \"answers\": [\n        {\n            \"id\": 1,\n            \"value\": \"Osanda Deshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        }\n    ],\n    \"id\": \"5b4ed1f82e02d8450f551584\",\n    \"createdAt\": \"2018-07-18T05:36:56.934Z\",\n    \"updatedAt\": \"2018-07-18T05:36:56.935Z\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=374088a1-3691-4a57-a4e4-3079a10a8058\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=f9499899-badc-41a0-87e3-f76d22c79fe4\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:56 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 96,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 33,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"SHORT_ANSWER\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"answers\": [\n        {\n          \"id\": 1,\n          \"value\": \"Osanda Deshan\",\n          \"caseSensitive\": false,\n          \"type\": \"TEXT\"\n        }\n  ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1743,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1360ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"SHORT_ANSWER\",\n    \"learningObjectives\": [\n        \"\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892218827,\n        \"updatedAt\": 1531892218827\n    },\n    \"answers\": [\n        {\n            \"id\": 1,\n            \"value\": \"Osanda Deshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        }\n    ],\n    \"id\": \"5b4ed1fa2e02d8450f551585\",\n    \"createdAt\": \"2018-07-18T05:36:58.827Z\",\n    \"updatedAt\": \"2018-07-18T05:36:58.828Z\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=2111d2ce-ee40-4f8a-96b2-dafabc430c4b\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=f23fb34f-418a-4b4c-8009-605fcf7715dc\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:36:58 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId8",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [
											"\"5b4ed1fa2e02d8450f551585\" is successfully saved as a text in Scenario Data Store [cardId8]"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 87,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 30,
										"skippedReason": "",
										"messages": [
											"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
											"The JSON request body that you are going to use for the API is:\n{\n  \"creatorId\": \"osanda12\",\n  \"creatorPlatform\": \"Web\",\n  \"creatoredSource\": \"App\",\n  \"creatoredType\": \"Manual\",\n  \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n  \"tempQuestionId\": \"testId\",\n  \"kind\": \"SHORT_ANSWER\",\n  \"deleted\": false,\n  \"learningObjectives\": [\n    \"\"\n  ],\n  \"question\": {\n    \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"media\": \"TEXT\",\n    \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n    \"promptType\": \"TEXT\",\n    \"timeout\": 60\n  },\n  \"rationale\": \"rationale\",\n  \"stats\": {\n    \"boxId\": 0,\n    \"correctAttempts\": 1,\n    \"inCorrectAttempts\": 0,\n    \"lastAswered\": \"2018-01-01T12:00:00+01:00\",\n    \"questionId\": 0,\n    \"skips\": 0,\n    \"userId\": 0\n  },\n \"answers\": [\n        {\n          \"id\": 1,\n          \"value\": \"Osanda Deshan\",\n          \"caseSensitive\": false,\n          \"type\": \"TEXT\"\n        }\n  ],\n  \"tags\": [\n    \"MaxSoft\"\n  ]\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1523,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/questions\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 1317ms\n\n",
											"Response is: \n{\n    \"question\": {\n        \"timeout\": 60,\n        \"media\": \"TEXT\",\n        \"prompt\": \"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _\",\n        \"imageUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n        \"promptType\": \"TEXT\"\n    },\n    \"stats\": {\n        \"questionId\": 0,\n        \"userId\": 0,\n        \"boxId\": 0,\n        \"skips\": 0,\n        \"lastAswered\": 1514804400000,\n        \"inCorrectAttempts\": 0,\n        \"correctAttempts\": 1\n    },\n    \"kind\": \"SHORT_ANSWER\",\n    \"learningObjectives\": [\n        \"\"\n    ],\n    \"rationale\": \"rationale\",\n    \"tags\": [\n        \"MaxSoft\"\n    ],\n    \"creatorId\": \"osanda12\",\n    \"deckId\": \"5b4ed1ec2e02d81116dba075\",\n    \"creatoredType\": \"Manual\",\n    \"creatorPlatform\": \"Web\",\n    \"creatoredSource\": \"App\",\n    \"parentId\": null,\n    \"tempQuestionId\": \"testId\",\n    \"epochTime\": {\n        \"createdAt\": 1531892220488,\n        \"updatedAt\": 1531892220488\n    },\n    \"answers\": [\n        {\n            \"id\": 1,\n            \"value\": \"Osanda Deshan\",\n            \"type\": \"TEXT\",\n            \"caseSensitive\": false,\n            \"correct\": false\n        }\n    ],\n    \"id\": \"5b4ed1fc2e02d8450f551586\",\n    \"createdAt\": \"2018-07-18T05:37:00.488Z\",\n    \"updatedAt\": \"2018-07-18T05:37:00.489Z\",\n    \"archived\": false,\n    \"deleted\": false\n}\n\n",
											"Response Headers are: \ncorrelation-id=fd0d4fa1-d460-44c2-a657-640e86b1249b\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nPragma=no-cache\nExpires=0\ncorrelation-id=1bee5e0f-f51a-47b5-982b-35c997acb82c\nTransfer-Encoding=chunked\nDate=Wed, 18 Jul 2018 05:37:00 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"questionId",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [
											"\"5b4ed1fc2e02d8450f551586\" is successfully saved as a text in Scenario Data Store [questionId]"
										],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get all Questions using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 105,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8075/api/questions\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Parameter",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"myDeckIdWith9Questions",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [myDeckIdWith9Questions] is: \"5b4ed1ec2e02d81116dba075\"\n\n",
									"Query parameters which will append to the request URL: ?deckId=5b4ed1ec2e02d81116dba075\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.net.DualStackPlainSocketImpl.connect0(Native Method)\njava.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:79)\njava.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350)\njava.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206)\njava.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188)\njava.net.PlainSocketImpl.connect(PlainSocketImpl.java:172)\njava.net.SocksSocketImpl.connect(SocksSocketImpl.java:392)\njava.net.Socket.connect(Socket.java:589)\norg.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121)\norg.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180)\norg.apache.http.impl.conn.ManagedClientConnectionImpl.open(ManagedClientConnectionImpl.java:326)\norg.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:610)\norg.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:445)\norg.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:83)\norg.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\norg.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\norg.apache.http.client.HttpClient$execute$0.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl$RestAssuredHttpBuilder.doRequest(RequestSpecificationImpl.groovy:2028)\nio.restassured.internal.http.HTTPBuilder.doRequest(HTTPBuilder.java:494)\nio.restassured.internal.http.HTTPBuilder.request(HTTPBuilder.java:451)\nio.restassured.internal.http.HTTPBuilder$request$3.call(Unknown Source)\nio.restassured.internal.RequestSpecificationImpl.sendHttpRequest(RequestSpecificationImpl.groovy:1434)\n",
								"screenshot": "",
								"errorMessage": "java.net.ConnectException: Connection refused: connect",
								"executionTime": 2312,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8075/api/questions?deckId=5b4ed1ec2e02d81116dba075\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.questions[-1:].question.media",
											"TEXT"
										]
									},
									{
										"cells": [
											"$.questions[-1:].question.prompt",
											"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
										]
									},
									{
										"cells": [
											"$.questions[-1:].question.promptType",
											"TEXT"
										]
									},
									{
										"cells": [
											"$.questions[-1:].creatorPlatform",
											"Web"
										]
									},
									{
										"cells": [
											"$.questions[-1:].creatoredSource",
											"App"
										]
									},
									{
										"cells": [
											"$.questions[-1:].creatoredType",
											"Manual"
										]
									},
									{
										"cells": [
											"$.questions[-1:].creatorId",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Array values of the response into CSV files",
							"table": {
								"headers": [
									"JSON Path",
									"Header Name",
									"CSV File Path"
								],
								"rows": [
									{
										"cells": [
											"$.questions[*].id",
											"questionId",
											"/resources/csv/questionIds.csv"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "CRUD in One Scenario Specification",
			"fileName": "C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\CRUD in One Scenario.spec",
			"tags": [],
			"executionTime": 6975,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "CRUD operation for a sku and get all the 9 questions in a deck",
					"tags": [],
					"executionTime": 6975,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Create SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2513,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/store/sku\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#skuId",
											"sampleSkuId1"
										]
									},
									{
										"cells": [
											"#price",
											"1.19"
										]
									},
									{
										"cells": [
											"#type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 464,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n \"skuId\":\"sampleSkuId1\",\n \"price\":1.19,\n \"type\":\"DECK\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3994,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\unimaos\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/store/sku\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 2211ms\n\n",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}\n\n",
									"Response Headers are: \nX-Application-Context=application:qa:8090\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Wed, 18 Jul 2018 05:34:26 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1122)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:351)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:158)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
								"executionTime": 4,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.skuId",
											"sampleSkuId1"
										]
									},
									{
										"cells": [
											"$.price",
											"1.19"
										]
									},
									{
										"cells": [
											"$.type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"skuUUID1",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a sku",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "not executed",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 0,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create SKU\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#skuId",
													"AAPIPH5-DC2-Y"
												]
											},
											{
												"cells": [
													"#price",
													"3.99"
												]
											},
											{
												"cells": [
													"#type",
													"DECK"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the JSON Path Assertions for the response should be equal to the following",
									"table": {
										"headers": [
											"JSON Path",
											"Expected Result"
										],
										"rows": [
											{
												"cells": [
													"$.skuId",
													"AAPIPH5-DC2-Y"
												]
											},
											{
												"cells": [
													"$.price",
													"3.99"
												]
											},
											{
												"cells": [
													"$.type",
													"DECK"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"skuUUID2",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Edit SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID2",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#skuId",
											"sampleSkuId2"
										]
									},
									{
										"cells": [
											"#price",
											"1.07"
										]
									},
									{
										"cells": [
											"#type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.skuId",
											"sampleSkuId2"
										]
									},
									{
										"cells": [
											"$.price",
											"1.07"
										]
									},
									{
										"cells": [
											"$.type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID1",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID2",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a my deck with all types of 9 questions",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "not executed",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 0,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"\"null\""
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"0"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"osan"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"spec",
													"myDeckIdWith9Questions",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId2",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create All Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"ALL"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId5",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId8",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"questionId",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get all Questions using Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"myDeckIdWith9Questions",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.questions.length()",
											"9"
										]
									},
									{
										"cells": [
											"$.questions.[-1:].question.media",
											"TEXT"
										]
									},
									{
										"cells": [
											"$.questions.[-1:].question.promptType",
											"TEXT"
										]
									},
									{
										"cells": [
											"$.questions.[-1:].creatoredSource",
											"App"
										]
									},
									{
										"cells": [
											"$.questions.[-1:].answers.[0].type",
											"TEXT"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		}
	],
	"beforeSuiteHookFailure": null,
	"afterSuiteHookFailure": null,
	"passedSpecsCount": 3,
	"failedSpecsCount": 4,
	"skippedSpecsCount": 0,
	"passedScenariosCount": 12,
	"failedScenariosCount": 4,
	"skippedScenariosCount": 0
}