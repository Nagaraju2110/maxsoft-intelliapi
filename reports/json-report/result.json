{
	"projectName": "MaxSoft-IntelliAPI",
	"timestamp": "May 29, 2018 at 3:58pm",
	"successRate": 16,
	"environment": "dev",
	"tags": "",
	"executionTime": 43542,
	"executionStatus": "fail",
	"specResults": [
		{
			"specHeading": "Get Production PI Token Specification",
			"fileName": "C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Staging BVT\\1. Get Production PI Token.spec",
			"tags": [
				"get_pi_token",
				"production_token"
			],
			"executionTime": 11382,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Invoke PI API in Production Environment using valid username and password and save the access token inside the text file",
					"tags": [
						"get_pi_token",
						"production"
					],
					"executionTime": 11382,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Production PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4178,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://piapi-internal.openclass.com/tokens/",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"smartflashcards_system"
										]
									},
									{
										"cells": [
											"#password",
											"DKLIYvBBt3RJ1juHKi1gsR6PSJWlN54t"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 314,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n \"userName\": \"smartflashcards_system\",\n \"password\": \"DKLIYvBBt3RJ1juHKi1gsR6PSJWlN54t\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 6708,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttps://piapi-internal.openclass.com/tokens/",
									"HTTP Method is: POST",
									"Response Time is: 5316ms",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrNzQ5MDY2NDkyIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODQwMDllNGIwMDg5MDgwOTZkMjllIiwidHlwZSI6ImF0IiwiZXhwIjoxNTI3NjAwNTMwLCJpYXQiOjE1Mjc1ODk3MzAsInNlc3NpZCI6IjA3YzBhYmU2LWIwODQtNDE0My1hNjEwLWU5ZmUxYzIzNTI3YSJ9.ax6YGs2P6JOYYsRljfTlYqhhudwPQgLCTIAhxhBwSZMytV5VOVZAYbkgcaAKEX7HV0HBN8DdZlBbo8eQQNmFQ76qYulnHSv1udPrW6Tb6qCziuZ3mPdcNG5UT3xTEOhU-eSewMeS_M5oFheTjTMf7luIjlp7fGwHu4lWgUhGKX4\"\n}",
									"Response Headers are: \nServer=Apache-Coyote/1.1\nCorrelation-Id=36d985bd-9825-4f33-8b67-dbecc6ee82e7\nLocation=https://pi.pearsoned.com/v1/piapi/tokens/eyJraWQiOiJrNzQ5MDY2NDkyIiwiYWxnIjoiUlM1MTIifQ.eyJoY2MiOiJVUyIsInN1YiI6ImZmZmZmZmZmNTllODQwMDllNGIwMDg5MDgwOTZkMjllIiwidHlwZSI6ImF0IiwiZXhwIjoxNTI3NjAwNTMwLCJpYXQiOjE1Mjc1ODk3MzAsInNlc3NpZCI6IjA3YzBhYmU2LWIwODQtNDE0My1hNjEwLWU5ZmUxYzIzNTI3YSJ9.ax6YGs2P6JOYYsRljfTlYqhhudwPQgLCTIAhxhBwSZMytV5VOVZAYbkgcaAKEX7HV0HBN8DdZlBbo8eQQNmFQ76qYulnHSv1udPrW6Tb6qCziuZ3mPdcNG5UT3xTEOhU-eSewMeS_M5oFheTjTMf7luIjlp7fGwHu4lWgUhGKX4\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Tue, 29 May 2018 10:28:49 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 173,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 6,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Activity API in Aggregation Service Specification",
			"fileName": "C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Staging BVT\\Aggregation Service\\Activity API in Aggregation Service.spec",
			"tags": [
				"aggregation_service",
				"activity",
				"ci_ready"
			],
			"executionTime": 1556,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Sending a new activity information using valid payload",
					"tags": [],
					"executionTime": 1556,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a my deck with all types of 9 questions",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
									"executionTime": 1556,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 222,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://10.199.253.187:8085/api/decks",
											"HTTP Method is: POST"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"\"null\""
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"0"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"osan"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 79,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": null,\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInformation\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00\",\n    \"notificationFrequency\": \"0\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"osan\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1253,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
											"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/decks",
											"HTTP Method is: POST",
											"Response Time is: 798ms",
											"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
											"Response Headers are: \ncorrelation-id=56f3216e-8b02-4759-b088-eed1c9da9a6a\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:28:52 GMT"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
										"executionTime": 1556,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"spec",
													"myDeckIdWith9Questions",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId2",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create All Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"ALL"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId5",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId8",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"questionId",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Activity API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"n",
											"",
											"",
											"ffffffff59db8f51e4b0c1f4de01b2e2"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"spec",
											"myDeckIdWith9Questions",
											"deckId2"
										]
									},
									{
										"cells": [
											"#isRefreshDeck",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#activity1Id",
											"n",
											"",
											"",
											"4868b82a-24a1-4e03-b45a-c11e616ad28c"
										]
									},
									{
										"cells": [
											"#activity1CardId",
											"y",
											"scenario",
											"cardId2",
											""
										]
									},
									{
										"cells": [
											"#activity1CardType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#activity1StartTime",
											"n",
											"",
											"",
											"2017-10-31T12:15:00.000Z"
										]
									},
									{
										"cells": [
											"#activity1EndTime",
											"n",
											"",
											"",
											"2017-10-31T12:15:00.000Z"
										]
									},
									{
										"cells": [
											"#activity1SessionId",
											"n",
											"",
											"",
											"4868b82a-24a1-4e03-b45a-c11e616ad28c"
										]
									},
									{
										"cells": [
											"#activity1EventType1",
											"n",
											"",
											"",
											"FAVORITE"
										]
									},
									{
										"cells": [
											"#activity1EventTime1",
											"n",
											"",
											"",
											"2017-10-31T12:15:00.000Z"
										]
									},
									{
										"cells": [
											"#activity1EventType2",
											"n",
											"",
											"",
											"ANSWERED"
										]
									},
									{
										"cells": [
											"#activity1EventTime2",
											"n",
											"",
											"",
											"2017-10-31T12:15:00.000Z"
										]
									},
									{
										"cells": [
											"#score",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#activity2Id",
											"n",
											"",
											"",
											"4868b82a-24a1-4e03-b45a-c11e616ad28c"
										]
									},
									{
										"cells": [
											"#activity2CardId",
											"y",
											"scenario",
											"cardId8",
											""
										]
									},
									{
										"cells": [
											"#activity2CardType",
											"n",
											"",
											"",
											"multipleChoice"
										]
									},
									{
										"cells": [
											"#activity2StartTime",
											"n",
											"",
											"",
											"2017-10-31T12:15:00.000Z"
										]
									},
									{
										"cells": [
											"#activity2EndTime",
											"n",
											"",
											"",
											"2017-10-31T12:15:00.000Z"
										]
									},
									{
										"cells": [
											"#activity2SessionId",
											"n",
											"",
											"",
											"4868b82a-24a1-4e03-b45a-c11e616ad28c"
										]
									},
									{
										"cells": [
											"#activity2EventType1",
											"n",
											"",
											"",
											"SKIPPED"
										]
									},
									{
										"cells": [
											"#activity2EventTime1",
											"n",
											"",
											"",
											"2017-10-31T12:15:00.000Z"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.mastery",
											"0.037037"
										]
									},
									{
										"cells": [
											"$.message",
											"Number of activities processed 2"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Deck Management in Aggregation Service Specification",
			"fileName": "C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Staging BVT\\Aggregation Service\\Deck Management in Aggregation Service.spec",
			"tags": [
				"bvt",
				"deck_management",
				"aggregation_service"
			],
			"executionTime": 1988,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Create a Deck only using deck title and userId",
					"tags": [],
					"executionTime": 1522,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Create a Deck using Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 168,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/decks",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"\"description\": \"#description\",",
											""
										]
									},
									{
										"cells": [
											"\"tags\": [",
											""
										]
									},
									{
										"cells": [
											"\"#tags1\"",
											""
										]
									},
									{
										"cells": [
											"\"subject\": {",
											""
										]
									},
									{
										"cells": [
											"\"id\": #subjectId,",
											""
										]
									},
									{
										"cells": [
											"\"name\": \"#subjectName\"",
											""
										]
									},
									{
										"cells": [
											"\"book\": {",
											""
										]
									},
									{
										"cells": [
											"\"bookTitle\": \"#bookTitle\",",
											""
										]
									},
									{
										"cells": [
											"\"bookAuthor\": \"#bookAuthor\",",
											""
										]
									},
									{
										"cells": [
											"\"chapter\": \"#bookChapter\"",
											""
										]
									},
									{
										"cells": [
											"\"purchaseInformation\": {",
											""
										]
									},
									{
										"cells": [
											"\"purchasedDate\": #purchasedDate,",
											""
										]
									},
									{
										"cells": [
											"\"price\": #purchaseInformationPrice,",
											""
										]
									},
									{
										"cells": [
											"\"sku\": \"#purchaseInformationsku\"",
											""
										]
									},
									{
										"cells": [
											"\"notificationSettings\": {",
											""
										]
									},
									{
										"cells": [
											"\"areNotificationsEnabled\": #areNotificationsEnabled,",
											""
										]
									},
									{
										"cells": [
											"\"notificationTime\": \"#notificationTime\",",
											""
										]
									},
									{
										"cells": [
											"\"notificationFrequency\": \"#notificationFrequency\"",
											""
										]
									},
									{
										"cells": [
											"\"examDate\": #examDate,",
											""
										]
									},
									{
										"cells": [
											"\"#userId\",",
											"\"Osanda Deshan\""
										]
									},
									{
										"cells": [
											"\"parentDeckId\": \"#parentDeckId\",",
											""
										]
									},
									{
										"cells": [
											"\"tempDeckId\": \"#tempDeckId\",",
											""
										]
									},
									{
										"cells": [
											"\"archived\": #archived,",
											""
										]
									},
									{
										"cells": [
											"\"categoryId\": \"#categoryId\",",
											""
										]
									},
									{
										"cells": [
											"\"cardPreview\": #cardPreview,",
											""
										]
									},
									{
										"cells": [
											"\"noOfCards\": #noOfCards,",
											""
										]
									},
									{
										"cells": [
											"\"progress\": #progress,",
											""
										]
									},
									{
										"cells": [
											"\"downloads\": #downloads,",
											""
										]
									},
									{
										"cells": [
											"\"deckAuthor\": \"#deckAuthorName\",",
											""
										]
									},
									{
										"cells": [
											"\"deckAuthorId\": \"#deckAuthorId\",",
											""
										]
									},
									{
										"cells": [
											"\"thumbnailUrl\": \"#thumbnailUrl\",",
											""
										]
									},
									{
										"cells": [
											"\"status\": \"#status\",",
											""
										]
									},
									{
										"cells": [
											"\"starred\": #starred",
											""
										]
									},
									{
										"cells": [
											"],",
											""
										]
									},
									{
										"cells": [
											"},",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 224,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \n  \n    \n  \n  \n    \n    \n  \n  \n    \n    \n    \n  \n  \n    \n    \n    \n  \n  \n    \n    \n    \n  \n  \n  \n  \"userId\": \"Osanda Deshan\"\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1128,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/decks",
									"HTTP Method is: POST",
									"Response Time is: 796ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=5c4f7ea6-2a72-4f6b-b861-5561dc91fb6b\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:28:54 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"$.userId",
											"Osanda Deshan"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"spec",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Edit the previously created deck",
					"tags": [],
					"executionTime": 155,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Edit a Deck using Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 154,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/decks",
									"HTTP Method is: PUT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.lang.String.concat(String.java:2027)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.setPathParamsFromDataStores(CommonStepDefinitions.java:254)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.setPathParamsFromDataStores(AllStepsDefinitions.java:102)\n",
								"screenshot": "",
								"errorMessage": "java.lang.NullPointerException",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"null\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"#description",
											"\"null\""
										]
									},
									{
										"cells": [
											"#tags1",
											"API tag1"
										]
									},
									{
										"cells": [
											"#subjectId",
											"2"
										]
									},
									{
										"cells": [
											"#subjectName",
											"API Testing3"
										]
									},
									{
										"cells": [
											"#bookTitle",
											"Automation3"
										]
									},
									{
										"cells": [
											"#bookAuthor",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"#bookChapter",
											"Chap. 04"
										]
									},
									{
										"cells": [
											"#purchasedDate",
											"1512021142001"
										]
									},
									{
										"cells": [
											"#purchaseInformationPrice",
											"777"
										]
									},
									{
										"cells": [
											"#purchaseInformationsku",
											"com.pearson.smartflashcards.test3"
										]
									},
									{
										"cells": [
											"#areNotificationsEnabled",
											"true"
										]
									},
									{
										"cells": [
											"#notificationTime",
											"08:00"
										]
									},
									{
										"cells": [
											"#notificationFrequency",
											"0"
										]
									},
									{
										"cells": [
											"#examDate",
											"1512021142000"
										]
									},
									{
										"cells": [
											"#userId",
											"34"
										]
									},
									{
										"cells": [
											"#parentDeckId",
											"5"
										]
									},
									{
										"cells": [
											"#tempDeckId",
											"999"
										]
									},
									{
										"cells": [
											"#archived",
											"false"
										]
									},
									{
										"cells": [
											"#cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"#noOfCards",
											"2"
										]
									},
									{
										"cells": [
											"#progress",
											"3"
										]
									},
									{
										"cells": [
											"#downloads",
											"12"
										]
									},
									{
										"cells": [
											"#deckAuthorName",
											"Osanda"
										]
									},
									{
										"cells": [
											"#deckAuthorId",
											"6"
										]
									},
									{
										"cells": [
											"#thumbnailUrl",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#status",
											"Closed"
										]
									},
									{
										"cells": [
											"#starred",
											"true"
										]
									},
									{
										"cells": [
											"#categoryId",
											"5a5db30a12ef181b0af109ba"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"$.tags[0]",
											"API tag1"
										]
									},
									{
										"cells": [
											"$.book.bookTitle",
											"Automation3"
										]
									},
									{
										"cells": [
											"$.book.bookAuthor",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"$.book.chapter",
											"Chap. 04"
										]
									},
									{
										"cells": [
											"$.purchaseInfo.price",
											"0"
										]
									},
									{
										"cells": [
											"$.notificationSettings.areNotificationsEnabled",
											"true"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationTime",
											"08:00"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationFrequency",
											"0"
										]
									},
									{
										"cells": [
											"$.examDate",
											"1512021142000"
										]
									},
									{
										"cells": [
											"$.userId",
											"34"
										]
									},
									{
										"cells": [
											"$.parentDeckId",
											"5"
										]
									},
									{
										"cells": [
											"$.tempDeckId",
											"999"
										]
									},
									{
										"cells": [
											"$.archived",
											"false"
										]
									},
									{
										"cells": [
											"$.cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"$.noOfCards",
											"2"
										]
									},
									{
										"cells": [
											"$.progress",
											"3"
										]
									},
									{
										"cells": [
											"$.downloads",
											"12"
										]
									},
									{
										"cells": [
											"$.deckAuthor",
											"Osanda"
										]
									},
									{
										"cells": [
											"$.deckAuthorId",
											"6"
										]
									},
									{
										"cells": [
											"$.thumbnailUrl",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"$.status",
											"Closed"
										]
									},
									{
										"cells": [
											"$.expert",
											"false"
										]
									},
									{
										"cells": [
											"$.starred",
											"true"
										]
									},
									{
										"cells": [
											"$.categoryId",
											"5a5db30a12ef181b0af109ba"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Get the previously created deck",
					"tags": [],
					"executionTime": 143,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get a Deck using Aggregation service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 142,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/decks",
									"HTTP Method is: GET"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.lang.String.concat(String.java:2027)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.setPathParamsFromDataStores(CommonStepDefinitions.java:254)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.setPathParamsFromDataStores(AllStepsDefinitions.java:102)\n",
								"screenshot": "",
								"errorMessage": "java.lang.NullPointerException",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"null\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"$.tags[0]",
											"API tag1"
										]
									},
									{
										"cells": [
											"$.book.bookTitle",
											"Automation3"
										]
									},
									{
										"cells": [
											"$.book.bookAuthor",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"$.book.chapter",
											"Chap. 04"
										]
									},
									{
										"cells": [
											"$.purchaseInfo.price",
											"0"
										]
									},
									{
										"cells": [
											"$.notificationSettings.areNotificationsEnabled",
											"true"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationTime",
											"08:00"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationFrequency",
											"0"
										]
									},
									{
										"cells": [
											"$.examDate",
											"1512021142000"
										]
									},
									{
										"cells": [
											"$.userId",
											"34"
										]
									},
									{
										"cells": [
											"$.parentDeckId",
											"5"
										]
									},
									{
										"cells": [
											"$.tempDeckId",
											"999"
										]
									},
									{
										"cells": [
											"$.archived",
											"false"
										]
									},
									{
										"cells": [
											"$.cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"$.noOfCards",
											"2"
										]
									},
									{
										"cells": [
											"$.progress",
											"3"
										]
									},
									{
										"cells": [
											"$.downloads",
											"12"
										]
									},
									{
										"cells": [
											"$.deckAuthor",
											"Osanda"
										]
									},
									{
										"cells": [
											"$.deckAuthorId",
											"6"
										]
									},
									{
										"cells": [
											"$.thumbnailUrl",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"$.status",
											"Closed"
										]
									},
									{
										"cells": [
											"$.expert",
											"false"
										]
									},
									{
										"cells": [
											"$.starred",
											"true"
										]
									},
									{
										"cells": [
											"$.categoryId",
											"5a5db30a12ef181b0af109ba"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Delete the previously created deck",
					"tags": [],
					"executionTime": 168,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Deck using Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 164,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/decks",
									"HTTP Method is: DELETE"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "java.lang.String.concat(String.java:2027)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.setPathParamsFromDataStores(CommonStepDefinitions.java:254)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.setPathParamsFromDataStores(AllStepsDefinitions.java:102)\n",
								"screenshot": "",
								"errorMessage": "java.lang.NullPointerException",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"null\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 4,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Recommendation API in Aggregation Service Specification",
			"fileName": "C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Staging BVT\\Aggregation Service\\Recommendation API in Aggregation Service.spec",
			"tags": [
				"aggregation_service",
				"recommendation",
				"ci_ready"
			],
			"executionTime": 14523,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Recommendation for the next cards using valid personId and valid deckId",
					"tags": [],
					"executionTime": 1338,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 133,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"personId1"
										]
									},
									{
										"cells": [
											"#deckId",
											"deckId2"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 88,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": \"personId1\",\n  \"deck\": \"deckId2\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1117,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 803ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=86ba0169-a219-45a0-89b3-f2eb37ab5ff0\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:28:56 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [200] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.person",
											"personId1"
										]
									},
									{
										"cells": [
											"$.deck",
											"deckId2"
										]
									},
									{
										"cells": [
											"$.session.sessionSize",
											"20"
										]
									},
									{
										"cells": [
											"$.groups[0].groupId",
											"0"
										]
									},
									{
										"cells": [
											"$.groups[0].groupType",
											"UNPLAYED"
										]
									},
									{
										"cells": [
											"$.groups[1].groupId",
											"1"
										]
									},
									{
										"cells": [
											"$.groups[1].groupType",
											"INPLAY"
										]
									},
									{
										"cells": [
											"$.groups[1].minPercent",
											"0.0"
										]
									},
									{
										"cells": [
											"$.groups[1].maxPercent",
											"0.33333"
										]
									},
									{
										"cells": [
											"$.groups[2].groupId",
											"2"
										]
									},
									{
										"cells": [
											"$.groups[2].groupType",
											"INPLAY"
										]
									},
									{
										"cells": [
											"$.groups[2].minPercent",
											"0.33333"
										]
									},
									{
										"cells": [
											"$.groups[2].maxPercent",
											"0.46941"
										]
									},
									{
										"cells": [
											"$.groups[3].groupId",
											"3"
										]
									},
									{
										"cells": [
											"$.groups[3].groupType",
											"INPLAY"
										]
									},
									{
										"cells": [
											"$.groups[3].minPercent",
											"0.46941"
										]
									},
									{
										"cells": [
											"$.groups[3].maxPercent",
											"0.51941"
										]
									},
									{
										"cells": [
											"$.groups[4].groupId",
											"4"
										]
									},
									{
										"cells": [
											"$.groups[4].groupType",
											"MASTERED"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards using invalid personId and valid deckId",
					"tags": [],
					"executionTime": 1304,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 134,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"person"
										]
									},
									{
										"cells": [
											"#deckId",
											"deckId2"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 68,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": \"person\",\n  \"deck\": \"deckId2\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1102,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 820ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=a77a933e-8a13-4c30-839b-54ed37522dc1\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:28:58 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [200] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.person",
											"person"
										]
									},
									{
										"cells": [
											"$.deck",
											"deckId2"
										]
									},
									{
										"cells": [
											"$.session.sessionSize",
											"20"
										]
									},
									{
										"cells": [
											"$.groups[0].groupId",
											"0"
										]
									},
									{
										"cells": [
											"$.groups[0].groupType",
											"UNPLAYED"
										]
									},
									{
										"cells": [
											"$.groups[1].groupId",
											"1"
										]
									},
									{
										"cells": [
											"$.groups[1].groupType",
											"INPLAY"
										]
									},
									{
										"cells": [
											"$.groups[1].minPercent",
											"0.0"
										]
									},
									{
										"cells": [
											"$.groups[1].maxPercent",
											"0.33333"
										]
									},
									{
										"cells": [
											"$.groups[2].groupId",
											"2"
										]
									},
									{
										"cells": [
											"$.groups[2].groupType",
											"INPLAY"
										]
									},
									{
										"cells": [
											"$.groups[2].minPercent",
											"0.33333"
										]
									},
									{
										"cells": [
											"$.groups[2].maxPercent",
											"0.46941"
										]
									},
									{
										"cells": [
											"$.groups[3].groupId",
											"3"
										]
									},
									{
										"cells": [
											"$.groups[3].groupType",
											"INPLAY"
										]
									},
									{
										"cells": [
											"$.groups[3].minPercent",
											"0.46941"
										]
									},
									{
										"cells": [
											"$.groups[3].maxPercent",
											"0.51941"
										]
									},
									{
										"cells": [
											"$.groups[4].groupId",
											"4"
										]
									},
									{
										"cells": [
											"$.groups[4].groupType",
											"MASTERED"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards using empty personId and valid deckId",
					"tags": [],
					"executionTime": 1151,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 110,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											""
										]
									},
									{
										"cells": [
											"#deckId",
											"deckId2"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 56,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": \"\",\n  \"deck\": \"deckId2\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 984,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 783ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=f67e2adb-dce4-4f1f-b03d-19ead359bf99\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:28:59 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [400] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.code",
											"400"
										]
									},
									{
										"cells": [
											"$.description",
											"person: username is required"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards using null personId and valid deckId",
					"tags": [],
					"executionTime": 1781,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 272,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"\"null\""
										]
									},
									{
										"cells": [
											"#deckId",
											"deckId2"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 144,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": null,\n  \"deck\": \"deckId2\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1364,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 776ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=63a983cb-7386-4823-8e7e-55aff479d9e0\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:29:01 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [400] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.code",
											"400"
										]
									},
									{
										"cells": [
											"$.description",
											"person: username is required"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards using valid personId and invalid deckId",
					"tags": [],
					"executionTime": 1576,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 250,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"personId1"
										]
									},
									{
										"cells": [
											"#deckId",
											"deckId999"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 119,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": \"personId1\",\n  \"deck\": \"deckId999\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1207,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 782ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=76d62d54-c4b9-46f0-925c-d5c3381fe7fc\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:29:02 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"404\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [404] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.code",
											"404"
										]
									},
									{
										"cells": [
											"$.description",
											"{  \"status\" : 404,  \"code\" : 1300,  \"category\" : \"Validation Error\",  \"reason\" : \"Cannot find requested entity\",  \"messages\" : [ \"requested deck deckId999 not found\" ]}"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards using valid personId and non-existing deckId",
					"tags": [],
					"executionTime": 1309,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 161,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"personId3"
										]
									},
									{
										"cells": [
											"#deckId",
											"deckId4"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 71,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": \"personId3\",\n  \"deck\": \"deckId4\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1077,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 788ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=56f3216e-8b02-4759-b088-eed1c9da9a6a\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:29:04 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"404\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [404] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.code",
											"404"
										]
									},
									{
										"cells": [
											"$.description",
											"{  \"status\" : 404,  \"code\" : 1300,  \"category\" : \"Validation Error\",  \"reason\" : \"Cannot find requested entity\",  \"messages\" : [ \"requested deck deckId4 not found\" ]}"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards using valid personId and empty deckId",
					"tags": [],
					"executionTime": 1928,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 397,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"personId1"
										]
									},
									{
										"cells": [
											"#deckId",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 159,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": \"personId1\",\n  \"deck\": \"\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1372,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 780ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=a77a933e-8a13-4c30-839b-54ed37522dc1\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:29:06 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [400] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.code",
											"400"
										]
									},
									{
										"cells": [
											"$.description",
											"deck: deck id is required"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards using valid personId and null deckId",
					"tags": [],
					"executionTime": 1437,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 211,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"personId1"
										]
									},
									{
										"cells": [
											"#deckId",
											"\"null\""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 111,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": \"personId1\",\n  \"deck\": null\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1115,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 766ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=f67e2adb-dce4-4f1f-b03d-19ead359bf99\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:29:07 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [400] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.code",
											"400"
										]
									},
									{
										"cells": [
											"$.description",
											"deck: deck id is required"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards only using valid personId",
					"tags": [],
					"executionTime": 1506,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 218,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#personId",
											"personId1"
										]
									},
									{
										"cells": [
											",",
											""
										]
									},
									{
										"cells": [
											"\"deck\": \"#deckId\"",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 99,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"person\": \"personId1\"\n  \n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1189,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 806ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=63a983cb-7386-4823-8e7e-55aff479d9e0\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:29:09 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [400] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.code",
											"400"
										]
									},
									{
										"cells": [
											"$.description",
											"deck: deck id is required"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Recommendation for the next cards only using valid deckId",
					"tags": [],
					"executionTime": 1193,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Recommendation API in Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 95,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"\"person\": \"#personId\",",
											""
										]
									},
									{
										"cells": [
											"#deckId",
											"deckId2"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 58,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \n  \"deck\": \"deckId2\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1039,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8085/api/learninganalytics/recommendations",
									"HTTP Method is: POST",
									"Response Time is: 795ms",
									"Response is: \n{\n    \"status\": \"Error\",\n    \"code\": \"401\",\n    \"message\": \"Unauthorized Request\"\n}",
									"Response Headers are: \ncorrelation-id=76d62d54-c4b9-46f0-925c-d5c3381fe7fc\nContent-Type=application/json;charset=ISO-8859-1\nContent-Length=77\nDate=Tue, 29 May 2018 10:29:10 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.isResponseStatusCodeEqualTo(BaseClass.java:506)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.isResponseStatusCodeEqualTo(CommonStepDefinitions.java:286)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:133)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [400] but found [401]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.code",
											"400"
										]
									},
									{
										"cells": [
											"$.description",
											"person: username is required"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 10,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Deck Management in Deck Service Specification",
			"fileName": "C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Staging BVT\\Deck Service\\Deck Management in Deck Service.spec",
			"tags": [
				"bvt",
				"deck_management",
				"deck_service"
			],
			"executionTime": 6249,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Create a Deck only using deck title and userId",
					"tags": [],
					"executionTime": 1771,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 293,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"\"description\": \"#description\",",
											""
										]
									},
									{
										"cells": [
											"\"tags\": [",
											""
										]
									},
									{
										"cells": [
											"\"#tags1\"",
											""
										]
									},
									{
										"cells": [
											"\"subject\": {",
											""
										]
									},
									{
										"cells": [
											"\"id\": #subjectId,",
											""
										]
									},
									{
										"cells": [
											"\"name\": \"#subjectName\"",
											""
										]
									},
									{
										"cells": [
											"\"book\": {",
											""
										]
									},
									{
										"cells": [
											"\"bookTitle\": \"#bookTitle\",",
											""
										]
									},
									{
										"cells": [
											"\"bookAuthor\": \"#bookAuthor\",",
											""
										]
									},
									{
										"cells": [
											"\"chapter\": \"#bookChapter\"",
											""
										]
									},
									{
										"cells": [
											"\"purchaseInformation\": {",
											""
										]
									},
									{
										"cells": [
											"\"purchasedDate\": #purchasedDate,",
											""
										]
									},
									{
										"cells": [
											"\"price\": #purchaseInformationPrice,",
											""
										]
									},
									{
										"cells": [
											"\"sku\": \"#purchaseInformationsku\"",
											""
										]
									},
									{
										"cells": [
											"\"notificationSettings\": {",
											""
										]
									},
									{
										"cells": [
											"\"areNotificationsEnabled\": #areNotificationsEnabled,",
											""
										]
									},
									{
										"cells": [
											"\"notificationTime\": \"#notificationTime\",",
											""
										]
									},
									{
										"cells": [
											"\"notificationFrequency\": \"#notificationFrequency\"",
											""
										]
									},
									{
										"cells": [
											"\"examDate\": #examDate,",
											""
										]
									},
									{
										"cells": [
											"\"#userId\",",
											"\"Osanda Deshan\""
										]
									},
									{
										"cells": [
											"\"parentDeckId\": \"#parentDeckId\",",
											""
										]
									},
									{
										"cells": [
											"\"tempDeckId\": \"#tempDeckId\",",
											""
										]
									},
									{
										"cells": [
											"\"archived\": #archived,",
											""
										]
									},
									{
										"cells": [
											"\"categoryId\": \"#categoryId\",",
											""
										]
									},
									{
										"cells": [
											"\"cardPreview\": #cardPreview,",
											""
										]
									},
									{
										"cells": [
											"\"noOfCards\": #noOfCards,",
											""
										]
									},
									{
										"cells": [
											"\"progress\": #progress,",
											""
										]
									},
									{
										"cells": [
											"\"downloads\": #downloads,",
											""
										]
									},
									{
										"cells": [
											"\"deckAuthor\": \"#deckAuthorName\",",
											""
										]
									},
									{
										"cells": [
											"\"deckAuthorId\": \"#deckAuthorId\",",
											""
										]
									},
									{
										"cells": [
											"\"thumbnailUrl\": \"#thumbnailUrl\",",
											""
										]
									},
									{
										"cells": [
											"\"status\": \"#status\",",
											""
										]
									},
									{
										"cells": [
											"\"starred\": #starred",
											""
										]
									},
									{
										"cells": [
											"],",
											""
										]
									},
									{
										"cells": [
											"},",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 140,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \n  \n    \n  \n  \n    \n    \n  \n  \n    \n    \n    \n  \n  \n    \n    \n    \n  \n  \n    \n    \n    \n  \n  \n  \n  \"userId\": \"Osanda Deshan\"\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1332,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks",
									"HTTP Method is: POST",
									"Response Time is: 823ms",
									"Response is: \n{\n    \"id\": \"5b0d2b782e02d81a0762dad9\",\n    \"title\": \"API Deck3\",\n    \"book\": {\n        \n    },\n    \"purchaseInfo\": {\n        \"price\": 0.0\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": false\n    },\n    \"epochTime\": {\n        \"createdAt\": 1527589752264,\n        \"updatedAt\": 1527589752264\n    },\n    \"examReminder\": {\n        \n    },\n    \"userId\": \"Osanda Deshan\",\n    \"createdAt\": \"2018-05-29T10:29:12.264Z\",\n    \"updatedAt\": \"2018-05-29T10:29:12.268Z\",\n    \"archived\": false,\n    \"cardPreview\": false,\n    \"noOfCards\": 0,\n    \"progress\": 0,\n    \"downloads\": 0,\n    \"starred\": false,\n    \"userDeck\": true,\n    \"expert\": false\n}",
									"Response Headers are: \nX-Application-Context=application:dev:8090\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Tue, 29 May 2018 10:29:12 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"$.userId",
											"Osanda Deshan"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"spec",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"5b0d2b782e02d81a0762dad9\" is successfully saved as a text in Specification Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Edit the previously created deck",
					"tags": [],
					"executionTime": 1566,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 10,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Edit a Deck using Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 253,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks",
									"HTTP Method is: PUT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"5b0d2b782e02d81a0762dad9\"",
									"Path parameters which will append to the request URL:/5b0d2b782e02d81a0762dad9"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"#description",
											"\"null\""
										]
									},
									{
										"cells": [
											"#tags1",
											"API tag1"
										]
									},
									{
										"cells": [
											"#subjectId",
											"2"
										]
									},
									{
										"cells": [
											"#subjectName",
											"API Testing3"
										]
									},
									{
										"cells": [
											"#bookTitle",
											"Automation3"
										]
									},
									{
										"cells": [
											"#bookAuthor",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"#bookChapter",
											"Chap. 04"
										]
									},
									{
										"cells": [
											"#purchasedDate",
											"1512021142001"
										]
									},
									{
										"cells": [
											"#purchaseInformationPrice",
											"777"
										]
									},
									{
										"cells": [
											"#purchaseInformationsku",
											"com.pearson.smartflashcards.test3"
										]
									},
									{
										"cells": [
											"#areNotificationsEnabled",
											"true"
										]
									},
									{
										"cells": [
											"#notificationTime",
											"08:00"
										]
									},
									{
										"cells": [
											"#notificationFrequency",
											"0"
										]
									},
									{
										"cells": [
											"#examDate",
											"1512021142000"
										]
									},
									{
										"cells": [
											"#userId",
											"34"
										]
									},
									{
										"cells": [
											"#parentDeckId",
											"5"
										]
									},
									{
										"cells": [
											"#tempDeckId",
											"999"
										]
									},
									{
										"cells": [
											"#archived",
											"true"
										]
									},
									{
										"cells": [
											"#cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"#noOfCards",
											"2"
										]
									},
									{
										"cells": [
											"#progress",
											"3"
										]
									},
									{
										"cells": [
											"#downloads",
											"12"
										]
									},
									{
										"cells": [
											"#deckAuthorName",
											"Osanda"
										]
									},
									{
										"cells": [
											"#deckAuthorId",
											"6"
										]
									},
									{
										"cells": [
											"#thumbnailUrl",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#status",
											"Closed"
										]
									},
									{
										"cells": [
											"#starred",
											"true"
										]
									},
									{
										"cells": [
											"#categoryId",
											"5a5db30a12ef181b0af109ba"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 126,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": null,\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInformation\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00\",\n    \"notificationFrequency\": \"0\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1165,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks/5b0d2b782e02d81a0762dad9",
									"HTTP Method is: PUT",
									"Response Time is: 813ms",
									"Response is: \n{\n    \"id\": \"5b0d2b782e02d81a0762dad9\",\n    \"title\": \"API Deck3\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"price\": 0.0\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00\",\n        \"notificationFrequency\": \"0\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1527589752264,\n        \"updatedAt\": 1527589754036\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-05-29T10:29:12.264Z\",\n    \"updatedAt\": \"2018-05-29T10:29:14.037Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}",
									"Response Headers are: \nX-Application-Context=application:dev:8090\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Tue, 29 May 2018 10:29:14 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"$.tags[0]",
											"API tag1"
										]
									},
									{
										"cells": [
											"$.book.bookTitle",
											"Automation3"
										]
									},
									{
										"cells": [
											"$.book.bookAuthor",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"$.book.chapter",
											"Chap. 04"
										]
									},
									{
										"cells": [
											"$.purchaseInfo.price",
											"0"
										]
									},
									{
										"cells": [
											"$.notificationSettings.areNotificationsEnabled",
											"true"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationTime",
											"08:00"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationFrequency",
											"0"
										]
									},
									{
										"cells": [
											"$.examDate",
											"1512021142000"
										]
									},
									{
										"cells": [
											"$.userId",
											"34"
										]
									},
									{
										"cells": [
											"$.parentDeckId",
											"5"
										]
									},
									{
										"cells": [
											"$.tempDeckId",
											"999"
										]
									},
									{
										"cells": [
											"$.archived",
											"true"
										]
									},
									{
										"cells": [
											"$.cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"$.noOfCards",
											"2"
										]
									},
									{
										"cells": [
											"$.progress",
											"3"
										]
									},
									{
										"cells": [
											"$.downloads",
											"12"
										]
									},
									{
										"cells": [
											"$.deckAuthor",
											"Osanda"
										]
									},
									{
										"cells": [
											"$.deckAuthorId",
											"6"
										]
									},
									{
										"cells": [
											"$.thumbnailUrl",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"$.status",
											"Closed"
										]
									},
									{
										"cells": [
											"$.expert",
											"false"
										]
									},
									{
										"cells": [
											"$.starred",
											"true"
										]
									},
									{
										"cells": [
											"$.categoryId",
											"5a5db30a12ef181b0af109ba"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.jsonPathAssertionEquals(BaseClass.java:623)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.jsonPathAssertionEquals(CommonStepDefinitions.java:367)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.jsonPathAssertionEquals(AllStepsDefinitions.java:163)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: Expected value for the JSON Path of \"$.purchaseInfo.price\" is not equal to the Actual value.\n expected [0] but found [0.0]",
								"executionTime": 11,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Get the previously created deck",
					"tags": [],
					"executionTime": 1580,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get a Deck using Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 276,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks",
									"HTTP Method is: GET"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"5b0d2b782e02d81a0762dad9\"",
									"Path parameters which will append to the request URL:/5b0d2b782e02d81a0762dad9"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1298,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks/5b0d2b782e02d81a0762dad9",
									"HTTP Method is: GET",
									"Response Time is: 823ms",
									"Response is: \n{\n    \"id\": \"5b0d2b782e02d81a0762dad9\",\n    \"title\": \"API Deck3\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n    \"book\": {\n        \"bookTitle\": \"Automation3\",\n        \"bookAuthor\": \"Osanda Nimalarathna\",\n        \"chapter\": \"Chap. 04\"\n    },\n    \"purchaseInfo\": {\n        \"price\": 0.0\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": true,\n        \"notificationTime\": \"08:00\",\n        \"notificationFrequency\": \"0\"\n    },\n    \"epochTime\": {\n        \"createdAt\": 1527589752264,\n        \"updatedAt\": 1527589754036\n    },\n    \"examReminder\": {\n        \n    },\n    \"examDate\": 1512021142000,\n    \"userId\": \"34\",\n    \"parentDeckId\": \"5\",\n    \"tempDeckId\": \"999\",\n    \"createdAt\": \"2018-05-29T10:29:12.264Z\",\n    \"updatedAt\": \"2018-05-29T10:29:14.037Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 2,\n    \"progress\": 3,\n    \"downloads\": 12,\n    \"deckAuthor\": \"Osanda\",\n    \"deckAuthorId\": \"6\",\n    \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n    \"status\": \"Closed\",\n    \"starred\": true,\n    \"userDeck\": true,\n    \"expert\": false\n}",
									"Response Headers are: \nX-Application-Context=application:dev:8090\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Tue, 29 May 2018 10:29:15 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Deck3"
										]
									},
									{
										"cells": [
											"$.tags[0]",
											"API tag1"
										]
									},
									{
										"cells": [
											"$.book.bookTitle",
											"Automation3"
										]
									},
									{
										"cells": [
											"$.book.bookAuthor",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"$.book.chapter",
											"Chap. 04"
										]
									},
									{
										"cells": [
											"$.purchaseInfo.price",
											"0"
										]
									},
									{
										"cells": [
											"$.notificationSettings.areNotificationsEnabled",
											"true"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationTime",
											"08:00"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationFrequency",
											"0"
										]
									},
									{
										"cells": [
											"$.examDate",
											"1512021142000"
										]
									},
									{
										"cells": [
											"$.userId",
											"34"
										]
									},
									{
										"cells": [
											"$.parentDeckId",
											"5"
										]
									},
									{
										"cells": [
											"$.tempDeckId",
											"999"
										]
									},
									{
										"cells": [
											"$.archived",
											"true"
										]
									},
									{
										"cells": [
											"$.cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"$.noOfCards",
											"2"
										]
									},
									{
										"cells": [
											"$.progress",
											"3"
										]
									},
									{
										"cells": [
											"$.downloads",
											"12"
										]
									},
									{
										"cells": [
											"$.deckAuthor",
											"Osanda"
										]
									},
									{
										"cells": [
											"$.deckAuthorId",
											"6"
										]
									},
									{
										"cells": [
											"$.thumbnailUrl",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"$.status",
											"Closed"
										]
									},
									{
										"cells": [
											"$.expert",
											"false"
										]
									},
									{
										"cells": [
											"$.starred",
											"true"
										]
									},
									{
										"cells": [
											"$.categoryId",
											"5a5db30a12ef181b0af109ba"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.jsonPathAssertionEquals(BaseClass.java:623)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.jsonPathAssertionEquals(CommonStepDefinitions.java:367)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.jsonPathAssertionEquals(AllStepsDefinitions.java:163)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: Expected value for the JSON Path of \"$.purchaseInfo.price\" is not equal to the Actual value.\n expected [0] but found [0.0]",
								"executionTime": 4,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Delete the previously careated deck",
					"tags": [],
					"executionTime": 1332,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Deck using Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 180,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/decks",
									"HTTP Method is: DELETE"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"5b0d2b782e02d81a0762dad9\"",
									"Path parameters which will append to the request URL:/5b0d2b782e02d81a0762dad9"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1150,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/decks/5b0d2b782e02d81a0762dad9",
									"HTTP Method is: DELETE",
									"Response Time is: 794ms",
									"No Content Response",
									"Response Headers are: \nX-Application-Context=application:dev:8090\nDate=Tue, 29 May 2018 10:29:17 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 2,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Expert Deck Management in Expert Deck Service Specification",
			"fileName": "C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Staging BVT\\Expert Deck Service\\Expert Deck Management in Expert Deck Service.spec",
			"tags": [
				"bvt",
				"expert_deck_management",
				"expert_deck_service"
			],
			"executionTime": 4769,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Create an Expert Deck using all the attributes in the contract",
					"tags": [],
					"executionTime": 1195,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Create An Expert Deck using Expert Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 102,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/store",
									"HTTP Method is: POST"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#isArchived",
											"true"
										]
									},
									{
										"cells": [
											"#bookAuthorName",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"#bookTitle",
											"API Deck3"
										]
									},
									{
										"cells": [
											"#tags",
											"API tag1"
										]
									},
									{
										"cells": [
											"#time",
											"08:00 AM"
										]
									},
									{
										"cells": [
											"#chapter",
											"Ch. 02"
										]
									},
									{
										"cells": [
											"#subjectId",
											"21312wrwe23423df"
										]
									},
									{
										"cells": [
											"#cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"#categoryId",
											"345345345345"
										]
									},
									{
										"cells": [
											"#deckAuthorName",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"#deckAuthorId",
											"234325345345"
										]
									},
									{
										"cells": [
											"#description",
											"Deck has been created via an automated script"
										]
									},
									{
										"cells": [
											"#downloads",
											"328"
										]
									},
									{
										"cells": [
											"#examDate",
											"2018-01-19T07:10:20.943Z"
										]
									},
									{
										"cells": [
											"#keywords",
											"API"
										]
									},
									{
										"cells": [
											"#noOfCards",
											"12"
										]
									},
									{
										"cells": [
											"#areNotificationsEnabled",
											"false"
										]
									},
									{
										"cells": [
											"#notificationFrequency",
											"3 times a day"
										]
									},
									{
										"cells": [
											"#notificationTime",
											"09.30 AM"
										]
									},
									{
										"cells": [
											"#parentDeckId",
											"13123123dsfsd231"
										]
									},
									{
										"cells": [
											"#progress",
											"45"
										]
									},
									{
										"cells": [
											"#price",
											"99"
										]
									},
									{
										"cells": [
											"#purchasedDate",
											"2018-01-19T07:10:20.943Z"
										]
									},
									{
										"cells": [
											"#sku",
											"test.purchase1"
										]
									},
									{
										"cells": [
											"#starred",
											"false"
										]
									},
									{
										"cells": [
											"#status",
											"In Progress"
										]
									},
									{
										"cells": [
											"#tags1",
											"API tag"
										]
									},
									{
										"cells": [
											"#tempDeckId",
											"3242dfs435fdgdfg34"
										]
									},
									{
										"cells": [
											"#thumbnailUrl",
											"http://somehost/someimg.jpg"
										]
									},
									{
										"cells": [
											"#title",
											"API Automation using MaxSoft ATA Framework"
										]
									},
									{
										"cells": [
											"#userId",
											"osan"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 64,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"archived\": true,\n  \"book\": {\n    \"bookAuthor\": \"Osanda Deshan\",\n    \"bookTitle\": \"API Deck3\",\n    \"chapter\": \"Ch. 02\"\n  },\n  \"cardPreview\": true,\n  \"categoryId\": \"345345345345\",\n  \"deckAuthor\": \"Osanda Nimalarathna\",\n  \"deckAuthorId\": \"234325345345\",\n  \"description\": \"Deck has been created via an automated script\",\n  \"downloads\": 328,\n  \"epochTime\": {\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\"\n  },\n  \"examDate\": \"2018-01-19T07:10:20.943Z\",\n  \"examReminder\": {\n    \"endDate\": \"2018-01-30T04:03:33.042Z\",\n    \"startDate\": \"2018-01-30T04:03:33.042Z\",\n    \"time\": \"08:00 AM\"\n  },\n  \"expert\": true,\n  \"expertDeck\": true,\n  \"keywords\": [\n    \"API\"\n  ],\n  \"noOfCards\": 12,\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": false,\n    \"notificationFrequency\": \"3 times a day\",\n    \"notificationTime\": \"09.30 AM\"\n  },\n  \"parentDeckId\": \"13123123dsfsd231\",\n  \"progress\": 45,\n  \"purchaseInfo\": {\n    \"price\": 99,\n    \"purchasedDate\": \"2018-01-30T04:03:33.042Z\",\n    \"sku\": \"test.purchase1\"\n  },\n  \"starred\": false,\n  \"status\": \"In Progress\",\n  \"subjectId\": \"21312wrwe23423df\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"tempDeckId\": \"3242dfs435fdgdfg34\",\n  \"thumbnailUrl\": \"http://somehost/someimg.jpg\",\n  \"title\": \"API Automation using MaxSoft ATA Framework\",\n  \"updatedAt\": \"2018-01-30T04:03:33.042Z\",\n  \"userId\": \"osan\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1023,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/store",
									"HTTP Method is: POST",
									"Response Time is: 780ms",
									"Response is: \n{\n    \"id\": \"5b0d2b7e2e02d81a0762dada\",\n    \"title\": \"API Automation using MaxSoft ATA Framework\",\n    \"description\": \"Deck has been created via an automated script\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"keywords\": [\n        \"API\"\n    ],\n    \"subjectId\": \"21312wrwe23423df\",\n    \"categoryId\": \"345345345345\",\n    \"book\": {\n        \"bookTitle\": \"API Deck3\",\n        \"bookAuthor\": \"Osanda Deshan\",\n        \"chapter\": \"Ch. 02\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1517285013042,\n        \"price\": 99.0,\n        \"sku\": \"test.purchase1\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": false,\n        \"notificationTime\": \"09.30 AM\",\n        \"notificationFrequency\": \"3 times a day\"\n    },\n    \"epochTime\": {\n        \"createdAt\": null,\n        \"updatedAt\": null\n    },\n    \"examReminder\": {\n        \"startDate\": 1517285013042,\n        \"endDate\": 1517285013042,\n        \"time\": \"08:00 AM\"\n    },\n    \"examDate\": 1516345820943,\n    \"userId\": \"osan\",\n    \"parentDeckId\": \"13123123dsfsd231\",\n    \"tempDeckId\": \"3242dfs435fdgdfg34\",\n    \"createdAt\": \"2018-05-29T10:29:18.364Z\",\n    \"updatedAt\": \"2018-05-29T10:29:18.364Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 12,\n    \"progress\": 45,\n    \"downloads\": 328,\n    \"deckAuthor\": \"Osanda Nimalarathna\",\n    \"deckAuthorId\": \"234325345345\",\n    \"thumbnailUrl\": \"http://somehost/someimg.jpg\",\n    \"status\": \"In Progress\",\n    \"starred\": false,\n    \"expertDeck\": true,\n    \"expert\": true\n}",
									"Response Headers are: \nX-Application-Context=application:dev:8090\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Tue, 29 May 2018 10:29:18 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Automation using MaxSoft ATA Framework"
										]
									},
									{
										"cells": [
											"$.userId",
											"osan"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"spec",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"\"5b0d2b7e2e02d81a0762dada\" is successfully saved as a text in Specification Data Store [deckId]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Edit the previously created deck",
					"tags": [],
					"executionTime": 1236,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Edit An Expert Deck using Expert Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 98,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/store",
									"HTTP Method is: PUT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"5b0d2b7e2e02d81a0762dada\"",
									"Path parameters which will append to the request URL:/5b0d2b7e2e02d81a0762dada"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#isArchived",
											"true"
										]
									},
									{
										"cells": [
											"#bookAuthorName",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"#bookTitle",
											"API Deck3"
										]
									},
									{
										"cells": [
											"#tags",
											"API tag1"
										]
									},
									{
										"cells": [
											"#time",
											"08:00 AM"
										]
									},
									{
										"cells": [
											"#chapter",
											"Ch. 02"
										]
									},
									{
										"cells": [
											"#subjectId",
											"21312wrwe23423df"
										]
									},
									{
										"cells": [
											"#chapter",
											"Ch. 02"
										]
									},
									{
										"cells": [
											"#cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"#categoryId",
											"345345345345"
										]
									},
									{
										"cells": [
											"#deckAuthorName",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"#deckAuthorId",
											"234325345345"
										]
									},
									{
										"cells": [
											"#description",
											"Deck has been created via an automated script"
										]
									},
									{
										"cells": [
											"#downloads",
											"328"
										]
									},
									{
										"cells": [
											"#examDate",
											"2018-01-19T07:10:20.943Z"
										]
									},
									{
										"cells": [
											"#keywords",
											"API"
										]
									},
									{
										"cells": [
											"#noOfCards",
											"12"
										]
									},
									{
										"cells": [
											"#areNotificationsEnabled",
											"false"
										]
									},
									{
										"cells": [
											"#notificationFrequency",
											"3 times a day"
										]
									},
									{
										"cells": [
											"#notificationTime",
											"09.30 AM"
										]
									},
									{
										"cells": [
											"#parentDeckId",
											"13123123dsfsd231"
										]
									},
									{
										"cells": [
											"#progress",
											"45"
										]
									},
									{
										"cells": [
											"#price",
											"99"
										]
									},
									{
										"cells": [
											"#purchasedDate",
											"2018-01-19T07:10:20.943Z"
										]
									},
									{
										"cells": [
											"#sku",
											"test.purchase1"
										]
									},
									{
										"cells": [
											"#starred",
											"false"
										]
									},
									{
										"cells": [
											"#status",
											"In Progress"
										]
									},
									{
										"cells": [
											"#tags1",
											"API tag"
										]
									},
									{
										"cells": [
											"#tempDeckId",
											"3242dfs435fdgdfg34"
										]
									},
									{
										"cells": [
											"#thumbnailUrl",
											"http://somehost/someimg.jpg"
										]
									},
									{
										"cells": [
											"#title",
											"API Automation using MaxSoft ATA Framework"
										]
									},
									{
										"cells": [
											"#userId",
											"osan"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 62,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"archived\": true,\n  \"book\": {\n    \"bookAuthor\": \"Osanda Deshan\",\n    \"bookTitle\": \"API Deck3\",\n    \"chapter\": \"Ch. 02\"\n  },\n  \"cardPreview\": true,\n  \"categoryId\": \"345345345345\",\n  \"createdAt\": \"#createdAt\",\n  \"deckAuthor\": \"Osanda Nimalarathna\",\n  \"deckAuthorId\": \"234325345345\",\n  \"description\": \"Deck has been created via an automated script\",\n  \"downloads\": 328,\n  \"epochTime\": {\n    \"createdAt\": \"\",\n    \"updatedAt\": \"\"\n  },\n  \"examDate\": \"2018-01-30T04:03:33.042Z\",\n  \"examReminder\": {\n    \"endDate\": \"2018-01-30T04:03:33.042Z\",\n    \"startDate\": \"2018-01-30T04:03:33.042Z\",\n    \"time\": \"08:00 AM\"\n  },\n  \"expert\": true,\n  \"expertDeck\": true,\n  \"id\": \"#id\",\n  \"keywords\": [\n    \"API\"\n  ],\n  \"noOfCards\": 12,\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": false,\n    \"notificationFrequency\": \"3 times a day\",\n    \"notificationTime\": \"09.30 AM\"\n  },\n  \"parentDeckId\": \"13123123dsfsd231\",\n  \"progress\": 45,\n  \"purchaseInfo\": {\n    \"price\": 99,\n    \"purchasedDate\": \"2018-01-30T04:03:33.042Z\",\n    \"sku\": \"test.purchase1\"\n  },\n  \"starred\": false,\n  \"status\": \"In Progress\",\n  \"subjectId\": \"21312wrwe23423df\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"tempDeckId\": \"3242dfs435fdgdfg34\",\n  \"thumbnailUrl\": \"http://somehost/someimg.jpg\",\n  \"title\": \"API Automation using MaxSoft ATA Framework\",\n  \"updatedAt\": \"2018-01-30T04:03:33.042Z\",\n  \"userId\": \"osan\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1073,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/store/5b0d2b7e2e02d81a0762dada",
									"HTTP Method is: PUT",
									"Response Time is: 767ms",
									"Response is: \n{\n    \"id\": \"5b0d2b7e2e02d81a0762dada\",\n    \"title\": \"API Automation using MaxSoft ATA Framework\",\n    \"description\": \"Deck has been created via an automated script\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"keywords\": [\n        \"API\"\n    ],\n    \"subjectId\": \"21312wrwe23423df\",\n    \"categoryId\": \"345345345345\",\n    \"book\": {\n        \"bookTitle\": \"API Deck3\",\n        \"bookAuthor\": \"Osanda Deshan\",\n        \"chapter\": \"Ch. 02\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1517285013042,\n        \"price\": 99.0,\n        \"sku\": \"test.purchase1\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": false,\n        \"notificationTime\": \"09.30 AM\",\n        \"notificationFrequency\": \"3 times a day\"\n    },\n    \"epochTime\": {\n        \"createdAt\": null,\n        \"updatedAt\": null\n    },\n    \"examReminder\": {\n        \"startDate\": 1517285013042,\n        \"endDate\": 1517285013042,\n        \"time\": \"08:00 AM\"\n    },\n    \"examDate\": 1517285013042,\n    \"userId\": \"osan\",\n    \"parentDeckId\": \"13123123dsfsd231\",\n    \"tempDeckId\": \"3242dfs435fdgdfg34\",\n    \"createdAt\": \"2018-05-29T10:29:18.364Z\",\n    \"updatedAt\": \"2018-05-29T10:29:19.671Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 12,\n    \"progress\": 45,\n    \"downloads\": 328,\n    \"deckAuthor\": \"Osanda Nimalarathna\",\n    \"deckAuthorId\": \"234325345345\",\n    \"thumbnailUrl\": \"http://somehost/someimg.jpg\",\n    \"status\": \"In Progress\",\n    \"starred\": false,\n    \"expertDeck\": true,\n    \"expert\": true\n}",
									"Response Headers are: \nX-Application-Context=application:dev:8090\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Tue, 29 May 2018 10:29:19 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Automation using MaxSoft ATA Framework"
										]
									},
									{
										"cells": [
											"$.userId",
											"osan"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Get the previously created deck",
					"tags": [],
					"executionTime": 1152,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Search Expert Decks using Expert Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 74,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/store",
									"HTTP Method is: GET"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"5b0d2b7e2e02d81a0762dada\"",
									"Path parameters which will append to the request URL:/5b0d2b7e2e02d81a0762dada"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1072,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/store/5b0d2b7e2e02d81a0762dada",
									"HTTP Method is: GET",
									"Response Time is: 796ms",
									"Response is: \n{\n    \"id\": \"5b0d2b7e2e02d81a0762dada\",\n    \"title\": \"API Automation using MaxSoft ATA Framework\",\n    \"description\": \"Deck has been created via an automated script\",\n    \"tags\": [\n        \"API tag1\"\n    ],\n    \"keywords\": [\n        \"API\"\n    ],\n    \"subjectId\": \"21312wrwe23423df\",\n    \"categoryId\": \"345345345345\",\n    \"book\": {\n        \"bookTitle\": \"API Deck3\",\n        \"bookAuthor\": \"Osanda Deshan\",\n        \"chapter\": \"Ch. 02\"\n    },\n    \"purchaseInfo\": {\n        \"purchasedDate\": 1517285013042,\n        \"price\": 99.0,\n        \"sku\": \"test.purchase1\"\n    },\n    \"notificationSettings\": {\n        \"areNotificationsEnabled\": false,\n        \"notificationTime\": \"09.30 AM\",\n        \"notificationFrequency\": \"3 times a day\"\n    },\n    \"epochTime\": {\n        \"createdAt\": null,\n        \"updatedAt\": null\n    },\n    \"examReminder\": {\n        \"startDate\": 1517285013042,\n        \"endDate\": 1517285013042,\n        \"time\": \"08:00 AM\"\n    },\n    \"examDate\": 1517285013042,\n    \"userId\": \"osan\",\n    \"parentDeckId\": \"13123123dsfsd231\",\n    \"tempDeckId\": \"3242dfs435fdgdfg34\",\n    \"createdAt\": \"2018-05-29T10:29:18.364Z\",\n    \"updatedAt\": \"2018-05-29T10:29:19.671Z\",\n    \"archived\": true,\n    \"cardPreview\": true,\n    \"noOfCards\": 12,\n    \"progress\": 45,\n    \"downloads\": 328,\n    \"deckAuthor\": \"Osanda Nimalarathna\",\n    \"deckAuthorId\": \"234325345345\",\n    \"thumbnailUrl\": \"http://somehost/someimg.jpg\",\n    \"status\": \"In Progress\",\n    \"starred\": false,\n    \"expertDeck\": true,\n    \"expert\": true\n}",
									"Response Headers are: \nX-Application-Context=application:dev:8090\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nDate=Tue, 29 May 2018 10:29:20 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.title",
											"API Automation using MaxSoft ATA Framework"
										]
									},
									{
										"cells": [
											"$.tags[0]",
											"API tag1"
										]
									},
									{
										"cells": [
											"$.book.bookTitle",
											"API Deck3"
										]
									},
									{
										"cells": [
											"$.book.bookAuthor",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"$.book.chapter",
											"Ch. 02"
										]
									},
									{
										"cells": [
											"$.purchaseInfo.price",
											"99"
										]
									},
									{
										"cells": [
											"$.notificationSettings.areNotificationsEnabled",
											"false"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationTime",
											"09.30 AM"
										]
									},
									{
										"cells": [
											"$.notificationSettings.notificationFrequency",
											"3 times a day"
										]
									},
									{
										"cells": [
											"$.examDate",
											"1517285013042"
										]
									},
									{
										"cells": [
											"$.userId",
											"osan"
										]
									},
									{
										"cells": [
											"$.parentDeckId",
											"13123123dsfsd231"
										]
									},
									{
										"cells": [
											"$.tempDeckId",
											"3242dfs435fdgdfg34"
										]
									},
									{
										"cells": [
											"$.archived",
											"true"
										]
									},
									{
										"cells": [
											"$.cardPreview",
											"true"
										]
									},
									{
										"cells": [
											"$.noOfCards",
											"12"
										]
									},
									{
										"cells": [
											"$.progress",
											"45"
										]
									},
									{
										"cells": [
											"$.downloads",
											"328"
										]
									},
									{
										"cells": [
											"$.deckAuthor",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"$.deckAuthorId",
											"234325345345"
										]
									},
									{
										"cells": [
											"$.thumbnailUrl",
											"http://somehost/someimg.jpg"
										]
									},
									{
										"cells": [
											"$.status",
											"In Progress"
										]
									},
									{
										"cells": [
											"$.expert",
											"true"
										]
									},
									{
										"cells": [
											"$.starred",
											"false"
										]
									},
									{
										"cells": [
											"$.categoryId",
											"345345345345"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.request.BaseClass.jsonPathAssertionEquals(BaseClass.java:623)\ncom.maxsoft.intelliapi.request.CommonStepDefinitions.jsonPathAssertionEquals(CommonStepDefinitions.java:367)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.jsonPathAssertionEquals(AllStepsDefinitions.java:163)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: Expected value for the JSON Path of \"$.purchaseInfo.price\" is not equal to the Actual value.\n expected [99] but found [99.0]",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Delete the previously created deck",
					"tags": [],
					"executionTime": 1186,
					"executionStatus": "pass",
					"contexts": [
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete Expert Deck by ID using Expert Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 93,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://10.199.253.187:8090/api/store",
									"HTTP Method is: DELETE"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [deckId] is: \"5b0d2b7e2e02d81a0762dada\"",
									"Path parameters which will append to the request URL:/5b0d2b7e2e02d81a0762dada"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1092,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\UnimaOs\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"",
									"Invoked API Endpoint: \nhttp://10.199.253.187:8090/api/store/5b0d2b7e2e02d81a0762dada",
									"HTTP Method is: DELETE",
									"Response Time is: 820ms",
									"No Content Response",
									"Response Headers are: \nX-Application-Context=application:dev:8090\nDate=Tue, 29 May 2018 10:29:22 GMT"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 3,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		}
	],
	"beforeSuiteHookFailure": null,
	"afterSuiteHookFailure": null,
	"passedSpecsCount": 1,
	"failedSpecsCount": 5,
	"skippedSpecsCount": 0,
	"passedScenariosCount": 6,
	"failedScenariosCount": 18,
	"skippedScenariosCount": 0
}