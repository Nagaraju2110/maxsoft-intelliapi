{
	"projectName": "MaxSoft-IntelliAPI",
	"timestamp": "Mar 5, 2019 at 1:57pm",
	"successRate": 71,
	"environment": "default",
	"tags": "",
	"executionTime": 55955,
	"executionStatus": "fail",
	"specResults": [
		{
			"specHeading": "Saving And Reading Values From Data Store Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Data Stores\\03. Saving And Reading Values From Data Store.spec",
			"tags": [],
			"executionTime": 10773,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Get configurations of the testing environment",
					"tags": [],
					"executionTime": 2,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Configurations of the testing environment",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"Configurations of Test Execution Environment\n\n",
									"Operating System: Windows 10",
									"Environment: DEV",
									"Base URL: "
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Saving values to Data Store",
					"tags": [],
					"executionTime": 2,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"\"Osanda Deshan\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable3]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Reading values from Data Store",
					"tags": [],
					"executionTime": 5,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 5,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"null\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"null\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using payload text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 4174,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 691,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"No"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"N/A"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 79,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3345,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 2683ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjYyLCJpYXQiOjE1NTE3NzQ0NjIsInNlc3NpZCI6IjljM2MzZGQyLWMwYTktNGRlYS1hYzczLWY0NmUzNWVlOTY2YiJ9.PDMNWwYKffqZbmC-hGm8ErDh5-819RvDeyB3uoOSi17_fEL8f6aVfwQMeLeySqkg-29GS-DgEcZxrTcVNjCVfMg9AppMZxk8faEcNSFcRJ0YBIDD0MyiGLbQPsd-HjKYEYZkF1Q-FtXrQcVWlLG7_F82KKuHIgq-E5_2XkCurrk\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:27:42 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=4I5TNZu2pGqUhcjupSI21ICxS/61R+7CWzviGnbMQwyBa2Z8K8OqG8kEUQ9eGBkC+zXCVGQQjzMGklL2Kg7TiEy/EA1WNHI9uioHNyhILg6ZFGY+KkooSSBLd9nn; Expires=Tue, 12 Mar 2019 08:27:42 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=fbb0ab90-1f7f-4197-bc49-39ec84f678ff\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjYyLCJpYXQiOjE1NTE3NzQ0NjIsInNlc3NpZCI6IjljM2MzZGQyLWMwYTktNGRlYS1hYzczLWY0NmUzNWVlOTY2YiJ9.PDMNWwYKffqZbmC-hGm8ErDh5-819RvDeyB3uoOSi17_fEL8f6aVfwQMeLeySqkg-29GS-DgEcZxrTcVNjCVfMg9AppMZxk8faEcNSFcRJ0YBIDD0MyiGLbQPsd-HjKYEYZkF1Q-FtXrQcVWlLG7_F82KKuHIgq-E5_2XkCurrk"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 53,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable4",
											"$.status"
										]
									},
									{
										"cells": [
											"Specification",
											"variable5",
											"$.data"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [variable4]",
									"\"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjYyLCJpYXQiOjE1NTE3NzQ0NjIsInNlc3NpZCI6IjljM2MzZGQyLWMwYTktNGRlYS1hYzczLWY0NmUzNWVlOTY2YiJ9.PDMNWwYKffqZbmC-hGm8ErDh5-819RvDeyB3uoOSi17_fEL8f6aVfwQMeLeySqkg-29GS-DgEcZxrTcVNjCVfMg9AppMZxk8faEcNSFcRJ0YBIDD0MyiGLbQPsd-HjKYEYZkF1Q-FtXrQcVWlLG7_F82KKuHIgq-E5_2XkCurrk\" is successfully saved as a text in Specification Data Store [variable5]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable4"
										]
									},
									{
										"cells": [
											"Specification",
											"variable5"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable4] is: \"success\"\n\n",
									"Text inside Specification Data Store [variable5] is: \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjYyLCJpYXQiOjE1NTE3NzQ0NjIsInNlc3NpZCI6IjljM2MzZGQyLWMwYTktNGRlYS1hYzczLWY0NmUzNWVlOTY2YiJ9.PDMNWwYKffqZbmC-hGm8ErDh5-819RvDeyB3uoOSi17_fEL8f6aVfwQMeLeySqkg-29GS-DgEcZxrTcVNjCVfMg9AppMZxk8faEcNSFcRJ0YBIDD0MyiGLbQPsd-HjKYEYZkF1Q-FtXrQcVWlLG7_F82KKuHIgq-E5_2XkCurrk\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password and save the access token inside the text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 1932,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 116,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"variable6",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable7",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable6]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable7]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request headers using data stores as follows",
							"table": {
								"headers": [
									"Header Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Header Value"
								],
								"rows": [
									{
										"cells": [
											"header1",
											"y",
											"spec",
											"variable6",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [variable6] is: \"Osanda Nimalarathna\"\n\n",
									"Header List: ",
									"header1 = Osanda Nimalarathna"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 41,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n \"userName\": \"osanda12\",\n \"password\": \"Password1\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1769,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1395ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjY0LCJpYXQiOjE1NTE3NzQ0NjQsInNlc3NpZCI6ImI2OWFlYTg1LTM4YjMtNDcyNi04NTIxLWRhMmM1YTk0ODUzZSJ9.H1tprNxGxl77L2aONd-PgCz6iy2nVIJaoUXLxVtcDOaHi_zhOkKyuUUFFt9r_6qL6xas-LU2tqJmI0UbwdbueEKZLz5-CPnn2Otaa_M3xisLRI9OaqmiRZss-8sVaabfv_tbRN28OpTWffc2WBsZUK1kipcj6zTVV_o-JG6MhCA\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:27:44 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=VnA+UlNNE4GaOI/Hn6YFx6XLNTiSjwmx9iT/32VdQvKrDSaJaK3Tdb7VbRuANG/SUOxgKkVGMyUC7f6wTO6UUqSz8E8HnhqXO0pM9AxmmfBY/XmzGfkCDOS8stKy; Expires=Tue, 12 Mar 2019 08:27:44 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=3c347a15-27c1-4054-87c2-51533694dadc\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjY0LCJpYXQiOjE1NTE3NzQ0NjQsInNlc3NpZCI6ImI2OWFlYTg1LTM4YjMtNDcyNi04NTIxLWRhMmM1YTk0ODUzZSJ9.H1tprNxGxl77L2aONd-PgCz6iy2nVIJaoUXLxVtcDOaHi_zhOkKyuUUFFt9r_6qL6xas-LU2tqJmI0UbwdbueEKZLz5-CPnn2Otaa_M3xisLRI9OaqmiRZss-8sVaabfv_tbRN28OpTWffc2WBsZUK1kipcj6zTVV_o-JG6MhCA"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"status",
											"$.status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [status]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"isContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"notContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"variable7",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable7] is: \"Software Automation\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Query parameters which will append to the request URL: ?username=osanda12\u0026password=Password1\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Path parameters which will append to the request URL:/osanda12/Password1\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using request attributes from text files",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 1699,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 95,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"variable6",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable7",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable6]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable7]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request headers using data stores as follows",
							"table": {
								"headers": [
									"Header Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Header Value"
								],
								"rows": [
									{
										"cells": [
											"header1",
											"n",
											"",
											"",
											"header1"
										]
									},
									{
										"cells": [
											"header2",
											"n",
											"",
											"",
											"header1"
										]
									},
									{
										"cells": [
											"header3",
											"n",
											"",
											"",
											"header1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [
									"Header List: ",
									"header1 = header1",
									"header2 = header1",
									"header3 = header1"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 38,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n \"userName\": \"osanda12\",\n \"password\": \"Password1\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1557,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1320ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjY2LCJpYXQiOjE1NTE3NzQ0NjUsInNlc3NpZCI6ImMxMjgzOTUwLWNjYWItNGE2My05NzY3LTU0NGRjMzBmYjJjNyJ9.bB9OtFgWivXcPLkhREACTWY3yE17t1ywmAT20Ks60IcCeJeimQ7qVceTAUvHhJm7l4-yNJy6S3VbaGEtEOgK1RgX7JMKJPLMyIygX7fQt8JT5wmz_BdjTBdOAidZaqwPJUYPRI07iZD3vOeAbKlida59xbdgkYc37f-Ey_LRu5M\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:27:45 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=2Tk8qwU0wvh8wNkm3OSXQL67E3PY3SCu5kmz/vfFJktXMiA61Rbi1cNGlSHfnfNUKiDiWnDNJ3LsQ4YvnhgIfvVg4PkVWKzmGP2jUDvjIoBEKUoV0d0u7b1ifBhN; Expires=Tue, 12 Mar 2019 08:27:45 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=98cc04e3-a7d4-4e35-9ee1-2af7b99c6332\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjY2LCJpYXQiOjE1NTE3NzQ0NjUsInNlc3NpZCI6ImMxMjgzOTUwLWNjYWItNGE2My05NzY3LTU0NGRjMzBmYjJjNyJ9.bB9OtFgWivXcPLkhREACTWY3yE17t1ywmAT20Ks60IcCeJeimQ7qVceTAUvHhJm7l4-yNJy6S3VbaGEtEOgK1RgX7JMKJPLMyIygX7fQt8JT5wmz_BdjTBdOAidZaqwPJUYPRI07iZD3vOeAbKlida59xbdgkYc37f-Ey_LRu5M"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"status",
											"$.status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [status]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"isContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"",
											"",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"notContains"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should not contains the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"variable7",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"",
											"",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable7] is: \"Software Automation\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									},
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"fail"
										]
									},
									{
										"cells": [
											"$.status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"y",
											"scenario",
											"status",
											"N/A"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should not be equal to the values inside the data stores",
							"table": {
								"headers": [
									"JSON Path",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									},
									{
										"cells": [
											"$.status",
											"n",
											"N/A",
											"N/A",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 4,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters as follows",
							"table": {
								"headers": [
									"Query Parameter",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"Id",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Query parameters which will append to the request URL: ?Id=osanda12\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"Id",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/osanda12\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Query parameters which will append to the request URL: ?username=osanda12\u0026password=Password1\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"N/A",
											"N/A",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Path parameters which will append to the request URL:/osanda12/Password1\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace API Endpoint placeholders - Scenario 1",
					"tags": [],
					"executionTime": 787,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Purchase Validator API\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 91,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/#skuid/tokens/#purchaseToken?access_token=#access_token\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the API endpoint placeholders as follows",
							"table": {
								"headers": [
									"Placeholder In JSON Template",
									"Replacement Text"
								],
								"rows": [
									{
										"cells": [
											"#skuid",
											"com.pearsoned.smartflashcards.expert.elementary"
										]
									},
									{
										"cells": [
											"#purchaseToken",
											"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE"
										]
									},
									{
										"cells": [
											"#access_token",
											"ya29.Gl02BlxksX1OjOxBRrI2znyQc3xdqvDXkh0NU7GxEw5_2EfMvysYUNqjhcLTj8BaO9GIk6KJQBbEMzYde7tDCCUNCyW_fGlHr-9mHplWfr69Vwdz2xnvhfZcLPjCvcA"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 32,
								"skippedReason": "",
								"messages": [
									"https://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE?access_token=ya29.Gl02BlxksX1OjOxBRrI2znyQc3xdqvDXkh0NU7GxEw5_2EfMvysYUNqjhcLTj8BaO9GIk6KJQBbEMzYde7tDCCUNCyW_fGlHr-9mHplWfr69Vwdz2xnvhfZcLPjCvcA"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 661,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0vhCEpnsaQzG4LiWlLPnzZZ8lurqkUwQOdEayJt-594AJ0ZXAD157IP8l0v-pHedljh50abW2HG50dAdzOQcLz_mE_5oqOApbkuC2X4mOlf8vJ09qul3zrAy30O3luyUqwOUOkJ1L2XhwrLhKROMAMXpx11t81UENIUxq0zaE?access_token=ya29.Gl02BlxksX1OjOxBRrI2znyQc3xdqvDXkh0NU7GxEw5_2EfMvysYUNqjhcLTj8BaO9GIk6KJQBbEMzYde7tDCCUNCyW_fGlHr-9mHplWfr69Vwdz2xnvhfZcLPjCvcA\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 466ms\n\n",
									"Response is: \n{\n    \"error\": {\n        \"errors\": [\n            {\n                \"domain\": \"global\",\n                \"reason\": \"authError\",\n                \"message\": \"Invalid Credentials\",\n                \"locationType\": \"header\",\n                \"location\": \"Authorization\"\n            }\n        ],\n        \"code\": 401,\n        \"message\": \"Invalid Credentials\"\n    }\n}\n\n",
									"Response Headers are: \nVary=Origin\nVary=X-Origin\nWWW-Authenticate=Bearer realm=\"https://accounts.google.com/\", error=invalid_token\nContent-Type=application/json; charset=UTF-8\nContent-Encoding=gzip\nDate=Tue, 05 Mar 2019 08:27:46 GMT\nExpires=Tue, 05 Mar 2019 08:27:46 GMT\nCache-Control=private, max-age=0\nX-Content-Type-Options=nosniff\nX-Frame-Options=SAMEORIGIN\nX-XSS-Protection=1; mode=block\nServer=GSE\nAlt-Svc=quic=\":443\"; ma=2592000; v=\"44,43,39\"\nTransfer-Encoding=chunked"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"401\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.error.errors[0].reason",
											"authError"
										]
									},
									{
										"cells": [
											"$.error.errors[0].message",
											"Invalid Credentials"
										]
									},
									{
										"cells": [
											"$.error.code",
											"401"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace API Endpoint placeholders - Scenario 2",
					"tags": [],
					"executionTime": 703,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Purchase Validator API\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 127,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/#skuid/tokens/#purchaseToken?access_token=#access_token\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"purchaseToken",
											"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0"
										]
									},
									{
										"cells": [
											"Scenario",
											"accessToken",
											"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0\" is successfully saved as a text in Scenario Data Store [purchaseToken]",
									"\"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\" is successfully saved as a text in Scenario Data Store [accessToken]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the API endpoint placeholders using data stores as follows",
							"table": {
								"headers": [
									"Placeholder In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Replacement Text"
								],
								"rows": [
									{
										"cells": [
											"#skuid",
											"n",
											"",
											"",
											"com.pearsoned.smartflashcards.expert.elementary"
										]
									},
									{
										"cells": [
											"#purchaseToken",
											"y",
											"scenario",
											"purchaseToken",
											""
										]
									},
									{
										"cells": [
											"#access_token",
											"y",
											"scenario",
											"accessToken",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 30,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [purchaseToken] is: \"jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0\"\n\n",
									"Text inside Scenario Data Store [accessToken] is: \"ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\"\n\n",
									"https://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0?access_token=ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 540,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://www.googleapis.com/androidpublisher/v3/applications/com.pearsoned.smartflashcards/purchases/products/com.pearsoned.smartflashcards.expert.elementary/tokens/jghpbegbjgnpfdfgjjkhdpeo.AO-J1OwpcCUVIa0?access_token=ya29.GlzGBXmxF34s99wQ0o8ie7B4P85ld_FUNBZxizYB\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 369ms\n\n",
									"Response is: \n{\n    \"error\": {\n        \"errors\": [\n            {\n                \"domain\": \"global\",\n                \"reason\": \"authError\",\n                \"message\": \"Invalid Credentials\",\n                \"locationType\": \"header\",\n                \"location\": \"Authorization\"\n            }\n        ],\n        \"code\": 401,\n        \"message\": \"Invalid Credentials\"\n    }\n}\n\n",
									"Response Headers are: \nVary=Origin\nVary=X-Origin\nWWW-Authenticate=Bearer realm=\"https://accounts.google.com/\", error=invalid_token\nContent-Type=application/json; charset=UTF-8\nContent-Encoding=gzip\nDate=Tue, 05 Mar 2019 08:27:47 GMT\nExpires=Tue, 05 Mar 2019 08:27:47 GMT\nCache-Control=private, max-age=0\nX-Content-Type-Options=nosniff\nX-Frame-Options=SAMEORIGIN\nX-XSS-Protection=1; mode=block\nServer=GSE\nAlt-Svc=quic=\":443\"; ma=2592000; v=\"44,43,39\"\nTransfer-Encoding=chunked"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"401\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.error.errors[0].reason",
											"authError"
										]
									},
									{
										"cells": [
											"$.error.errors[0].message",
											"Invalid Credentials"
										]
									},
									{
										"cells": [
											"$.error.code",
											"401"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 6,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Validate the data store values",
					"tags": [],
					"executionTime": 1469,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 51,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"No"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"N/A"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1417,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1302ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjY5LCJpYXQiOjE1NTE3NzQ0NjgsInNlc3NpZCI6Ijc4NWVhNDM0LTEwOWMtNGU1ZS1iODY1LTdjMDM3YmY2NGJjZCJ9.G8eIIDcRZOsPAoAayQolSUBsSp8Oy57H_gDngAJgRk9Jj35flC5EzptAKsnZ9yDWyRSAExnALm9DsJIIfXnBiotQfah9g6AExF7U-re0MA2fV94mRUYfhUpGJdcivYofFDCF0Ts1wlZ9HupehYWTj8WbphOOLr1eCCS-h6-kj9o\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:27:48 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=fDPyzmEBMAoI0qR1woOZ3B+i04lUfvENqgj5jEFyjqVvBErhC1l5bpWwcqEcn1Py+/TUchhKgL5LdbEORADzOQYY6L6mV95x/zj9EP/CpCzyns7p2x6Mh6gasnj0; Expires=Tue, 12 Mar 2019 08:27:48 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=5bd6fabc-695a-4fc3-8328-747bfdb7e3d4\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjY5LCJpYXQiOjE1NTE3NzQ0NjgsInNlc3NpZCI6Ijc4NWVhNDM0LTEwOWMtNGU1ZS1iODY1LTdjMDM3YmY2NGJjZCJ9.G8eIIDcRZOsPAoAayQolSUBsSp8Oy57H_gDngAJgRk9Jj35flC5EzptAKsnZ9yDWyRSAExnALm9DsJIIfXnBiotQfah9g6AExF7U-re0MA2fV94mRUYfhUpGJdcivYofFDCF0Ts1wlZ9HupehYWTj8WbphOOLr1eCCS-h6-kj9o"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"status",
											"$.status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"success\" is successfully saved as a text in Scenario Data Store [status]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"success"
										]
									},
									{
										"cells": [
											"Scenario",
											"mobileUserName",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"success\" is successfully saved as a text in Scenario Data Store [status]",
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [mobileUserName]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda12"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside two data stores should be equal",
							"table": {
								"headers": [
									"DataStore 1 Type",
									"Variable 1 Name",
									"DataStore 2 Type",
									"Variable 2 Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Scenario",
											"mobileUserName"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [mobileUserName] is: \"osanda12\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores not equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"succes"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside two data stores should not be equal",
							"table": {
								"headers": [
									"DataStore 1 Type",
									"Variable 1 Name",
									"DataStore 2 Type",
									"Variable 2 Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Scenario",
											"status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores contain the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"osanda"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"succes"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the value inside a data store should contain the value of the other data store",
							"table": {
								"headers": [
									"DataStore 1 Type",
									"Variable 1 Name",
									"DataStore 2 Type",
									"Variable 2 Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Scenario",
											"mobileUserName"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [mobileUserName] is: \"osanda12\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores not contain the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"deshan"
										]
									},
									{
										"cells": [
											"Scenario",
											"status",
											"fail"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the value inside a data store should not contain the value of the other data store",
							"table": {
								"headers": [
									"DataStore 1 Type",
									"Variable 1 Name",
									"DataStore 2 Type",
									"Variable 2 Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Scenario",
											"status"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Scenario Data Store [status] is: \"success\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 9,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Create a list from data store values Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\02. Create a list from data store values.spec",
			"tags": [],
			"executionTime": 3,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Create a list from data store values",
					"tags": [],
					"executionTime": 3,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"\"Osanda Deshan\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable3]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as a \"String\" data type list into \"Scenario\" type data store by referencing the variable name as \"var1\"",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"Osanda Deshan\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"Software Automation\"\n\n",
									"\"\"Osanda Deshan\",\"Osanda Nimalarathna\",\"Software Automation\"\" is successfully saved as a text in Scenario Data Store [var1]",
									"Value List: \"Osanda Deshan\",\"Osanda Nimalarathna\",\"Software Automation\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"var1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [var1] is: \"\"Osanda Deshan\",\"Osanda Nimalarathna\",\"Software Automation\"\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "CRUD in One Scenario Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\04. CRUD in One Scenario.spec",
			"tags": [],
			"executionTime": 692,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "CRUD operation for a sku and get all the 9 questions in a deck",
					"tags": [],
					"executionTime": 692,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Create SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 40,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/store/sku\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#skuId",
											"sampleSkuId1"
										]
									},
									{
										"cells": [
											"#price",
											"1.19"
										]
									},
									{
										"cells": [
											"#type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 18,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n \"skuId\":\"sampleSkuId1\",\n \"price\":1.19,\n \"type\":\"DECK\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 634,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/store/sku\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 519ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:15 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/store/sku\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.skuId",
											"sampleSkuId1"
										]
									},
									{
										"cells": [
											"$.price",
											"1.19"
										]
									},
									{
										"cells": [
											"$.type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"skuUUID1",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a sku",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "not executed",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 0,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create SKU\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#skuId",
													"AAPIPH5-DC2-Y"
												]
											},
											{
												"cells": [
													"#price",
													"3.99"
												]
											},
											{
												"cells": [
													"#type",
													"DECK"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the JSON Path Assertions for the response should be equal to the following",
									"table": {
										"headers": [
											"JSON Path",
											"Expected Result"
										],
										"rows": [
											{
												"cells": [
													"$.skuId",
													"AAPIPH5-DC2-Y"
												]
											},
											{
												"cells": [
													"$.price",
													"3.99"
												]
											},
											{
												"cells": [
													"$.type",
													"DECK"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"skuUUID2",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Edit SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID2",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#skuId",
											"sampleSkuId2"
										]
									},
									{
										"cells": [
											"#price",
											"1.07"
										]
									},
									{
										"cells": [
											"#type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.skuId",
											"sampleSkuId2"
										]
									},
									{
										"cells": [
											"$.price",
											"1.07"
										]
									},
									{
										"cells": [
											"$.type",
											"DECK"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID1",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete SKU\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"skuUUID",
											"y",
											"scenario",
											"skuUUID2",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a my deck with all types of 9 questions",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "not executed",
									"stackTrace": "",
									"screenshot": "",
									"errorMessage": "",
									"executionTime": 0,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"\"null\""
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"0"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"osan"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"spec",
													"myDeckIdWith9Questions",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId2",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create MCQ Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"MULTIPLE_CHOICE"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create All Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Path Value"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													"N/A"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"ALL"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													"learningObjective1"
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerList",
													"n",
													"",
													"",
													"1,2"
												]
											},
											{
												"cells": [
													"#answer1Id",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#answer1Value",
													"n",
													"",
													"",
													"Osanda"
												]
											},
											{
												"cells": [
													"#answer1Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer1CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer2Id",
													"n",
													"",
													"",
													"2"
												]
											},
											{
												"cells": [
													"#answer2Value",
													"n",
													"",
													"",
													"Gemunu"
												]
											},
											{
												"cells": [
													"#answer2Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer2CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#answer3Id",
													"n",
													"",
													"",
													"3"
												]
											},
											{
												"cells": [
													"#answer3Value",
													"n",
													"",
													"",
													"Eranga"
												]
											},
											{
												"cells": [
													"#answer3Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer3CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer4Id",
													"n",
													"",
													"",
													"4"
												]
											},
											{
												"cells": [
													"#answer4Value",
													"n",
													"",
													"",
													"Heshan"
												]
											},
											{
												"cells": [
													"#answer4Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer4CaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#answer5Id",
													"n",
													"",
													"",
													"5"
												]
											},
											{
												"cells": [
													"#answer5Value",
													"n",
													"",
													"",
													"Thilina"
												]
											},
											{
												"cells": [
													"#answer5Type",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#answer5CaseSensitive",
													"n",
													"",
													"",
													"true"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId5",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"cardId8",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create Short Answer Type Question using Aggregation Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes using data stores as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Is Data Store Used?",
											"Data Store Type",
											"Data Store Variable Name",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#creatorId",
													"n",
													"",
													"",
													"osanda12"
												]
											},
											{
												"cells": [
													"#creatorPlatform",
													"n",
													"",
													"",
													"Web"
												]
											},
											{
												"cells": [
													"#creatoredSource",
													"n",
													"",
													"",
													"App"
												]
											},
											{
												"cells": [
													"#creatoredType",
													"n",
													"",
													"",
													"Manual"
												]
											},
											{
												"cells": [
													"#deckId",
													"y",
													"spec",
													"myDeckIdWith9Questions",
													""
												]
											},
											{
												"cells": [
													"#isDeleted",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#tempQuestionId",
													"n",
													"",
													"",
													"testId"
												]
											},
											{
												"cells": [
													"#kind",
													"n",
													"",
													"",
													"SHORT_ANSWER"
												]
											},
											{
												"cells": [
													"#learningObjectives",
													"n",
													"",
													"",
													""
												]
											},
											{
												"cells": [
													"#imageUrl",
													"n",
													"",
													"",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#media",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#questionPrompt",
													"n",
													"",
													"",
													"Who is the owner of MaxSoft? _ _ _ _ _ _ _ _"
												]
											},
											{
												"cells": [
													"#promptType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#timeout",
													"n",
													"",
													"",
													"60"
												]
											},
											{
												"cells": [
													"#rationale",
													"n",
													"",
													"",
													"rationale"
												]
											},
											{
												"cells": [
													"#boxId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAttempts",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#inCorrectAttempts",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#lastAswered",
													"n",
													"",
													"",
													"2018-01-01T12:00:00+01:00"
												]
											},
											{
												"cells": [
													"#questionId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#skips",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#userId",
													"n",
													"",
													"",
													"0"
												]
											},
											{
												"cells": [
													"#correctAnswerId",
													"n",
													"",
													"",
													"1"
												]
											},
											{
												"cells": [
													"#correctAnswerValue",
													"n",
													"",
													"",
													"Osanda Deshan"
												]
											},
											{
												"cells": [
													"#iscorrectAnswerCaseSensitive",
													"n",
													"",
													"",
													"false"
												]
											},
											{
												"cells": [
													"#correctAnswerType",
													"n",
													"",
													"",
													"TEXT"
												]
											},
											{
												"cells": [
													"#tags",
													"n",
													"",
													"",
													"MaxSoft"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And save the JSON Path values in the response inside the data stores",
									"table": {
										"headers": [
											"DataStore Type",
											"Variable Name",
											"Value To Be Stored"
										],
										"rows": [
											{
												"cells": [
													"scenario",
													"questionId",
													"$.id"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "not executed",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get all Questions using Aggregation Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the query parameters using data stores as follows",
							"table": {
								"headers": [
									"Query Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Query Value"
								],
								"rows": [
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"myDeckIdWith9Questions",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.questions.length()",
											"9"
										]
									},
									{
										"cells": [
											"$.questions.[-1].question.media",
											"TEXT"
										]
									},
									{
										"cells": [
											"$.questions.[-1].question.promptType",
											"TEXT"
										]
									},
									{
										"cells": [
											"$.questions.[-1].creatoredSource",
											"App"
										]
									},
									{
										"cells": [
											"$.questions.[-1].answers.[0].type",
											"TEXT"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Form-Data Example Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\05. Form-Data Example.spec",
			"tags": [],
			"executionTime": 1251,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Get Google OAuth Access token",
					"tags": [],
					"executionTime": 544,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get OAuth Access Token from Refresh Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 35,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://accounts.google.com/o/oauth2/token\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the form-data key value pairs as follows",
							"table": {
								"headers": [
									"Key",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"grant_type",
											"refresh_token"
										]
									},
									{
										"cells": [
											"client_id",
											"211897666304-ii96f12k6tf8h5k15sp41reo92osrgnm.apps.googleusercontent.com"
										]
									},
									{
										"cells": [
											"client_secret",
											"fILuyCiaWDRElAP6MdWcJIdK"
										]
									},
									{
										"cells": [
											"refresh_token",
											"1/3wu2nvsunxK3mYRDTPun_8t8GeBEKkY--LYfEr9SIvU"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Form Params Map: \n\n",
									"refresh_token = 1/3wu2nvsunxK3mYRDTPun_8t8GeBEKkY--LYfEr9SIvU",
									"grant_type = refresh_token",
									"client_secret = fILuyCiaWDRElAP6MdWcJIdK",
									"client_id = 211897666304-ii96f12k6tf8h5k15sp41reo92osrgnm.apps.googleusercontent.com"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 508,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://accounts.google.com/o/oauth2/token\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 374ms\n\n",
									"Response is: \n{\n    \"access_token\": \"ya29.Gl3DBudtVl8Zb0wQhpCe_uAM5qpI9rKBs-doL_EfmdNr1YhsMoBmMhNC6Wni5cPm1_1JIgGJSz1Bv80vkSxvXEfGtBMktff6xLywHWjUbGkcl6tGHq2dtZ-6GDD16gQ\",\n    \"expires_in\": 3600,\n    \"scope\": \"https://www.googleapis.com/auth/androidpublisher\",\n    \"token_type\": \"Bearer\"\n}\n\n",
									"Response Headers are: \nContent-Type=application/json; charset=utf-8\nVary=Origin\nVary=X-Origin\nVary=Referer\nContent-Encoding=gzip\nDate=Tue, 05 Mar 2019 08:28:15 GMT\nServer=ESF\nCache-Control=private\nX-XSS-Protection=1; mode=block\nX-Frame-Options=SAMEORIGIN\nX-Content-Type-Options=nosniff\nAlt-Svc=quic=\":443\"; ma=2592000; v=\"44,43,39\"\nTransfer-Encoding=chunked"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.expires_in",
											"3600"
										]
									},
									{
										"cells": [
											"$.token_type",
											"Bearer"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Upload file",
					"tags": [],
					"executionTime": 707,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 707,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 46,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 21,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 639,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 508ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:16 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 707,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"spec",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"File Upload\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the form-data key value pairs using data stores as follows",
							"table": {
								"headers": [
									"Key",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"title",
											"n",
											"",
											"",
											"DOCX file"
										]
									},
									{
										"cells": [
											"creatorId",
											"n",
											"",
											"",
											"Osanda"
										]
									},
									{
										"cells": [
											"creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"creatoredSource",
											"n",
											"",
											"",
											"File"
										]
									},
									{
										"cells": [
											"creatoredType",
											"n",
											"",
											"",
											"Auto"
										]
									},
									{
										"cells": [
											"deckId",
											"y",
											"spec",
											"deckId",
											"5b123fa92e02d85d8b54c7b6"
										]
									},
									{
										"cells": [
											"isExpert",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"examDate",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"userId",
											"n",
											"",
											"",
											"osanda"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the multipart file key value pairs as follows",
							"table": {
								"headers": [
									"Key",
									"File Path",
									"Mime Type"
								],
								"rows": [
									{
										"cells": [
											"file",
											"/resources/docx_files/DOCX file1.docx",
											"application/vnd.openxmlformats-officedocument.wordprocessingml.document"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.length()",
											"15"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 1,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Get Student Availability - Negative Tests Specification - 404 Error",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\09. Get Student Availablity - Negative Tests - 404 Error.spec",
			"tags": [],
			"executionTime": 1125,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Get Student Availability 404 Not Found",
					"tags": [],
					"executionTime": 1125,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Student Availability\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 42,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://groupworkservice-pearson-gw-us1-dev.bite.pearsondev.tech/api/v1\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters using data stores as follows",
							"table": {
								"headers": [
									"Path Name",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"availability",
											"n",
											"",
											"",
											"availability"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/availability\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attibute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#courseId",
											"n",
											"scenario",
											"courseId",
											"1235"
										]
									},
									{
										"cells": [
											"#userId1",
											"n",
											"scenario",
											"userId1",
											"1"
										]
									},
									{
										"cells": [
											"#userId2",
											"n",
											"scenario",
											"userId2",
											"116"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 19,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\n  \"courseId\": \"1235\",\n  \"userIds\": [\n    \"1\" , \n     \"116\"\n  ]\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1064,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://groupworkservice-pearson-gw-us1-dev.bite.pearsondev.tech/api/v1/availability\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 935ms\n\n",
									"Response is: \n{\n    \"message\": \"Requested resource not found from roster side\",\n    \"errorCode\": \"30000\"\n}\n\n",
									"Response Headers are: \nCache-Control=no-cache, no-store, max-age=0, must-revalidate\nContent-Type=application/json;charset=UTF-8\nDate=Tue, 05 Mar 2019 08:28:29 GMT\nExpires=0\nPragma=no-cache\nServer=nginx\nSet-Cookie=JSESSIONID=UjSASR3VQ55GiOf1cvZRlZytPf-UzuLgoN9WX7UI; path=/\nX-Content-Type-Options=nosniff\nX-Frame-Options=DENY\nX-XSS-Protection=1; mode=block\nContent-Length=79\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"404\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Requested resource not found from roster side"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Read From Excel File Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\10. Read from excel file.spec",
			"tags": [],
			"executionTime": 1537,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Invoke PI API using the test data in excel file",
					"tags": [],
					"executionTime": 1537,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves test data inside excel file into data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Excel Sheet Name",
									"Key Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"TestData",
											"username"
										]
									},
									{
										"cells": [
											"Specification",
											"password",
											"TestData",
											"password"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 25,
								"skippedReason": "",
								"messages": [
									"\"osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Password1\" is successfully saved as a text in Specification Data Store [password]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 33,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"Scenario",
											"username",
											"N/A"
										]
									},
									{
										"cells": [
											"#password",
											"y",
											"Specification",
											"password",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 15,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [username] is: \"osanda12\"\n\n",
									"Text inside Specification Data Store [password] is: \"Password1\"\n\n",
									"The JSON request body that you are going to use for the API is:\n{\n \"userName\": \"osanda12\",\n \"password\": \"Password1\"\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1460,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1366ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MzExLCJpYXQiOjE1NTE3NzQ1MTEsInNlc3NpZCI6IjdlOTE2YzUzLWE0YzgtNDFhOC1hNTMzLThkMjE5NTViYmMwNSJ9.gdyfg2iNfeDMBxEagfLsPHNQ31fyNrPSarmJhoWDBvAkguMox3wZHcHP-1hy8j5cGUVye7QgJIe6D4xK8Cq57pH7RZXajB8cTz2OR_pZlvSWdtyLilazpIO9Zo4TwKv4qdsJU_f8I2NKoRV7_mQ5fegGCyfdWlhiWlDIukcV-o0\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:28:31 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=vOdIbp38qCbxXOA9Y3w5wIFINR64ODJJN4IIYY0g8akRWv2aT4NROD/UXh7W+Ff6Fb08JVr3MY+IpH5GioflHDnk3J/sHy1dvTWeiokxecSXT1zrNupoVXyX1y37; Expires=Tue, 12 Mar 2019 08:28:31 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=c59373e0-4053-457a-9138-de81feb3bcc8\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MzExLCJpYXQiOjE1NTE3NzQ1MTEsInNlc3NpZCI6IjdlOTE2YzUzLWE0YzgtNDFhOC1hNTMzLThkMjE5NTViYmMwNSJ9.gdyfg2iNfeDMBxEagfLsPHNQ31fyNrPSarmJhoWDBvAkguMox3wZHcHP-1hy8j5cGUVye7QgJIe6D4xK8Cq57pH7RZXajB8cTz2OR_pZlvSWdtyLilazpIO9Zo4TwKv4qdsJU_f8I2NKoRV7_mQ5fegGCyfdWlhiWlDIukcV-o0"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Saving to Data Stores Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Data Stores\\01. Saving to Data Stores.spec",
			"tags": [],
			"executionTime": 383,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Saving to Data Stores",
					"tags": [],
					"executionTime": 380,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 378,
								"skippedReason": "",
								"messages": [
									"\"Osanda Deshan\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable3]",
									"\"Gauge Framework\" is successfully saved as a text in Suite Data Store [variable4]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"Osanda Deshan\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"Software Automation\"\n\n",
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves environment property file data into data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Attribute Name In Property File"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"mongoHost",
											"mongo_database_host"
										]
									},
									{
										"cells": [
											"Specification",
											"mongoPort",
											"mongo_database_port"
										]
									},
									{
										"cells": [
											"Scenario",
											"mysqlUrl",
											"mysql_database_url"
										]
									},
									{
										"cells": [
											"Suite",
											"headerName",
											"header_name_for_authorization"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"10.199.253.208\" is successfully saved as a text in Scenario Data Store [mongoHost]",
									"\"27017\" is successfully saved as a text in Specification Data Store [mongoPort]",
									"\"jdbc:mysql://localhost:3306/user\" is successfully saved as a text in Scenario Data Store [mysqlUrl]",
									"\"X-Authorization\" is successfully saved as a text in Suite Data Store [headerName]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"mongoHost",
											"10.199.253.208"
										]
									},
									{
										"cells": [
											"Specification",
											"mongoPort",
											"27017"
										]
									},
									{
										"cells": [
											"Scenario",
											"mysqlUrl",
											"jdbc:mysql://localhost:3306/user"
										]
									},
									{
										"cells": [
											"Suite",
											"headerName",
											"X-Authorization"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [mongoHost] is: \"10.199.253.208\"\n\n",
									"Text inside Specification Data Store [mongoPort] is: \"27017\"\n\n",
									"Text inside Scenario Data Store [mysqlUrl] is: \"jdbc:mysql://localhost:3306/user\"\n\n",
									"Text inside Suite Data Store [headerName] is: \"X-Authorization\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Reading values from Data Store",
					"tags": [],
					"executionTime": 3,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [
									"\"Osanda Deshan\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda Nimalarathna\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Software Automation\" is successfully saved as a text in Scenario Data Store [variable3]",
									"\"Gauge Framework\" is successfully saved as a text in Suite Data Store [variable4]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"Osanda Deshan\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"Software Automation\"\n\n",
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [variable2] is: \"Osanda Nimalarathna\"\n\n",
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores not equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osa Deshan"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Auto"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"Osanda Deshan\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"Software Automation\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Request Placeholders Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\06. Request Placeholders.spec",
			"tags": [],
			"executionTime": 6064,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Saving values to Data Store",
					"tags": [],
					"executionTime": 1,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"username",
											"Osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"username",
											"Osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"password",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"Osanda12\" is successfully saved as a text in Scenario Data Store [username]",
									"\"Osanda12\" is successfully saved as a text in Specification Data Store [username]",
									"\"Password1\" is successfully saved as a text in Specification Data Store [password]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace request placeholders from values",
					"tags": [],
					"executionTime": 1643,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 41,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login_placeholders.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"#username\",\r\n \"password\": \"#password\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the request payload placeholders as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"osanda12"
										]
									},
									{
										"cells": [
											"#password",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The final JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1602,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1493ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1Mjk4LCJpYXQiOjE1NTE3NzQ0OTgsInNlc3NpZCI6ImU2YjJjNjg1LTZiZTUtNGY5My1iMmYyLTE2YzMzYjQ1NzViNSJ9.EzbQZlz2_AKpcIuTLjPNwSgP2W5q-R_7sauVA6Y2oSsU3-NKm8v1CcHIGKVyAHzh00JjY_A7sMOQ60sB8ldWtkHrOrDUi0lsLIXj3ej4jIshiWp455KMSwHFrNrmYmtrkVVoeOtzMutaoa4DOOquxI81WCPGQ_oQeBWMKcdBZcU\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:28:18 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=OkoQywBsXqsq++gH3xfQtf5/nnLZhfQiMKWvE0AysBwpcTA9ReveUp3XZeTK3iKCE4dQZWl+e6sNdngo7DJRlneciffSNZtIIkYE+XAW98yDTUT744IhNOOSXM/H; Expires=Tue, 12 Mar 2019 08:28:18 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=61f5b9ed-1d89-449f-b8a3-b6b93ea8df21\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1Mjk4LCJpYXQiOjE1NTE3NzQ0OTgsInNlc3NpZCI6ImU2YjJjNjg1LTZiZTUtNGY5My1iMmYyLTE2YzMzYjQ1NzViNSJ9.EzbQZlz2_AKpcIuTLjPNwSgP2W5q-R_7sauVA6Y2oSsU3-NKm8v1CcHIGKVyAHzh00JjY_A7sMOQ60sB8ldWtkHrOrDUi0lsLIXj3ej4jIshiWp455KMSwHFrNrmYmtrkVVoeOtzMutaoa4DOOquxI81WCPGQ_oQeBWMKcdBZcU"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace one request placeholders from values",
					"tags": [],
					"executionTime": 1527,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 38,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login_placeholder.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"#username\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the request payload placeholders as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"osanda12"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The final JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1489,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1383ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MzAwLCJpYXQiOjE1NTE3NzQ0OTksInNlc3NpZCI6Ijk5M2M5ZjU0LTZlYjItNDdlZS1hNTQxLTYxMzk0NzBjMjJlZCJ9.FzfHLmn6Bx661s8Ebq4YFGiR_ZGeHnc9jossigk1mypXzi25bSbGP22HWU_RP5vXKlTlY809ZFogUfIc9vRwfzNTX2fUa6Q3ZqJL3wRGTNii1LCreL_wspUZtxfu1N6Qb7o2-6BLPz3JDJgTFyvGann8SXCS2nl0q5Bztv5asP0\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:28:19 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=rAuHfbYkZouvAtXnxt/cnqb3BGFuIuSTrUmXzZX3zvuDXUZDosiB/yUlMen7sk6+1Pp7XwmogyfatQheWV93lPGSfslQ3FxwdhqPzrsl1T4TRwxTRH40ifhDNGG9; Expires=Tue, 12 Mar 2019 08:28:19 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=572b14a6-fba0-4f3a-870c-60e9a0cbe451\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MzAwLCJpYXQiOjE1NTE3NzQ0OTksInNlc3NpZCI6Ijk5M2M5ZjU0LTZlYjItNDdlZS1hNTQxLTYxMzk0NzBjMjJlZCJ9.FzfHLmn6Bx661s8Ebq4YFGiR_ZGeHnc9jossigk1mypXzi25bSbGP22HWU_RP5vXKlTlY809ZFogUfIc9vRwfzNTX2fUa6Q3ZqJL3wRGTNii1LCreL_wspUZtxfu1N6Qb7o2-6BLPz3JDJgTFyvGann8SXCS2nl0q5Bztv5asP0"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace request placeholders from data store values",
					"tags": [],
					"executionTime": 1471,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 35,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login_placeholders.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"#username\",\r\n \"password\": \"#password\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the request payload placeholders using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"spec",
											"username",
											""
										]
									},
									{
										"cells": [
											"#password",
											"y",
											"spec",
											"password",
											""
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [username] is: \"Osanda12\"\n\n",
									"Text inside Specification Data Store [password] is: \"Password1\"\n\n",
									"The final JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"Osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1436,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1331ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MzAxLCJpYXQiOjE1NTE3NzQ1MDEsInNlc3NpZCI6IjgzZDZmYzYwLTdlMWQtNGRjZi1hODJjLWIxMjQyODVmMTYyZSJ9.fTZB1HqIVAYP5VSrVBodFZp8CF-yI2j4QMKJWfeAxWMxcNpyB4U6WHA2_mpl0w9nG-6sKNqDnuz1Efz6iGH03LVRdz1fTKVAtIJHCd_YfcCtU2sbCqmFWb1Sjrh0Cqb6aq9HpYZfIAqzCgOyyzi_0plgT_0G3cTxfpqiz7-pGXg\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:28:21 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=ZrZ96NZMpSuH6H5q1zmy9sFE3HumB0VcFeU81be0jMvsHg021gc5HZoBKZ1U5TxGmpi5LcEqDD/nSUCrmZNb0Qjhq1dl0/MN+Zo5jjMVECQ9nLAIeskN0qJv28eK; Expires=Tue, 12 Mar 2019 08:28:21 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=16776f2f-f1e8-4f8e-bc76-cdb44995f9d5\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MzAxLCJpYXQiOjE1NTE3NzQ1MDEsInNlc3NpZCI6IjgzZDZmYzYwLTdlMWQtNGRjZi1hODJjLWIxMjQyODVmMTYyZSJ9.fTZB1HqIVAYP5VSrVBodFZp8CF-yI2j4QMKJWfeAxWMxcNpyB4U6WHA2_mpl0w9nG-6sKNqDnuz1Efz6iGH03LVRdz1fTKVAtIJHCd_YfcCtU2sbCqmFWb1Sjrh0Cqb6aq9HpYZfIAqzCgOyyzi_0plgT_0G3cTxfpqiz7-pGXg"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Replace one request placeholder from data store values",
					"tags": [],
					"executionTime": 1422,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 35,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login_placeholders.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"#username\",\r\n \"password\": \"#password\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set values to the request payload placeholders using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#username",
											"y",
											"spec",
											"username",
											""
										]
									},
									{
										"cells": [
											"#password",
											"n",
											"",
											"",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Specification Data Store [username] is: \"Osanda12\"\n\n",
									"The final JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"Osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1387,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1290ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MzAyLCJpYXQiOjE1NTE3NzQ1MDIsInNlc3NpZCI6ImY1N2NjODNlLTIxZTktNDA1ZC1hMjAwLTk3MDg2NTljODJmNCJ9.Goy3RyxPl4MMplPkuXh926vThSLmiUhksnYnA6pdcupqePR2tZsIUIVDfpT8dWrn0tqQ0hNCbsnQe2mA5YcnxcAE_UWCx_n0fGn-m6E7n4SZ-xBpfFEeWHROP4tdkdERQW967uw68cPyB7KpUGe3ZcTzT8p1qrmXaNrgJAGc0Qs\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:28:22 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=8q7aIcDaVm52h0gzVS245p+97uO4ufYBgv4rVlIR8kUMhBf7DObgjBV29J2wIVlqbbPLo2oUoXT2EJ3lSHxh5/LAJbFRf5Wrl5QRgmjOsQWHrv1QaTQx/1+lHlFm; Expires=Tue, 12 Mar 2019 08:28:22 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=8d692674-cf97-47f5-8875-9d8d5f292b7d\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MzAyLCJpYXQiOjE1NTE3NzQ1MDIsInNlc3NpZCI6ImY1N2NjODNlLTIxZTktNDA1ZC1hMjAwLTk3MDg2NTljODJmNCJ9.Goy3RyxPl4MMplPkuXh926vThSLmiUhksnYnA6pdcupqePR2tZsIUIVDfpT8dWrn0tqQ0hNCbsnQe2mA5YcnxcAE_UWCx_n0fGn-m6E7n4SZ-xBpfFEeWHROP4tdkdERQW967uw68cPyB7KpUGe3ZcTzT8p1qrmXaNrgJAGc0Qs"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 5,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Read from saved CSV Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\07. Read from saved CSV.spec",
			"tags": [],
			"executionTime": 6072,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 865,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 49,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3292c5131e001049ac2f"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3292c5131e001049ac2f\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 816,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3292c5131e001049ac2f\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 717ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:23 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3292c5131e001049ac2f\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 0
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 641,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 41,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3293c5131e001049ac30"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3293c5131e001049ac30\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 600,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3293c5131e001049ac30\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 503ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:23 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3293c5131e001049ac30\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 1
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 640,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 39,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3294c5131e001049ac31"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3294c5131e001049ac31\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 601,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3294c5131e001049ac31\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 497ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:24 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3294c5131e001049ac31\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 2
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 651,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 35,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3295c5131e001049ac32"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3295c5131e001049ac32\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 616,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3295c5131e001049ac32\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 519ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:25 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3295c5131e001049ac32\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 3
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 641,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 34,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3296c5131e001049ac33"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3296c5131e001049ac33\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 606,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3296c5131e001049ac33\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 504ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:25 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3296c5131e001049ac33\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 4
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 687,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 47,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3297c5131e001049ac34"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3297c5131e001049ac34\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 640,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3297c5131e001049ac34\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 527ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:26 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3297c5131e001049ac34\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 5
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 652,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 32,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3298c5131e001049ac35"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3298c5131e001049ac35\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 620,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3298c5131e001049ac35\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 520ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:27 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3298c5131e001049ac35\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 6
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 658,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 38,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3298c5131e001049ac36"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3298c5131e001049ac36\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 620,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3298c5131e001049ac36\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 517ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:27 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3298c5131e001049ac36\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 7
				},
				{
					"scenarioHeading": "Delete the created questions",
					"tags": [],
					"executionTime": 637,
					"executionStatus": "fail",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Delete a Question using Question Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 35,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions\n\n",
									"HTTP Method is: DELETE\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the path parameters as follows",
							"table": {
								"headers": [
									"Path Parameter",
									"Path Value"
								],
								"rows": [
									{
										"cells": [
											"questionId",
											"5c7e3299c5131e001049ac37"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Path parameters which will append to the request URL:/5c7e3299c5131e001049ac37\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 602,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint: \nhttp://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3299c5131e001049ac37\n\n",
									"HTTP Method is: DELETE\n\n",
									"Response Time is: 501ms\n\n",
									"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
									"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:28 GMT\nLocation=https://questionservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/questions/5c7e3299c5131e001049ac37\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"204\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "fail",
								"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
								"screenshot": "",
								"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [204] but found [301]",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 8
				}
			],
			"isTableDriven": true,
			"datatable": {
				"headers": [
					"questionId"
				],
				"rows": [
					{
						"cells": [
							"5c7e3292c5131e001049ac2f"
						]
					},
					{
						"cells": [
							"5c7e3293c5131e001049ac30"
						]
					},
					{
						"cells": [
							"5c7e3294c5131e001049ac31"
						]
					},
					{
						"cells": [
							"5c7e3295c5131e001049ac32"
						]
					},
					{
						"cells": [
							"5c7e3296c5131e001049ac33"
						]
					},
					{
						"cells": [
							"5c7e3297c5131e001049ac34"
						]
					},
					{
						"cells": [
							"5c7e3298c5131e001049ac35"
						]
					},
					{
						"cells": [
							"5c7e3298c5131e001049ac36"
						]
					},
					{
						"cells": [
							"5c7e3299c5131e001049ac37"
						]
					}
				]
			},
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 9,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Reading Values from Data Stores Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Data Stores\\02. Reading Values from Data Stores.spec",
			"tags": [],
			"executionTime": 2,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Reading Values from Data Stores",
					"tags": [],
					"executionTime": 2,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda12"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda12"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Password1"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"Osanda12\" is successfully saved as a text in Scenario Data Store [variable1]",
									"\"Osanda12\" is successfully saved as a text in Specification Data Store [variable2]",
									"\"Password1\" is successfully saved as a text in Scenario Data Store [variable3]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user read the values from data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Suite",
											"variable4"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Suite",
											"variable4",
											"Gauge Framework"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Suite Data Store [variable4] is: \"Gauge Framework\"\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the values inside the data stores not equal to the following",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Expected Value"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"variable1",
											"Osanda Deshan"
										]
									},
									{
										"cells": [
											"Specification",
											"variable2",
											"Osanda Nimalarathna"
										]
									},
									{
										"cells": [
											"Scenario",
											"variable3",
											"Software Automation"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [variable1] is: \"Osanda12\"\n\n",
									"Text inside Specification Data Store [variable2] is: \"Osanda12\"\n\n",
									"Text inside Scenario Data Store [variable3] is: \"Password1\"\n\n"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Text Files Operations Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\01. Text files operations.spec",
			"tags": [],
			"executionTime": 5321,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Invoke PI API in Staging Environment using valid username and password using payload text file",
					"tags": [
						"get_pi_token",
						"staging"
					],
					"executionTime": 1491,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 44,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1441,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1315ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjczLCJpYXQiOjE1NTE3NzQ0NzIsInNlc3NpZCI6IjRmZjQ4YjQ1LTE0MmItNDA3Mi05ZWZkLTM1YTZkYmZkYTU4NCJ9.cTnpmcXt_WcCylFv4A1rPFNrW1BbzvoPa22cvt_IezLrmbzxggBrjDtojdIgKQ6EW6GKBG0Kbr8ZHsSmmn51ehOPaG1q6aMonVZJB5q29CRu1XjIWfxWKDrVZOXwZAPNhLipMmZhFNmRU_bJkb572LEIbLIS3Oarwve9BxV66YQ\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:27:52 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=c5nGOj7upB8qSNiFL6l3TrhzfzHE2hQGVIwkOm/OpCzHy8wo0T3glEJ+6EQl+05EqGJQU0nd7CiXkPHCRa6XFY73QZOAikUHE81KK+9HO75faQCYzS0x+yrCMRlZ; Expires=Tue, 12 Mar 2019 08:27:52 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=e5103a60-c445-48a9-9a42-89a097aa7c6b\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjczLCJpYXQiOjE1NTE3NzQ0NzIsInNlc3NpZCI6IjRmZjQ4YjQ1LTE0MmItNDA3Mi05ZWZkLTM1YTZkYmZkYTU4NCJ9.cTnpmcXt_WcCylFv4A1rPFNrW1BbzvoPa22cvt_IezLrmbzxggBrjDtojdIgKQ6EW6GKBG0Kbr8ZHsSmmn51ehOPaG1q6aMonVZJB5q29CRu1XjIWfxWKDrVZOXwZAPNhLipMmZhFNmRU_bJkb572LEIbLIS3Oarwve9BxV66YQ"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Existence in the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"isExists"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"true"
										]
									},
									{
										"cells": [
											"$.osa",
											"false"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values of the response into text files",
							"table": {
								"headers": [
									"JSON Path",
									"Text File Path"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"/resources/text_files/response_data/status.txt"
										]
									},
									{
										"cells": [
											"$.data",
											"/resources/text_files/response_data/token.txt"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [
									"Successfully saved the value inside \"$.status\" into the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI/resources/text_files/response_data/status.txt\"",
									"Successfully saved the value inside \"$.data\" into the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI/resources/text_files/response_data/token.txt\""
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Get a category",
					"tags": [],
					"executionTime": 3830,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get All Categories in Deck Service\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 42,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/categories\n\n",
									"HTTP Method is: GET\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"No"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjczLCJpYXQiOjE1NTE3NzQ0NzIsInNlc3NpZCI6IjRmZjQ4YjQ1LTE0MmItNDA3Mi05ZWZkLTM1YTZkYmZkYTU4NCJ9.cTnpmcXt_WcCylFv4A1rPFNrW1BbzvoPa22cvt_IezLrmbzxggBrjDtojdIgKQ6EW6GKBG0Kbr8ZHsSmmn51ehOPaG1q6aMonVZJB5q29CRu1XjIWfxWKDrVZOXwZAPNhLipMmZhFNmRU_bJkb572LEIbLIS3Oarwve9BxV66YQ"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3787,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/categories\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 2068ms\n\n",
									"Response is: \n[\n    {\n        \"id\": \"5b21e8e693cee27c9a02d8dc\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-14T04:02:46.568Z\",\n        \"updatedAt\": \"2018-06-14T04:02:46.568Z\"\n    },\n    {\n        \"id\": \"5b21e8e838ade7422d7c500d\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-14T04:02:48.622Z\",\n        \"updatedAt\": \"2018-06-14T04:02:48.622Z\"\n    },\n    {\n        \"id\": \"5b21e8ea93cee27c9a02d8dd\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-14T04:02:50.661Z\",\n        \"updatedAt\": \"2018-06-14T04:02:50.661Z\"\n    },\n    {\n        \"id\": \"5b21e8ec38ade7422d7c500e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-14T04:02:52.669Z\",\n        \"updatedAt\": \"2018-06-14T04:02:52.669Z\"\n    },\n    {\n        \"id\": \"5b21e8ee93cee27c9a02d8de\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-14T04:02:54.702Z\",\n        \"updatedAt\": \"2018-06-14T04:02:54.702Z\"\n    },\n    {\n        \"id\": \"5b21e8f038ade7422d7c500f\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-14T04:02:56.714Z\",\n        \"updatedAt\": \"2018-06-14T04:02:56.714Z\"\n    },\n    {\n        \"id\": \"5b21e8f293cee27c9a02d8df\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-14T04:02:58.719Z\",\n        \"updatedAt\": \"2018-06-14T04:02:58.719Z\"\n    },\n    {\n        \"id\": \"5b21e90293cee27c9a02d8e1\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-14T04:03:14.921Z\",\n        \"updatedAt\": \"2018-06-14T04:03:16.929Z\"\n    },\n    {\n        \"id\": \"5b21e90693cee27c9a02d8e2\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-14T04:03:18.938Z\",\n        \"updatedAt\": \"2018-06-14T04:03:20.953Z\"\n    },\n    {\n        \"id\": \"5b21e90a93cee27c9a02d8e3\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-14T04:03:22.965Z\",\n        \"updatedAt\": \"2018-06-14T04:03:24.975Z\"\n    },\n    {\n        \"id\": \"5b21e90e93cee27c9a02d8e4\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-14T04:03:26.989Z\",\n        \"updatedAt\": \"2018-06-14T04:03:29.004Z\"\n    },\n    {\n        \"id\": \"5b21e91293cee27c9a02d8e5\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-14T04:03:30.995Z\",\n        \"updatedAt\": \"2018-06-14T04:03:33.006Z\"\n    },\n    {\n        \"id\": \"5b21e91793cee27c9a02d8e6\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-14T04:03:35.070Z\",\n        \"updatedAt\": \"2018-06-14T04:03:37.069Z\"\n    },\n    {\n        \"id\": \"5b21e91b93cee27c9a02d8e7\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-14T04:03:39.092Z\",\n        \"updatedAt\": \"2018-06-14T04:03:41.106Z\"\n    },\n    {\n        \"id\": \"5b21e91f93cee27c9a02d8e8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T04:03:43.103Z\",\n        \"updatedAt\": \"2018-06-14T04:03:43.103Z\"\n    },\n    {\n        \"id\": \"5b21e92338ade7422d7c5010\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T04:03:47.443Z\",\n        \"updatedAt\": \"2018-06-14T04:03:47.443Z\"\n    },\n    {\n        \"id\": \"5b21e92b38ade7422d7c5011\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-14T04:03:55.465Z\",\n        \"updatedAt\": \"2018-06-14T04:03:55.465Z\"\n    },\n    {\n        \"id\": \"5b24d8d038ade7422d7c5042\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-16T09:30:56.888Z\",\n        \"updatedAt\": \"2018-06-16T09:30:56.888Z\"\n    },\n    {\n        \"id\": \"5b24d8d393cee27c9a02d914\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-16T09:30:59.945Z\",\n        \"updatedAt\": \"2018-06-16T09:30:59.945Z\"\n    },\n    {\n        \"id\": \"5b24d8d638ade7422d7c5043\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-16T09:31:02.917Z\",\n        \"updatedAt\": \"2018-06-16T09:31:02.917Z\"\n    },\n    {\n        \"id\": \"5b24d8da93cee27c9a02d915\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-16T09:31:06.304Z\",\n        \"updatedAt\": \"2018-06-16T09:31:06.304Z\"\n    },\n    {\n        \"id\": \"5b24d8dd38ade7422d7c5044\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-16T09:31:09.376Z\",\n        \"updatedAt\": \"2018-06-16T09:31:09.376Z\"\n    },\n    {\n        \"id\": \"5b24d8e193cee27c9a02d916\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-16T09:31:13.155Z\",\n        \"updatedAt\": \"2018-06-16T09:31:13.155Z\"\n    },\n    {\n        \"id\": \"5b24d8e438ade7422d7c5045\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-16T09:31:16.331Z\",\n        \"updatedAt\": \"2018-06-16T09:31:16.331Z\"\n    },\n    {\n        \"id\": \"5b24d8fe38ade7422d7c5047\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-16T09:31:42.034Z\",\n        \"updatedAt\": \"2018-06-16T09:31:45.214Z\"\n    },\n    {\n        \"id\": \"5b24d90438ade7422d7c5048\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-16T09:31:48.689Z\",\n        \"updatedAt\": \"2018-06-16T09:31:52.074Z\"\n    },\n    {\n        \"id\": \"5b24d90b38ade7422d7c5049\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-16T09:31:55.860Z\",\n        \"updatedAt\": \"2018-06-16T09:31:59.987Z\"\n    },\n    {\n        \"id\": \"5b24d91338ade7422d7c504a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-16T09:32:03.329Z\",\n        \"updatedAt\": \"2018-06-16T09:32:06.709Z\"\n    },\n    {\n        \"id\": \"5b24d91a38ade7422d7c504b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-16T09:32:10.191Z\",\n        \"updatedAt\": \"2018-06-16T09:32:13.570Z\"\n    },\n    {\n        \"id\": \"5b24d92138ade7422d7c504c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-16T09:32:17.206Z\",\n        \"updatedAt\": \"2018-06-16T09:32:20.330Z\"\n    },\n    {\n        \"id\": \"5b24d92738ade7422d7c504d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-16T09:32:23.816Z\",\n        \"updatedAt\": \"2018-06-16T09:32:26.985Z\"\n    },\n    {\n        \"id\": \"5b24d92e38ade7422d7c504e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-16T09:32:30.879Z\",\n        \"updatedAt\": \"2018-06-16T09:32:30.879Z\"\n    },\n    {\n        \"id\": \"5b24d93538ade7422d7c504f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-16T09:32:37.839Z\",\n        \"updatedAt\": \"2018-06-16T09:32:37.839Z\"\n    },\n    {\n        \"id\": \"5b24d94438ade7422d7c5050\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-16T09:32:52.176Z\",\n        \"updatedAt\": \"2018-06-16T09:32:52.176Z\"\n    },\n    {\n        \"id\": \"5b262e1938ade7422d7c50a6\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-17T09:47:05.391Z\",\n        \"updatedAt\": \"2018-06-17T09:47:05.391Z\"\n    },\n    {\n        \"id\": \"5b262e1c38ade7422d7c50a7\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-17T09:47:08.435Z\",\n        \"updatedAt\": \"2018-06-17T09:47:08.435Z\"\n    },\n    {\n        \"id\": \"5b262e1f93cee27c9a02d970\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-17T09:47:11.223Z\",\n        \"updatedAt\": \"2018-06-17T09:47:11.223Z\"\n    },\n    {\n        \"id\": \"5b262e2293cee27c9a02d971\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-17T09:47:14.026Z\",\n        \"updatedAt\": \"2018-06-17T09:47:14.026Z\"\n    },\n    {\n        \"id\": \"5b262e2438ade7422d7c50a9\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-17T09:47:16.874Z\",\n        \"updatedAt\": \"2018-06-17T09:47:16.874Z\"\n    },\n    {\n        \"id\": \"5b262e2793cee27c9a02d972\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-17T09:47:19.633Z\",\n        \"updatedAt\": \"2018-06-17T09:47:19.633Z\"\n    },\n    {\n        \"id\": \"5b262e2a93cee27c9a02d973\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-17T09:47:22.672Z\",\n        \"updatedAt\": \"2018-06-17T09:47:22.672Z\"\n    },\n    {\n        \"id\": \"5b262e3f38ade7422d7c50ac\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-17T09:47:43.945Z\",\n        \"updatedAt\": \"2018-06-17T09:47:46.504Z\"\n    },\n    {\n        \"id\": \"5b262e4538ade7422d7c50ad\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-17T09:47:49.065Z\",\n        \"updatedAt\": \"2018-06-17T09:47:51.640Z\"\n    },\n    {\n        \"id\": \"5b262e4a38ade7422d7c50ae\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-17T09:47:54.234Z\",\n        \"updatedAt\": \"2018-06-17T09:47:57.234Z\"\n    },\n    {\n        \"id\": \"5b262e4f38ade7422d7c50af\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-17T09:47:59.853Z\",\n        \"updatedAt\": \"2018-06-17T09:48:02.764Z\"\n    },\n    {\n        \"id\": \"5b262e5538ade7422d7c50b0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-17T09:48:05.473Z\",\n        \"updatedAt\": \"2018-06-17T09:48:08.439Z\"\n    },\n    {\n        \"id\": \"5b262e5a38ade7422d7c50b1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-17T09:48:10.923Z\",\n        \"updatedAt\": \"2018-06-17T09:48:13.557Z\"\n    },\n    {\n        \"id\": \"5b262e6038ade7422d7c50b2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-17T09:48:16.618Z\",\n        \"updatedAt\": \"2018-06-17T09:48:19.245Z\"\n    },\n    {\n        \"id\": \"5b262e6293cee27c9a02d974\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-17T09:48:18.521Z\",\n        \"updatedAt\": \"2018-06-17T09:48:18.521Z\"\n    },\n    {\n        \"id\": \"5b262e6593cee27c9a02d975\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-17T09:48:21.126Z\",\n        \"updatedAt\": \"2018-06-17T09:48:21.126Z\"\n    },\n    {\n        \"id\": \"5b262e6538ade7422d7c50b3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:48:21.943Z\",\n        \"updatedAt\": \"2018-06-17T09:48:21.943Z\"\n    },\n    {\n        \"id\": \"5b262e6793cee27c9a02d976\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-17T09:48:23.936Z\",\n        \"updatedAt\": \"2018-06-17T09:48:23.936Z\"\n    },\n    {\n        \"id\": \"5b262e6a93cee27c9a02d977\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-17T09:48:26.786Z\",\n        \"updatedAt\": \"2018-06-17T09:48:26.786Z\"\n    },\n    {\n        \"id\": \"5b262e6b38ade7422d7c50b4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:48:27.178Z\",\n        \"updatedAt\": \"2018-06-17T09:48:27.178Z\"\n    },\n    {\n        \"id\": \"5b262e6d93cee27c9a02d978\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-17T09:48:29.631Z\",\n        \"updatedAt\": \"2018-06-17T09:48:29.631Z\"\n    },\n    {\n        \"id\": \"5b262e6f93cee27c9a02d979\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-17T09:48:31.976Z\",\n        \"updatedAt\": \"2018-06-17T09:48:31.976Z\"\n    },\n    {\n        \"id\": \"5b262e7293cee27c9a02d97a\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-17T09:48:34.621Z\",\n        \"updatedAt\": \"2018-06-17T09:48:34.621Z\"\n    },\n    {\n        \"id\": \"5b262e7638ade7422d7c50b5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:48:38.005Z\",\n        \"updatedAt\": \"2018-06-17T09:48:38.005Z\"\n    },\n    {\n        \"id\": \"5b262e8738ade7422d7c50b7\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-06-17T09:48:55.910Z\",\n        \"updatedAt\": \"2018-06-17T09:48:58.753Z\"\n    },\n    {\n        \"id\": \"5b262e8d38ade7422d7c50b8\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-06-17T09:49:01.255Z\",\n        \"updatedAt\": \"2018-06-17T09:49:03.873Z\"\n    },\n    {\n        \"id\": \"5b262e9238ade7422d7c50b9\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-06-17T09:49:06.850Z\",\n        \"updatedAt\": \"2018-06-17T09:49:09.634Z\"\n    },\n    {\n        \"id\": \"5b262e9838ade7422d7c50ba\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-06-17T09:49:12.474Z\",\n        \"updatedAt\": \"2018-06-17T09:49:15.124Z\"\n    },\n    {\n        \"id\": \"5b262e9d38ade7422d7c50bb\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-06-17T09:49:17.830Z\",\n        \"updatedAt\": \"2018-06-17T09:49:20.898Z\"\n    },\n    {\n        \"id\": \"5b262ea338ade7422d7c50bc\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-06-17T09:49:23.633Z\",\n        \"updatedAt\": \"2018-06-17T09:49:26.057Z\"\n    },\n    {\n        \"id\": \"5b262ea838ade7422d7c50bd\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-06-17T09:49:28.905Z\",\n        \"updatedAt\": \"2018-06-17T09:49:31.657Z\"\n    },\n    {\n        \"id\": \"5b262eae38ade7422d7c50be\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:49:34.539Z\",\n        \"updatedAt\": \"2018-06-17T09:49:34.539Z\"\n    },\n    {\n        \"id\": \"5b262eb338ade7422d7c50bf\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:49:39.753Z\",\n        \"updatedAt\": \"2018-06-17T09:49:39.753Z\"\n    },\n    {\n        \"id\": \"5b262ebe38ade7422d7c50c0\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-06-17T09:49:50.934Z\",\n        \"updatedAt\": \"2018-06-17T09:49:50.934Z\"\n    },\n    {\n        \"id\": \"5b61b2401d8d620010d63320\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-01T13:14:40.620Z\",\n        \"updatedAt\": \"2018-08-01T13:14:40.620Z\"\n    },\n    {\n        \"id\": \"5b61b2411d8d620010d63321\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-01T13:14:41.577Z\",\n        \"updatedAt\": \"2018-08-01T13:14:41.577Z\"\n    },\n    {\n        \"id\": \"5b61b2421d8d620010d63322\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-01T13:14:42.520Z\",\n        \"updatedAt\": \"2018-08-01T13:14:42.520Z\"\n    },\n    {\n        \"id\": \"5b61b2431d8d620010d63323\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-01T13:14:43.472Z\",\n        \"updatedAt\": \"2018-08-01T13:14:43.472Z\"\n    },\n    {\n        \"id\": \"5b61b2441d8d620010d63324\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-01T13:14:44.506Z\",\n        \"updatedAt\": \"2018-08-01T13:14:44.506Z\"\n    },\n    {\n        \"id\": \"5b61b2451d8d620010d63325\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-01T13:14:45.450Z\",\n        \"updatedAt\": \"2018-08-01T13:14:45.450Z\"\n    },\n    {\n        \"id\": \"5b61b2461d8d620010d63326\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-01T13:14:46.397Z\",\n        \"updatedAt\": \"2018-08-01T13:14:46.397Z\"\n    },\n    {\n        \"id\": \"5b61b2501d8d620010d63328\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-01T13:14:56.980Z\",\n        \"updatedAt\": \"2018-08-01T13:14:57.929Z\"\n    },\n    {\n        \"id\": \"5b61b2521d8d620010d63329\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-01T13:14:58.887Z\",\n        \"updatedAt\": \"2018-08-01T13:14:59.846Z\"\n    },\n    {\n        \"id\": \"5b61b2541d8d620010d6332a\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-01T13:15:00.783Z\",\n        \"updatedAt\": \"2018-08-01T13:15:01.730Z\"\n    },\n    {\n        \"id\": \"5b61b2561d8d620010d6332b\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-01T13:15:02.676Z\",\n        \"updatedAt\": \"2018-08-01T13:15:03.619Z\"\n    },\n    {\n        \"id\": \"5b61b2581d8d620010d6332c\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-01T13:15:04.585Z\",\n        \"updatedAt\": \"2018-08-01T13:15:05.534Z\"\n    },\n    {\n        \"id\": \"5b61b25a1d8d620010d6332d\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-01T13:15:06.602Z\",\n        \"updatedAt\": \"2018-08-01T13:15:07.568Z\"\n    },\n    {\n        \"id\": \"5b61b25c1d8d620010d6332e\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-01T13:15:08.513Z\",\n        \"updatedAt\": \"2018-08-01T13:15:09.976Z\"\n    },\n    {\n        \"id\": \"5b61b25f1d8d620010d6332f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-01T13:15:11.206Z\",\n        \"updatedAt\": \"2018-08-01T13:15:11.206Z\"\n    },\n    {\n        \"id\": \"5b61b2611d8d620010d63330\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-01T13:15:13.119Z\",\n        \"updatedAt\": \"2018-08-01T13:15:13.119Z\"\n    },\n    {\n        \"id\": \"5b61b2641d8d620010d63331\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-01T13:15:16.828Z\",\n        \"updatedAt\": \"2018-08-01T13:15:16.828Z\"\n    },\n    {\n        \"id\": \"5b628d1246e56e001004961b\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T04:48:18.436Z\",\n        \"updatedAt\": \"2018-08-02T04:48:18.436Z\"\n    },\n    {\n        \"id\": \"5b628d1346e56e001004961c\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T04:48:19.409Z\",\n        \"updatedAt\": \"2018-08-02T04:48:19.409Z\"\n    },\n    {\n        \"id\": \"5b628d1446e56e001004961d\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T04:48:20.336Z\",\n        \"updatedAt\": \"2018-08-02T04:48:20.336Z\"\n    },\n    {\n        \"id\": \"5b628d1546e56e001004961e\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T04:48:21.302Z\",\n        \"updatedAt\": \"2018-08-02T04:48:21.302Z\"\n    },\n    {\n        \"id\": \"5b628d1646e56e001004961f\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T04:48:22.227Z\",\n        \"updatedAt\": \"2018-08-02T04:48:22.227Z\"\n    },\n    {\n        \"id\": \"5b628d1746e56e0010049620\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T04:48:23.179Z\",\n        \"updatedAt\": \"2018-08-02T04:48:23.179Z\"\n    },\n    {\n        \"id\": \"5b628d1846e56e0010049621\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T04:48:24.099Z\",\n        \"updatedAt\": \"2018-08-02T04:48:24.099Z\"\n    },\n    {\n        \"id\": \"5b628d1f46e56e0010049623\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T04:48:31.469Z\",\n        \"updatedAt\": \"2018-08-02T04:48:32.392Z\"\n    },\n    {\n        \"id\": \"5b628d2146e56e0010049624\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T04:48:33.401Z\",\n        \"updatedAt\": \"2018-08-02T04:48:34.324Z\"\n    },\n    {\n        \"id\": \"5b628d2346e56e0010049625\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T04:48:35.264Z\",\n        \"updatedAt\": \"2018-08-02T04:48:36.200Z\"\n    },\n    {\n        \"id\": \"5b628d2546e56e0010049626\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T04:48:37.129Z\",\n        \"updatedAt\": \"2018-08-02T04:48:38.090Z\"\n    },\n    {\n        \"id\": \"5b628d2746e56e0010049627\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T04:48:39.051Z\",\n        \"updatedAt\": \"2018-08-02T04:48:40.058Z\"\n    },\n    {\n        \"id\": \"5b628d2846e56e0010049628\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T04:48:40.985Z\",\n        \"updatedAt\": \"2018-08-02T04:48:41.912Z\"\n    },\n    {\n        \"id\": \"5b628d2a46e56e0010049629\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T04:48:42.852Z\",\n        \"updatedAt\": \"2018-08-02T04:48:43.776Z\"\n    },\n    {\n        \"id\": \"5b628d2c46e56e001004962a\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T04:48:44.729Z\",\n        \"updatedAt\": \"2018-08-02T04:48:44.729Z\"\n    },\n    {\n        \"id\": \"5b628d2e46e56e001004962b\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T04:48:46.577Z\",\n        \"updatedAt\": \"2018-08-02T04:48:46.577Z\"\n    },\n    {\n        \"id\": \"5b628d3246e56e001004962c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T04:48:50.441Z\",\n        \"updatedAt\": \"2018-08-02T04:48:50.441Z\"\n    },\n    {\n        \"id\": \"5b62b91f46e56e0010049705\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T07:56:15.020Z\",\n        \"updatedAt\": \"2018-08-02T07:56:15.020Z\"\n    },\n    {\n        \"id\": \"5b62b91f46e56e0010049706\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T07:56:15.977Z\",\n        \"updatedAt\": \"2018-08-02T07:56:15.977Z\"\n    },\n    {\n        \"id\": \"5b62b92146e56e0010049707\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T07:56:17.018Z\",\n        \"updatedAt\": \"2018-08-02T07:56:17.018Z\"\n    },\n    {\n        \"id\": \"5b62b92146e56e0010049708\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T07:56:17.973Z\",\n        \"updatedAt\": \"2018-08-02T07:56:17.973Z\"\n    },\n    {\n        \"id\": \"5b62b92246e56e0010049709\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T07:56:18.931Z\",\n        \"updatedAt\": \"2018-08-02T07:56:18.931Z\"\n    },\n    {\n        \"id\": \"5b62b92346e56e001004970a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T07:56:19.890Z\",\n        \"updatedAt\": \"2018-08-02T07:56:19.890Z\"\n    },\n    {\n        \"id\": \"5b62b92446e56e001004970b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T07:56:20.860Z\",\n        \"updatedAt\": \"2018-08-02T07:56:20.860Z\"\n    },\n    {\n        \"id\": \"5b62b92c46e56e001004970d\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T07:56:28.526Z\",\n        \"updatedAt\": \"2018-08-02T07:56:29.516Z\"\n    },\n    {\n        \"id\": \"5b62b92e46e56e001004970e\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T07:56:30.472Z\",\n        \"updatedAt\": \"2018-08-02T07:56:31.428Z\"\n    },\n    {\n        \"id\": \"5b62b93046e56e001004970f\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T07:56:32.419Z\",\n        \"updatedAt\": \"2018-08-02T07:56:33.404Z\"\n    },\n    {\n        \"id\": \"5b62b93246e56e0010049710\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T07:56:34.346Z\",\n        \"updatedAt\": \"2018-08-02T07:56:35.300Z\"\n    },\n    {\n        \"id\": \"5b62b93446e56e0010049711\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T07:56:36.258Z\",\n        \"updatedAt\": \"2018-08-02T07:56:37.214Z\"\n    },\n    {\n        \"id\": \"5b62b93646e56e0010049712\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T07:56:38.169Z\",\n        \"updatedAt\": \"2018-08-02T07:56:39.137Z\"\n    },\n    {\n        \"id\": \"5b62b93846e56e0010049713\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T07:56:40.111Z\",\n        \"updatedAt\": \"2018-08-02T07:56:41.086Z\"\n    },\n    {\n        \"id\": \"5b62b93a46e56e0010049714\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T07:56:42.049Z\",\n        \"updatedAt\": \"2018-08-02T07:56:42.049Z\"\n    },\n    {\n        \"id\": \"5b62b93c46e56e0010049715\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T07:56:44.002Z\",\n        \"updatedAt\": \"2018-08-02T07:56:44.002Z\"\n    },\n    {\n        \"id\": \"5b62b94046e56e0010049716\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T07:56:48.146Z\",\n        \"updatedAt\": \"2018-08-02T07:56:48.146Z\"\n    },\n    {\n        \"id\": \"5b62fe3646e56e0010049846\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T12:51:02.659Z\",\n        \"updatedAt\": \"2018-08-02T12:51:02.659Z\"\n    },\n    {\n        \"id\": \"5b62fe3746e56e0010049847\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T12:51:03.620Z\",\n        \"updatedAt\": \"2018-08-02T12:51:03.620Z\"\n    },\n    {\n        \"id\": \"5b62fe3846e56e0010049848\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T12:51:04.556Z\",\n        \"updatedAt\": \"2018-08-02T12:51:04.556Z\"\n    },\n    {\n        \"id\": \"5b62fe3946e56e0010049849\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T12:51:05.488Z\",\n        \"updatedAt\": \"2018-08-02T12:51:05.488Z\"\n    },\n    {\n        \"id\": \"5b62fe3a46e56e001004984a\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T12:51:06.462Z\",\n        \"updatedAt\": \"2018-08-02T12:51:06.462Z\"\n    },\n    {\n        \"id\": \"5b62fe3b46e56e001004984b\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T12:51:07.392Z\",\n        \"updatedAt\": \"2018-08-02T12:51:07.392Z\"\n    },\n    {\n        \"id\": \"5b62fe3c46e56e001004984c\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T12:51:08.332Z\",\n        \"updatedAt\": \"2018-08-02T12:51:08.332Z\"\n    },\n    {\n        \"id\": \"5b62fe4446e56e001004984e\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-02T12:51:16.607Z\",\n        \"updatedAt\": \"2018-08-02T12:51:17.539Z\"\n    },\n    {\n        \"id\": \"5b62fe4646e56e001004984f\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-02T12:51:18.473Z\",\n        \"updatedAt\": \"2018-08-02T12:51:19.404Z\"\n    },\n    {\n        \"id\": \"5b62fe4846e56e0010049850\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-02T12:51:20.336Z\",\n        \"updatedAt\": \"2018-08-02T12:51:21.270Z\"\n    },\n    {\n        \"id\": \"5b62fe4a46e56e0010049851\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-02T12:51:22.201Z\",\n        \"updatedAt\": \"2018-08-02T12:51:23.134Z\"\n    },\n    {\n        \"id\": \"5b62fe4c46e56e0010049852\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-02T12:51:24.068Z\",\n        \"updatedAt\": \"2018-08-02T12:51:25.000Z\"\n    },\n    {\n        \"id\": \"5b62fe4d46e56e0010049853\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-02T12:51:25.928Z\",\n        \"updatedAt\": \"2018-08-02T12:51:26.860Z\"\n    },\n    {\n        \"id\": \"5b62fe4f46e56e0010049854\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-02T12:51:27.796Z\",\n        \"updatedAt\": \"2018-08-02T12:51:28.726Z\"\n    },\n    {\n        \"id\": \"5b62fe5146e56e0010049855\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T12:51:29.659Z\",\n        \"updatedAt\": \"2018-08-02T12:51:29.659Z\"\n    },\n    {\n        \"id\": \"5b62fe5346e56e0010049856\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T12:51:31.526Z\",\n        \"updatedAt\": \"2018-08-02T12:51:31.526Z\"\n    },\n    {\n        \"id\": \"5b62fe5746e56e0010049857\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-02T12:51:35.187Z\",\n        \"updatedAt\": \"2018-08-02T12:51:35.187Z\"\n    },\n    {\n        \"id\": \"5b63dde03654650010761af6\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T04:45:20.180Z\",\n        \"updatedAt\": \"2018-08-03T04:45:20.180Z\"\n    },\n    {\n        \"id\": \"5b63dde13654650010761af7\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T04:45:21.123Z\",\n        \"updatedAt\": \"2018-08-03T04:45:21.123Z\"\n    },\n    {\n        \"id\": \"5b63dde23654650010761af8\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T04:45:22.025Z\",\n        \"updatedAt\": \"2018-08-03T04:45:22.025Z\"\n    },\n    {\n        \"id\": \"5b63dde33654650010761af9\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T04:45:23.011Z\",\n        \"updatedAt\": \"2018-08-03T04:45:23.011Z\"\n    },\n    {\n        \"id\": \"5b63dde33654650010761afa\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T04:45:23.911Z\",\n        \"updatedAt\": \"2018-08-03T04:45:23.911Z\"\n    },\n    {\n        \"id\": \"5b63dde43654650010761afb\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T04:45:24.868Z\",\n        \"updatedAt\": \"2018-08-03T04:45:24.868Z\"\n    },\n    {\n        \"id\": \"5b63dde53654650010761afc\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T04:45:25.820Z\",\n        \"updatedAt\": \"2018-08-03T04:45:25.820Z\"\n    },\n    {\n        \"id\": \"5b63dded3654650010761afe\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T04:45:33.087Z\",\n        \"updatedAt\": \"2018-08-03T04:45:33.989Z\"\n    },\n    {\n        \"id\": \"5b63ddee3654650010761aff\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T04:45:34.887Z\",\n        \"updatedAt\": \"2018-08-03T04:45:35.789Z\"\n    },\n    {\n        \"id\": \"5b63ddf03654650010761b00\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T04:45:36.687Z\",\n        \"updatedAt\": \"2018-08-03T04:45:37.591Z\"\n    },\n    {\n        \"id\": \"5b63ddf23654650010761b01\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T04:45:38.495Z\",\n        \"updatedAt\": \"2018-08-03T04:45:39.431Z\"\n    },\n    {\n        \"id\": \"5b63ddf43654650010761b02\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T04:45:40.334Z\",\n        \"updatedAt\": \"2018-08-03T04:45:41.232Z\"\n    },\n    {\n        \"id\": \"5b63ddf63654650010761b03\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T04:45:42.131Z\",\n        \"updatedAt\": \"2018-08-03T04:45:43.029Z\"\n    },\n    {\n        \"id\": \"5b63ddf73654650010761b04\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T04:45:43.926Z\",\n        \"updatedAt\": \"2018-08-03T04:45:44.828Z\"\n    },\n    {\n        \"id\": \"5b63ddf93654650010761b05\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T04:45:45.740Z\",\n        \"updatedAt\": \"2018-08-03T04:45:45.740Z\"\n    },\n    {\n        \"id\": \"5b63ddfb3654650010761b06\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T04:45:47.536Z\",\n        \"updatedAt\": \"2018-08-03T04:45:47.536Z\"\n    },\n    {\n        \"id\": \"5b63ddff3654650010761b07\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T04:45:51.080Z\",\n        \"updatedAt\": \"2018-08-03T04:45:51.080Z\"\n    },\n    {\n        \"id\": \"5b640c0460806e000f0bb38a\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T08:02:12.714Z\",\n        \"updatedAt\": \"2018-08-03T08:02:12.714Z\"\n    },\n    {\n        \"id\": \"5b640c0660806e000f0bb38b\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T08:02:14.518Z\",\n        \"updatedAt\": \"2018-08-03T08:02:14.518Z\"\n    },\n    {\n        \"id\": \"5b640c0760806e000f0bb38c\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T08:02:15.816Z\",\n        \"updatedAt\": \"2018-08-03T08:02:15.816Z\"\n    },\n    {\n        \"id\": \"5b640c0a60806e000f0bb38d\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T08:02:18.010Z\",\n        \"updatedAt\": \"2018-08-03T08:02:18.010Z\"\n    },\n    {\n        \"id\": \"5b640c0b60806e000f0bb38e\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T08:02:19.565Z\",\n        \"updatedAt\": \"2018-08-03T08:02:19.565Z\"\n    },\n    {\n        \"id\": \"5b640c0d60806e000f0bb38f\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T08:02:21.301Z\",\n        \"updatedAt\": \"2018-08-03T08:02:21.301Z\"\n    },\n    {\n        \"id\": \"5b640c0f60806e000f0bb390\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T08:02:23.564Z\",\n        \"updatedAt\": \"2018-08-03T08:02:23.564Z\"\n    },\n    {\n        \"id\": \"5b640c1e60806e000f0bb392\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T08:02:38.372Z\",\n        \"updatedAt\": \"2018-08-03T08:02:40.668Z\"\n    },\n    {\n        \"id\": \"5b640c2260806e000f0bb393\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T08:02:42.285Z\",\n        \"updatedAt\": \"2018-08-03T08:02:44.204Z\"\n    },\n    {\n        \"id\": \"5b640c2560806e000f0bb394\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T08:02:45.972Z\",\n        \"updatedAt\": \"2018-08-03T08:02:47.897Z\"\n    },\n    {\n        \"id\": \"5b640c2960806e000f0bb395\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T08:02:49.703Z\",\n        \"updatedAt\": \"2018-08-03T08:02:50.935Z\"\n    },\n    {\n        \"id\": \"5b640c2c60806e000f0bb396\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T08:02:52.914Z\",\n        \"updatedAt\": \"2018-08-03T08:02:54.671Z\"\n    },\n    {\n        \"id\": \"5b640c3060806e000f0bb397\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T08:02:56.208Z\",\n        \"updatedAt\": \"2018-08-03T08:02:57.504Z\"\n    },\n    {\n        \"id\": \"5b640c3360806e000f0bb398\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T08:02:59.157Z\",\n        \"updatedAt\": \"2018-08-03T08:03:01.628Z\"\n    },\n    {\n        \"id\": \"5b640c3760806e000f0bb399\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T08:03:03.859Z\",\n        \"updatedAt\": \"2018-08-03T08:03:03.859Z\"\n    },\n    {\n        \"id\": \"5b640c3b60806e000f0bb39a\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T08:03:07.406Z\",\n        \"updatedAt\": \"2018-08-03T08:03:07.406Z\"\n    },\n    {\n        \"id\": \"5b640c4160806e000f0bb39b\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T08:03:13.861Z\",\n        \"updatedAt\": \"2018-08-03T08:03:13.861Z\"\n    },\n    {\n        \"id\": \"5b643f433db017001001d57d\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T11:40:51.330Z\",\n        \"updatedAt\": \"2018-08-03T11:40:51.330Z\"\n    },\n    {\n        \"id\": \"5b643f443db017001001d57e\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T11:40:52.318Z\",\n        \"updatedAt\": \"2018-08-03T11:40:52.318Z\"\n    },\n    {\n        \"id\": \"5b643f453db017001001d57f\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T11:40:53.308Z\",\n        \"updatedAt\": \"2018-08-03T11:40:53.308Z\"\n    },\n    {\n        \"id\": \"5b643f463db017001001d580\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T11:40:54.247Z\",\n        \"updatedAt\": \"2018-08-03T11:40:54.247Z\"\n    },\n    {\n        \"id\": \"5b643f473db017001001d581\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T11:40:55.249Z\",\n        \"updatedAt\": \"2018-08-03T11:40:55.249Z\"\n    },\n    {\n        \"id\": \"5b643f483db017001001d582\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T11:40:56.200Z\",\n        \"updatedAt\": \"2018-08-03T11:40:56.200Z\"\n    },\n    {\n        \"id\": \"5b643f493db017001001d583\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T11:40:57.179Z\",\n        \"updatedAt\": \"2018-08-03T11:40:57.179Z\"\n    },\n    {\n        \"id\": \"5b643f503db017001001d585\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-03T11:41:04.851Z\",\n        \"updatedAt\": \"2018-08-03T11:41:05.787Z\"\n    },\n    {\n        \"id\": \"5b643f523db017001001d586\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-03T11:41:06.718Z\",\n        \"updatedAt\": \"2018-08-03T11:41:07.655Z\"\n    },\n    {\n        \"id\": \"5b643f543db017001001d587\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-03T11:41:08.604Z\",\n        \"updatedAt\": \"2018-08-03T11:41:09.592Z\"\n    },\n    {\n        \"id\": \"5b643f563db017001001d588\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-03T11:41:10.534Z\",\n        \"updatedAt\": \"2018-08-03T11:41:11.491Z\"\n    },\n    {\n        \"id\": \"5b643f583db017001001d589\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-03T11:41:12.449Z\",\n        \"updatedAt\": \"2018-08-03T11:41:13.436Z\"\n    },\n    {\n        \"id\": \"5b643f5a3db017001001d58a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-03T11:41:14.426Z\",\n        \"updatedAt\": \"2018-08-03T11:41:15.383Z\"\n    },\n    {\n        \"id\": \"5b643f5c3db017001001d58b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-03T11:41:16.319Z\",\n        \"updatedAt\": \"2018-08-03T11:41:17.303Z\"\n    },\n    {\n        \"id\": \"5b643f5e3db017001001d58c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T11:41:18.320Z\",\n        \"updatedAt\": \"2018-08-03T11:41:18.320Z\"\n    },\n    {\n        \"id\": \"5b643f603db017001001d58d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T11:41:20.827Z\",\n        \"updatedAt\": \"2018-08-03T11:41:20.827Z\"\n    },\n    {\n        \"id\": \"5b643f653db017001001d58e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-03T11:41:25.232Z\",\n        \"updatedAt\": \"2018-08-03T11:41:25.232Z\"\n    },\n    {\n        \"id\": \"5b67d27b3db017001001d635\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-06T04:45:47.667Z\",\n        \"updatedAt\": \"2018-08-06T04:45:47.667Z\"\n    },\n    {\n        \"id\": \"5b67d27c3db017001001d636\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-06T04:45:48.586Z\",\n        \"updatedAt\": \"2018-08-06T04:45:48.586Z\"\n    },\n    {\n        \"id\": \"5b67d27d3db017001001d637\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-06T04:45:49.505Z\",\n        \"updatedAt\": \"2018-08-06T04:45:49.505Z\"\n    },\n    {\n        \"id\": \"5b67d27e3db017001001d638\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-06T04:45:50.423Z\",\n        \"updatedAt\": \"2018-08-06T04:45:50.423Z\"\n    },\n    {\n        \"id\": \"5b67d27f3db017001001d639\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-06T04:45:51.337Z\",\n        \"updatedAt\": \"2018-08-06T04:45:51.337Z\"\n    },\n    {\n        \"id\": \"5b67d2803db017001001d63a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-06T04:45:52.258Z\",\n        \"updatedAt\": \"2018-08-06T04:45:52.258Z\"\n    },\n    {\n        \"id\": \"5b67d2813db017001001d63b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-06T04:45:53.222Z\",\n        \"updatedAt\": \"2018-08-06T04:45:53.222Z\"\n    },\n    {\n        \"id\": \"5b67d2883db017001001d63d\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-08-06T04:46:00.444Z\",\n        \"updatedAt\": \"2018-08-06T04:46:01.365Z\"\n    },\n    {\n        \"id\": \"5b67d28a3db017001001d63e\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-08-06T04:46:02.300Z\",\n        \"updatedAt\": \"2018-08-06T04:46:03.233Z\"\n    },\n    {\n        \"id\": \"5b67d28c3db017001001d63f\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-08-06T04:46:04.145Z\",\n        \"updatedAt\": \"2018-08-06T04:46:05.074Z\"\n    },\n    {\n        \"id\": \"5b67d28d3db017001001d640\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-08-06T04:46:05.986Z\",\n        \"updatedAt\": \"2018-08-06T04:46:06.903Z\"\n    },\n    {\n        \"id\": \"5b67d28f3db017001001d641\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-08-06T04:46:07.825Z\",\n        \"updatedAt\": \"2018-08-06T04:46:08.744Z\"\n    },\n    {\n        \"id\": \"5b67d2923db017001001d642\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-08-06T04:46:10.122Z\",\n        \"updatedAt\": \"2018-08-06T04:46:11.498Z\"\n    },\n    {\n        \"id\": \"5b67d2943db017001001d643\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-08-06T04:46:12.879Z\",\n        \"updatedAt\": \"2018-08-06T04:46:13.794Z\"\n    },\n    {\n        \"id\": \"5b67d2973db017001001d644\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-06T04:46:15.167Z\",\n        \"updatedAt\": \"2018-08-06T04:46:15.167Z\"\n    },\n    {\n        \"id\": \"5b67d2993db017001001d645\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-06T04:46:17.009Z\",\n        \"updatedAt\": \"2018-08-06T04:46:17.009Z\"\n    },\n    {\n        \"id\": \"5b67d29c3db017001001d646\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-08-06T04:46:20.852Z\",\n        \"updatedAt\": \"2018-08-06T04:46:20.852Z\"\n    },\n    {\n        \"id\": \"5ba1d38872e5210010f4cdfd\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-19T04:41:44.648Z\",\n        \"updatedAt\": \"2018-09-19T04:41:44.648Z\"\n    },\n    {\n        \"id\": \"5ba1d38972e5210010f4cdfe\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-19T04:41:45.624Z\",\n        \"updatedAt\": \"2018-09-19T04:41:45.624Z\"\n    },\n    {\n        \"id\": \"5ba1d38a72e5210010f4cdff\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-19T04:41:46.886Z\",\n        \"updatedAt\": \"2018-09-19T04:41:46.886Z\"\n    },\n    {\n        \"id\": \"5ba1d38f72e5210010f4ce00\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-19T04:41:51.117Z\",\n        \"updatedAt\": \"2018-09-19T04:41:51.117Z\"\n    },\n    {\n        \"id\": \"5ba1d39072e5210010f4ce01\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-19T04:41:52.202Z\",\n        \"updatedAt\": \"2018-09-19T04:41:52.202Z\"\n    },\n    {\n        \"id\": \"5ba1d39172e5210010f4ce02\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-19T04:41:53.259Z\",\n        \"updatedAt\": \"2018-09-19T04:41:53.259Z\"\n    },\n    {\n        \"id\": \"5ba1d39272e5210010f4ce03\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-19T04:41:54.257Z\",\n        \"updatedAt\": \"2018-09-19T04:41:54.257Z\"\n    },\n    {\n        \"id\": \"5ba1d39b72e5210010f4ce05\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-19T04:42:03.675Z\",\n        \"updatedAt\": \"2018-09-19T04:42:04.628Z\"\n    },\n    {\n        \"id\": \"5ba1d39d72e5210010f4ce06\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-19T04:42:05.729Z\",\n        \"updatedAt\": \"2018-09-19T04:42:06.684Z\"\n    },\n    {\n        \"id\": \"5ba1d39f72e5210010f4ce07\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-19T04:42:07.846Z\",\n        \"updatedAt\": \"2018-09-19T04:42:08.851Z\"\n    },\n    {\n        \"id\": \"5ba1d3a172e5210010f4ce08\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-19T04:42:09.952Z\",\n        \"updatedAt\": \"2018-09-19T04:42:10.907Z\"\n    },\n    {\n        \"id\": \"5ba1d3a372e5210010f4ce09\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-19T04:42:11.933Z\",\n        \"updatedAt\": \"2018-09-19T04:42:12.976Z\"\n    },\n    {\n        \"id\": \"5ba1d3a672e5210010f4ce0a\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-19T04:42:14.353Z\",\n        \"updatedAt\": \"2018-09-19T04:42:15.982Z\"\n    },\n    {\n        \"id\": \"5ba1d3a972e5210010f4ce0b\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-19T04:42:17.128Z\",\n        \"updatedAt\": \"2018-09-19T04:42:18.380Z\"\n    },\n    {\n        \"id\": \"5ba1d3ab72e5210010f4ce0c\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-19T04:42:19.644Z\",\n        \"updatedAt\": \"2018-09-19T04:42:19.644Z\"\n    },\n    {\n        \"id\": \"5ba1d3ad72e5210010f4ce0d\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-19T04:42:21.792Z\",\n        \"updatedAt\": \"2018-09-19T04:42:21.792Z\"\n    },\n    {\n        \"id\": \"5ba1d3b172e5210010f4ce0e\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-19T04:42:25.825Z\",\n        \"updatedAt\": \"2018-09-19T04:42:25.825Z\"\n    },\n    {\n        \"id\": \"5ba2280772e5210010f4ced9\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-19T10:42:15.453Z\",\n        \"updatedAt\": \"2018-09-19T10:42:15.453Z\"\n    },\n    {\n        \"id\": \"5ba2280872e5210010f4ceda\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-19T10:42:16.350Z\",\n        \"updatedAt\": \"2018-09-19T10:42:16.350Z\"\n    },\n    {\n        \"id\": \"5ba2280972e5210010f4cedb\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-19T10:42:17.237Z\",\n        \"updatedAt\": \"2018-09-19T10:42:17.237Z\"\n    },\n    {\n        \"id\": \"5ba2280a72e5210010f4cedc\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-19T10:42:18.210Z\",\n        \"updatedAt\": \"2018-09-19T10:42:18.210Z\"\n    },\n    {\n        \"id\": \"5ba2280b72e5210010f4cedd\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-19T10:42:19.102Z\",\n        \"updatedAt\": \"2018-09-19T10:42:19.102Z\"\n    },\n    {\n        \"id\": \"5ba2280c72e5210010f4cede\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-19T10:42:20.006Z\",\n        \"updatedAt\": \"2018-09-19T10:42:20.006Z\"\n    },\n    {\n        \"id\": \"5ba2280c72e5210010f4cedf\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-19T10:42:20.863Z\",\n        \"updatedAt\": \"2018-09-19T10:42:20.863Z\"\n    },\n    {\n        \"id\": \"5ba2281472e5210010f4cee1\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-19T10:42:28.222Z\",\n        \"updatedAt\": \"2018-09-19T10:42:29.250Z\"\n    },\n    {\n        \"id\": \"5ba2281672e5210010f4cee2\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-19T10:42:30.139Z\",\n        \"updatedAt\": \"2018-09-19T10:42:31.038Z\"\n    },\n    {\n        \"id\": \"5ba2281772e5210010f4cee3\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-19T10:42:31.908Z\",\n        \"updatedAt\": \"2018-09-19T10:42:32.796Z\"\n    },\n    {\n        \"id\": \"5ba2281972e5210010f4cee4\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-19T10:42:33.679Z\",\n        \"updatedAt\": \"2018-09-19T10:42:34.610Z\"\n    },\n    {\n        \"id\": \"5ba2281b72e5210010f4cee5\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-19T10:42:35.507Z\",\n        \"updatedAt\": \"2018-09-19T10:42:36.390Z\"\n    },\n    {\n        \"id\": \"5ba2281d72e5210010f4cee6\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-19T10:42:37.319Z\",\n        \"updatedAt\": \"2018-09-19T10:42:38.227Z\"\n    },\n    {\n        \"id\": \"5ba2281f72e5210010f4cee7\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-19T10:42:39.176Z\",\n        \"updatedAt\": \"2018-09-19T10:42:40.078Z\"\n    },\n    {\n        \"id\": \"5ba2282072e5210010f4cee8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-19T10:42:40.967Z\",\n        \"updatedAt\": \"2018-09-19T10:42:40.967Z\"\n    },\n    {\n        \"id\": \"5ba2282272e5210010f4cee9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-19T10:42:42.806Z\",\n        \"updatedAt\": \"2018-09-19T10:42:42.806Z\"\n    },\n    {\n        \"id\": \"5ba2282672e5210010f4ceea\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-19T10:42:46.558Z\",\n        \"updatedAt\": \"2018-09-19T10:42:46.558Z\"\n    },\n    {\n        \"id\": \"5ba4bef272e5210010f4d161\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-21T09:50:42.086Z\",\n        \"updatedAt\": \"2018-09-21T09:50:42.086Z\"\n    },\n    {\n        \"id\": \"5ba4bef372e5210010f4d162\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-21T09:50:43.003Z\",\n        \"updatedAt\": \"2018-09-21T09:50:43.003Z\"\n    },\n    {\n        \"id\": \"5ba4bef372e5210010f4d163\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-21T09:50:43.936Z\",\n        \"updatedAt\": \"2018-09-21T09:50:43.936Z\"\n    },\n    {\n        \"id\": \"5ba4bef772e5210010f4d164\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-21T09:50:47.921Z\",\n        \"updatedAt\": \"2018-09-21T09:50:47.921Z\"\n    },\n    {\n        \"id\": \"5ba4bef872e5210010f4d165\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-21T09:50:48.929Z\",\n        \"updatedAt\": \"2018-09-21T09:50:48.929Z\"\n    },\n    {\n        \"id\": \"5ba4bef972e5210010f4d166\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-21T09:50:49.835Z\",\n        \"updatedAt\": \"2018-09-21T09:50:49.835Z\"\n    },\n    {\n        \"id\": \"5ba4befa72e5210010f4d167\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-21T09:50:50.715Z\",\n        \"updatedAt\": \"2018-09-21T09:50:50.715Z\"\n    },\n    {\n        \"id\": \"5ba4bf0272e5210010f4d169\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-21T09:50:58.264Z\",\n        \"updatedAt\": \"2018-09-21T09:50:59.189Z\"\n    },\n    {\n        \"id\": \"5ba4bf0472e5210010f4d16a\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-21T09:51:00.118Z\",\n        \"updatedAt\": \"2018-09-21T09:51:01.098Z\"\n    },\n    {\n        \"id\": \"5ba4bf0672e5210010f4d16b\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-21T09:51:02.122Z\",\n        \"updatedAt\": \"2018-09-21T09:51:03.016Z\"\n    },\n    {\n        \"id\": \"5ba4bf0772e5210010f4d16c\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-21T09:51:03.912Z\",\n        \"updatedAt\": \"2018-09-21T09:51:04.840Z\"\n    },\n    {\n        \"id\": \"5ba4bf0972e5210010f4d16d\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-21T09:51:05.711Z\",\n        \"updatedAt\": \"2018-09-21T09:51:06.578Z\"\n    },\n    {\n        \"id\": \"5ba4bf0b72e5210010f4d16e\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-21T09:51:07.420Z\",\n        \"updatedAt\": \"2018-09-21T09:51:08.390Z\"\n    },\n    {\n        \"id\": \"5ba4bf0d72e5210010f4d16f\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-21T09:51:09.289Z\",\n        \"updatedAt\": \"2018-09-21T09:51:10.206Z\"\n    },\n    {\n        \"id\": \"5ba4bf0f72e5210010f4d170\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-21T09:51:11.085Z\",\n        \"updatedAt\": \"2018-09-21T09:51:11.085Z\"\n    },\n    {\n        \"id\": \"5ba4bf1072e5210010f4d171\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-21T09:51:12.900Z\",\n        \"updatedAt\": \"2018-09-21T09:51:12.900Z\"\n    },\n    {\n        \"id\": \"5ba4bf1472e5210010f4d172\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-21T09:51:16.520Z\",\n        \"updatedAt\": \"2018-09-21T09:51:16.520Z\"\n    },\n    {\n        \"id\": \"5baa141772e5210010f4d4c4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-25T10:55:19.656Z\",\n        \"updatedAt\": \"2018-09-25T10:55:19.656Z\"\n    },\n    {\n        \"id\": \"5baa141872e5210010f4d4c5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-25T10:55:20.486Z\",\n        \"updatedAt\": \"2018-09-25T10:55:20.486Z\"\n    },\n    {\n        \"id\": \"5baa141972e5210010f4d4c6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-25T10:55:21.310Z\",\n        \"updatedAt\": \"2018-09-25T10:55:21.310Z\"\n    },\n    {\n        \"id\": \"5baa141a72e5210010f4d4c7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-25T10:55:22.209Z\",\n        \"updatedAt\": \"2018-09-25T10:55:22.209Z\"\n    },\n    {\n        \"id\": \"5baa141b72e5210010f4d4c9\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-25T10:55:23.047Z\",\n        \"updatedAt\": \"2018-09-25T10:55:23.047Z\"\n    },\n    {\n        \"id\": \"5baa141b72e5210010f4d4ca\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-25T10:55:23.897Z\",\n        \"updatedAt\": \"2018-09-25T10:55:23.897Z\"\n    },\n    {\n        \"id\": \"5baa141c72e5210010f4d4cb\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-25T10:55:24.838Z\",\n        \"updatedAt\": \"2018-09-25T10:55:24.838Z\"\n    },\n    {\n        \"id\": \"5baa142372e5210010f4d4ce\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-25T10:55:31.448Z\",\n        \"updatedAt\": \"2018-09-25T10:55:32.245Z\"\n    },\n    {\n        \"id\": \"5baa142572e5210010f4d4cf\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-25T10:55:33.058Z\",\n        \"updatedAt\": \"2018-09-25T10:55:33.879Z\"\n    },\n    {\n        \"id\": \"5baa142672e5210010f4d4d0\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-25T10:55:34.697Z\",\n        \"updatedAt\": \"2018-09-25T10:55:35.535Z\"\n    },\n    {\n        \"id\": \"5baa142872e5210010f4d4d1\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-25T10:55:36.360Z\",\n        \"updatedAt\": \"2018-09-25T10:55:37.156Z\"\n    },\n    {\n        \"id\": \"5baa142972e5210010f4d4d2\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-25T10:55:37.974Z\",\n        \"updatedAt\": \"2018-09-25T10:55:38.781Z\"\n    },\n    {\n        \"id\": \"5baa142b72e5210010f4d4d3\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-25T10:55:39.614Z\",\n        \"updatedAt\": \"2018-09-25T10:55:40.465Z\"\n    },\n    {\n        \"id\": \"5baa142d72e5210010f4d4d4\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-25T10:55:41.269Z\",\n        \"updatedAt\": \"2018-09-25T10:55:42.067Z\"\n    },\n    {\n        \"id\": \"5baa142e72e5210010f4d4d5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-25T10:55:42.886Z\",\n        \"updatedAt\": \"2018-09-25T10:55:42.886Z\"\n    },\n    {\n        \"id\": \"5baa143072e5210010f4d4d6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-25T10:55:44.595Z\",\n        \"updatedAt\": \"2018-09-25T10:55:44.595Z\"\n    },\n    {\n        \"id\": \"5baa143372e5210010f4d4d8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-25T10:55:47.868Z\",\n        \"updatedAt\": \"2018-09-25T10:55:47.868Z\"\n    },\n    {\n        \"id\": \"5baa144572e5210010f4d4d9\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-25T10:56:05.385Z\",\n        \"updatedAt\": \"2018-09-25T10:56:05.385Z\"\n    },\n    {\n        \"id\": \"5baa144672e5210010f4d4da\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-25T10:56:06.223Z\",\n        \"updatedAt\": \"2018-09-25T10:56:06.223Z\"\n    },\n    {\n        \"id\": \"5baa144772e5210010f4d4db\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-25T10:56:07.363Z\",\n        \"updatedAt\": \"2018-09-25T10:56:07.363Z\"\n    },\n    {\n        \"id\": \"5baa144872e5210010f4d4dc\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-25T10:56:08.182Z\",\n        \"updatedAt\": \"2018-09-25T10:56:08.182Z\"\n    },\n    {\n        \"id\": \"5baa144972e5210010f4d4dd\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-25T10:56:09.090Z\",\n        \"updatedAt\": \"2018-09-25T10:56:09.090Z\"\n    },\n    {\n        \"id\": \"5baa144972e5210010f4d4de\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-25T10:56:09.929Z\",\n        \"updatedAt\": \"2018-09-25T10:56:09.929Z\"\n    },\n    {\n        \"id\": \"5baa144a72e5210010f4d4df\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-25T10:56:10.794Z\",\n        \"updatedAt\": \"2018-09-25T10:56:10.794Z\"\n    },\n    {\n        \"id\": \"5baa145172e5210010f4d4e1\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-25T10:56:17.659Z\",\n        \"updatedAt\": \"2018-09-25T10:56:18.480Z\"\n    },\n    {\n        \"id\": \"5baa145372e5210010f4d4e2\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-25T10:56:19.382Z\",\n        \"updatedAt\": \"2018-09-25T10:56:20.212Z\"\n    },\n    {\n        \"id\": \"5baa145572e5210010f4d4e3\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-25T10:56:21.076Z\",\n        \"updatedAt\": \"2018-09-25T10:56:21.883Z\"\n    },\n    {\n        \"id\": \"5baa145672e5210010f4d4e4\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-25T10:56:22.748Z\",\n        \"updatedAt\": \"2018-09-25T10:56:23.602Z\"\n    },\n    {\n        \"id\": \"5baa145872e5210010f4d4e5\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-25T10:56:24.481Z\",\n        \"updatedAt\": \"2018-09-25T10:56:25.309Z\"\n    },\n    {\n        \"id\": \"5baa145a72e5210010f4d4e6\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-25T10:56:26.129Z\",\n        \"updatedAt\": \"2018-09-25T10:56:27.121Z\"\n    },\n    {\n        \"id\": \"5baa145b72e5210010f4d4e7\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-25T10:56:27.963Z\",\n        \"updatedAt\": \"2018-09-25T10:56:28.799Z\"\n    },\n    {\n        \"id\": \"5baa145d72e5210010f4d4e8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-25T10:56:29.612Z\",\n        \"updatedAt\": \"2018-09-25T10:56:29.612Z\"\n    },\n    {\n        \"id\": \"5baa145f72e5210010f4d4e9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-25T10:56:31.295Z\",\n        \"updatedAt\": \"2018-09-25T10:56:31.295Z\"\n    },\n    {\n        \"id\": \"5baa146672e5210010f4d4ea\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-25T10:56:38.087Z\",\n        \"updatedAt\": \"2018-09-25T10:56:38.087Z\"\n    },\n    {\n        \"id\": \"5bab2a9a72e5210010f4d5c5\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-26T06:43:38.358Z\",\n        \"updatedAt\": \"2018-09-26T06:43:38.358Z\"\n    },\n    {\n        \"id\": \"5bab2a9e72e5210010f4d5c6\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-26T06:43:42.285Z\",\n        \"updatedAt\": \"2018-09-26T06:43:42.285Z\"\n    },\n    {\n        \"id\": \"5bab2a9f72e5210010f4d5c7\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-26T06:43:43.327Z\",\n        \"updatedAt\": \"2018-09-26T06:43:43.327Z\"\n    },\n    {\n        \"id\": \"5bab2aa072e5210010f4d5c8\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-26T06:43:44.438Z\",\n        \"updatedAt\": \"2018-09-26T06:43:44.438Z\"\n    },\n    {\n        \"id\": \"5bab2aa172e5210010f4d5c9\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-26T06:43:45.530Z\",\n        \"updatedAt\": \"2018-09-26T06:43:45.530Z\"\n    },\n    {\n        \"id\": \"5bab2aa272e5210010f4d5ca\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-26T06:43:46.551Z\",\n        \"updatedAt\": \"2018-09-26T06:43:46.551Z\"\n    },\n    {\n        \"id\": \"5bab2aa372e5210010f4d5cb\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-26T06:43:47.505Z\",\n        \"updatedAt\": \"2018-09-26T06:43:47.505Z\"\n    },\n    {\n        \"id\": \"5bab2aad72e5210010f4d5cd\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-26T06:43:57.467Z\",\n        \"updatedAt\": \"2018-09-26T06:43:58.505Z\"\n    },\n    {\n        \"id\": \"5bab2aaf72e5210010f4d5ce\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-26T06:43:59.633Z\",\n        \"updatedAt\": \"2018-09-26T06:44:00.671Z\"\n    },\n    {\n        \"id\": \"5bab2ab172e5210010f4d5cf\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-26T06:44:01.641Z\",\n        \"updatedAt\": \"2018-09-26T06:44:02.677Z\"\n    },\n    {\n        \"id\": \"5bab2ab372e5210010f4d5d0\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-26T06:44:03.768Z\",\n        \"updatedAt\": \"2018-09-26T06:44:04.840Z\"\n    },\n    {\n        \"id\": \"5bab2ab672e5210010f4d5d1\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-26T06:44:06.142Z\",\n        \"updatedAt\": \"2018-09-26T06:44:07.316Z\"\n    },\n    {\n        \"id\": \"5bab2ab872e5210010f4d5d2\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-26T06:44:08.612Z\",\n        \"updatedAt\": \"2018-09-26T06:44:09.804Z\"\n    },\n    {\n        \"id\": \"5bab2abb72e5210010f4d5d3\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-26T06:44:11.238Z\",\n        \"updatedAt\": \"2018-09-26T06:44:12.331Z\"\n    },\n    {\n        \"id\": \"5bab2abd72e5210010f4d5d4\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-26T06:44:13.660Z\",\n        \"updatedAt\": \"2018-09-26T06:44:13.660Z\"\n    },\n    {\n        \"id\": \"5bab2ac072e5210010f4d5d5\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-26T06:44:16.154Z\",\n        \"updatedAt\": \"2018-09-26T06:44:16.154Z\"\n    },\n    {\n        \"id\": \"5bab2ac472e5210010f4d5d6\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-26T06:44:20.612Z\",\n        \"updatedAt\": \"2018-09-26T06:44:20.612Z\"\n    },\n    {\n        \"id\": \"5bab384472e5210010f4d6b8\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-26T07:41:56.585Z\",\n        \"updatedAt\": \"2018-09-26T07:41:56.585Z\"\n    },\n    {\n        \"id\": \"5bab384572e5210010f4d6b9\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-26T07:41:57.447Z\",\n        \"updatedAt\": \"2018-09-26T07:41:57.447Z\"\n    },\n    {\n        \"id\": \"5bab384672e5210010f4d6ba\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-26T07:41:58.391Z\",\n        \"updatedAt\": \"2018-09-26T07:41:58.391Z\"\n    },\n    {\n        \"id\": \"5bab384772e5210010f4d6bb\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-26T07:41:59.307Z\",\n        \"updatedAt\": \"2018-09-26T07:41:59.307Z\"\n    },\n    {\n        \"id\": \"5bab384872e5210010f4d6bc\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-26T07:42:00.166Z\",\n        \"updatedAt\": \"2018-09-26T07:42:00.166Z\"\n    },\n    {\n        \"id\": \"5bab384972e5210010f4d6bd\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-26T07:42:01.077Z\",\n        \"updatedAt\": \"2018-09-26T07:42:01.077Z\"\n    },\n    {\n        \"id\": \"5bab384a72e5210010f4d6be\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-26T07:42:02.223Z\",\n        \"updatedAt\": \"2018-09-26T07:42:02.223Z\"\n    },\n    {\n        \"id\": \"5bab385172e5210010f4d6c0\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-09-26T07:42:09.843Z\",\n        \"updatedAt\": \"2018-09-26T07:42:10.896Z\"\n    },\n    {\n        \"id\": \"5bab385372e5210010f4d6c1\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-09-26T07:42:11.934Z\",\n        \"updatedAt\": \"2018-09-26T07:42:13.089Z\"\n    },\n    {\n        \"id\": \"5bab385672e5210010f4d6c2\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-09-26T07:42:14.238Z\",\n        \"updatedAt\": \"2018-09-26T07:42:15.283Z\"\n    },\n    {\n        \"id\": \"5bab385872e5210010f4d6c3\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-09-26T07:42:16.426Z\",\n        \"updatedAt\": \"2018-09-26T07:42:17.475Z\"\n    },\n    {\n        \"id\": \"5bab385a72e5210010f4d6c4\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-09-26T07:42:18.392Z\",\n        \"updatedAt\": \"2018-09-26T07:42:19.351Z\"\n    },\n    {\n        \"id\": \"5bab385c72e5210010f4d6c5\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-09-26T07:42:20.291Z\",\n        \"updatedAt\": \"2018-09-26T07:42:21.335Z\"\n    },\n    {\n        \"id\": \"5bab385e72e5210010f4d6c6\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-09-26T07:42:22.277Z\",\n        \"updatedAt\": \"2018-09-26T07:42:23.215Z\"\n    },\n    {\n        \"id\": \"5bab386072e5210010f4d6c7\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-26T07:42:24.079Z\",\n        \"updatedAt\": \"2018-09-26T07:42:24.079Z\"\n    },\n    {\n        \"id\": \"5bab386272e5210010f4d6c8\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-26T07:42:26.035Z\",\n        \"updatedAt\": \"2018-09-26T07:42:26.035Z\"\n    },\n    {\n        \"id\": \"5bab386572e5210010f4d6c9\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-09-26T07:42:29.794Z\",\n        \"updatedAt\": \"2018-09-26T07:42:29.794Z\"\n    },\n    {\n        \"id\": \"5bb1a24440b28700118b47a2\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-01T04:27:48.461Z\",\n        \"updatedAt\": \"2018-10-01T04:27:48.461Z\"\n    },\n    {\n        \"id\": \"5bb1a24540b28700118b47a3\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-01T04:27:49.586Z\",\n        \"updatedAt\": \"2018-10-01T04:27:49.586Z\"\n    },\n    {\n        \"id\": \"5bb1a24640b28700118b47a4\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-01T04:27:50.834Z\",\n        \"updatedAt\": \"2018-10-01T04:27:50.834Z\"\n    },\n    {\n        \"id\": \"5bb1a24740b28700118b47a5\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-01T04:27:51.796Z\",\n        \"updatedAt\": \"2018-10-01T04:27:51.796Z\"\n    },\n    {\n        \"id\": \"5bb1a28540b28700118b47a6\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-01T04:28:53.611Z\",\n        \"updatedAt\": \"2018-10-01T04:28:53.611Z\"\n    },\n    {\n        \"id\": \"5bb1a28640b28700118b47a7\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-01T04:28:54.648Z\",\n        \"updatedAt\": \"2018-10-01T04:28:54.648Z\"\n    },\n    {\n        \"id\": \"5bb1a28740b28700118b47a8\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-01T04:28:55.580Z\",\n        \"updatedAt\": \"2018-10-01T04:28:55.580Z\"\n    },\n    {\n        \"id\": \"5bb1a29040b28700118b47aa\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-01T04:29:04.121Z\",\n        \"updatedAt\": \"2018-10-01T04:29:05.129Z\"\n    },\n    {\n        \"id\": \"5bb1a29240b28700118b47ab\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-01T04:29:06.435Z\",\n        \"updatedAt\": \"2018-10-01T04:29:07.705Z\"\n    },\n    {\n        \"id\": \"5bb1a29440b28700118b47ac\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-01T04:29:08.644Z\",\n        \"updatedAt\": \"2018-10-01T04:29:09.686Z\"\n    },\n    {\n        \"id\": \"5bb1a29740b28700118b47ad\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-01T04:29:11.152Z\",\n        \"updatedAt\": \"2018-10-01T04:29:13.108Z\"\n    },\n    {\n        \"id\": \"5bb1a29a40b28700118b47ae\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-01T04:29:14.117Z\",\n        \"updatedAt\": \"2018-10-01T04:29:15.231Z\"\n    },\n    {\n        \"id\": \"5bb1a29c40b28700118b47af\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-01T04:29:16.268Z\",\n        \"updatedAt\": \"2018-10-01T04:29:17.313Z\"\n    },\n    {\n        \"id\": \"5bb1a29e40b28700118b47b0\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-01T04:29:18.522Z\",\n        \"updatedAt\": \"2018-10-01T04:29:19.622Z\"\n    },\n    {\n        \"id\": \"5bb1a2a040b28700118b47b1\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T04:29:20.755Z\",\n        \"updatedAt\": \"2018-10-01T04:29:20.755Z\"\n    },\n    {\n        \"id\": \"5bb1a2a340b28700118b47b2\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T04:29:23.058Z\",\n        \"updatedAt\": \"2018-10-01T04:29:23.058Z\"\n    },\n    {\n        \"id\": \"5bb1a2a740b28700118b47b3\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T04:29:27.531Z\",\n        \"updatedAt\": \"2018-10-01T04:29:27.531Z\"\n    },\n    {\n        \"id\": \"5bb1ed5d99401e00105c5ddc\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-01T09:48:13.677Z\",\n        \"updatedAt\": \"2018-10-01T09:48:13.677Z\"\n    },\n    {\n        \"id\": \"5bb1ed5e99401e00105c5ddd\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-01T09:48:14.821Z\",\n        \"updatedAt\": \"2018-10-01T09:48:14.821Z\"\n    },\n    {\n        \"id\": \"5bb1ed5f99401e00105c5dde\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-01T09:48:15.865Z\",\n        \"updatedAt\": \"2018-10-01T09:48:15.865Z\"\n    },\n    {\n        \"id\": \"5bb1ed6099401e00105c5ddf\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-01T09:48:16.765Z\",\n        \"updatedAt\": \"2018-10-01T09:48:16.765Z\"\n    },\n    {\n        \"id\": \"5bb1ed6199401e00105c5de0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-01T09:48:17.880Z\",\n        \"updatedAt\": \"2018-10-01T09:48:17.880Z\"\n    },\n    {\n        \"id\": \"5bb1ed6299401e00105c5de1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-01T09:48:18.819Z\",\n        \"updatedAt\": \"2018-10-01T09:48:18.819Z\"\n    },\n    {\n        \"id\": \"5bb1ed6399401e00105c5de2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-01T09:48:19.833Z\",\n        \"updatedAt\": \"2018-10-01T09:48:19.833Z\"\n    },\n    {\n        \"id\": \"5bb1ed6c99401e00105c5de4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-01T09:48:28.088Z\",\n        \"updatedAt\": \"2018-10-01T09:48:29.044Z\"\n    },\n    {\n        \"id\": \"5bb1ed6d99401e00105c5de5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-01T09:48:29.947Z\",\n        \"updatedAt\": \"2018-10-01T09:48:30.941Z\"\n    },\n    {\n        \"id\": \"5bb1ed6f99401e00105c5de6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-01T09:48:31.849Z\",\n        \"updatedAt\": \"2018-10-01T09:48:33.168Z\"\n    },\n    {\n        \"id\": \"5bb1ed7299401e00105c5de7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-01T09:48:34.158Z\",\n        \"updatedAt\": \"2018-10-01T09:48:35.194Z\"\n    },\n    {\n        \"id\": \"5bb1ed7499401e00105c5de8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-01T09:48:36.199Z\",\n        \"updatedAt\": \"2018-10-01T09:48:37.144Z\"\n    },\n    {\n        \"id\": \"5bb1ed7699401e00105c5de9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-01T09:48:38.220Z\",\n        \"updatedAt\": \"2018-10-01T09:48:39.266Z\"\n    },\n    {\n        \"id\": \"5bb1ed7899401e00105c5dea\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-01T09:48:40.295Z\",\n        \"updatedAt\": \"2018-10-01T09:48:41.565Z\"\n    },\n    {\n        \"id\": \"5bb1ed7a99401e00105c5deb\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T09:48:42.926Z\",\n        \"updatedAt\": \"2018-10-01T09:48:42.926Z\"\n    },\n    {\n        \"id\": \"5bb1ed7d99401e00105c5dec\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T09:48:45.194Z\",\n        \"updatedAt\": \"2018-10-01T09:48:45.194Z\"\n    },\n    {\n        \"id\": \"5bb1ed8199401e00105c5ded\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T09:48:49.395Z\",\n        \"updatedAt\": \"2018-10-01T09:48:49.395Z\"\n    },\n    {\n        \"id\": \"5bb1fef98d134e0011220b57\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-01T11:03:21.024Z\",\n        \"updatedAt\": \"2018-10-01T11:03:21.024Z\"\n    },\n    {\n        \"id\": \"5bb1fefa8d134e0011220b58\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-01T11:03:22.057Z\",\n        \"updatedAt\": \"2018-10-01T11:03:22.057Z\"\n    },\n    {\n        \"id\": \"5bb1fefb8d134e0011220b59\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-01T11:03:23.048Z\",\n        \"updatedAt\": \"2018-10-01T11:03:23.048Z\"\n    },\n    {\n        \"id\": \"5bb1fefc8d134e0011220b5a\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-01T11:03:24.047Z\",\n        \"updatedAt\": \"2018-10-01T11:03:24.047Z\"\n    },\n    {\n        \"id\": \"5bb1fefc8d134e0011220b5b\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-01T11:03:24.979Z\",\n        \"updatedAt\": \"2018-10-01T11:03:24.979Z\"\n    },\n    {\n        \"id\": \"5bb1fefd8d134e0011220b5c\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-01T11:03:25.961Z\",\n        \"updatedAt\": \"2018-10-01T11:03:25.961Z\"\n    },\n    {\n        \"id\": \"5bb1fefe8d134e0011220b5d\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-01T11:03:26.869Z\",\n        \"updatedAt\": \"2018-10-01T11:03:26.869Z\"\n    },\n    {\n        \"id\": \"5bb1ff078d134e0011220b5f\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-01T11:03:35.455Z\",\n        \"updatedAt\": \"2018-10-01T11:03:36.571Z\"\n    },\n    {\n        \"id\": \"5bb1ff098d134e0011220b60\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-01T11:03:37.623Z\",\n        \"updatedAt\": \"2018-10-01T11:03:38.666Z\"\n    },\n    {\n        \"id\": \"5bb1ff0b8d134e0011220b61\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-01T11:03:39.635Z\",\n        \"updatedAt\": \"2018-10-01T11:03:40.546Z\"\n    },\n    {\n        \"id\": \"5bb1ff0d8d134e0011220b62\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-01T11:03:41.535Z\",\n        \"updatedAt\": \"2018-10-01T11:03:42.636Z\"\n    },\n    {\n        \"id\": \"5bb1ff0f8d134e0011220b63\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-01T11:03:43.626Z\",\n        \"updatedAt\": \"2018-10-01T11:03:44.513Z\"\n    },\n    {\n        \"id\": \"5bb1ff118d134e0011220b64\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-01T11:03:45.557Z\",\n        \"updatedAt\": \"2018-10-01T11:03:46.500Z\"\n    },\n    {\n        \"id\": \"5bb1ff138d134e0011220b65\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-01T11:03:47.652Z\",\n        \"updatedAt\": \"2018-10-01T11:03:48.695Z\"\n    },\n    {\n        \"id\": \"5bb1ff168d134e0011220b66\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T11:03:50.049Z\",\n        \"updatedAt\": \"2018-10-01T11:03:50.049Z\"\n    },\n    {\n        \"id\": \"5bb1ff188d134e0011220b67\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T11:03:52.158Z\",\n        \"updatedAt\": \"2018-10-01T11:03:52.158Z\"\n    },\n    {\n        \"id\": \"5bb1ff1c8d134e0011220b68\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-01T11:03:56.316Z\",\n        \"updatedAt\": \"2018-10-01T11:03:56.316Z\"\n    },\n    {\n        \"id\": \"5bd932356454ea00118971ac\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-31T04:40:21.308Z\",\n        \"updatedAt\": \"2018-10-31T04:40:21.308Z\"\n    },\n    {\n        \"id\": \"5bd932366454ea00118971ad\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-31T04:40:22.493Z\",\n        \"updatedAt\": \"2018-10-31T04:40:22.493Z\"\n    },\n    {\n        \"id\": \"5bd932386454ea00118971ae\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-31T04:40:24.140Z\",\n        \"updatedAt\": \"2018-10-31T04:40:24.140Z\"\n    },\n    {\n        \"id\": \"5bd932396454ea00118971af\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-31T04:40:25.443Z\",\n        \"updatedAt\": \"2018-10-31T04:40:25.443Z\"\n    },\n    {\n        \"id\": \"5bd9323a6454ea00118971b0\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-31T04:40:26.444Z\",\n        \"updatedAt\": \"2018-10-31T04:40:26.444Z\"\n    },\n    {\n        \"id\": \"5bd9323b6454ea00118971b1\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-31T04:40:27.380Z\",\n        \"updatedAt\": \"2018-10-31T04:40:27.380Z\"\n    },\n    {\n        \"id\": \"5bd9323f6454ea00118971b2\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-31T04:40:31.326Z\",\n        \"updatedAt\": \"2018-10-31T04:40:31.326Z\"\n    },\n    {\n        \"id\": \"5bd932476454ea00118971b4\",\n        \"name\": \"API Deck\",\n        \"description\": \"Test Description for category1\",\n        \"createdAt\": \"2018-10-31T04:40:39.471Z\",\n        \"updatedAt\": \"2018-10-31T04:40:40.943Z\"\n    },\n    {\n        \"id\": \"5bd932496454ea00118971b5\",\n        \"name\": \"123456.987\",\n        \"description\": \"Test Description for category2\",\n        \"createdAt\": \"2018-10-31T04:40:41.919Z\",\n        \"updatedAt\": \"2018-10-31T04:40:42.881Z\"\n    },\n    {\n        \"id\": \"5bd9324b6454ea00118971b6\",\n        \"name\": \"API89 Name1\",\n        \"description\": \"Test Description for category3\",\n        \"createdAt\": \"2018-10-31T04:40:43.888Z\",\n        \"updatedAt\": \"2018-10-31T04:40:44.790Z\"\n    },\n    {\n        \"id\": \"5bd9324d6454ea00118971b7\",\n        \"name\": \"API Deck3\",\n        \"description\": \"API Deck\",\n        \"createdAt\": \"2018-10-31T04:40:45.825Z\",\n        \"updatedAt\": \"2018-10-31T04:40:47.455Z\"\n    },\n    {\n        \"id\": \"5bd932506454ea00118971b8\",\n        \"name\": \"API Deck4\",\n        \"description\": \"123456.987\",\n        \"createdAt\": \"2018-10-31T04:40:48.481Z\",\n        \"updatedAt\": \"2018-10-31T04:40:50.023Z\"\n    },\n    {\n        \"id\": \"5bd932536454ea00118971b9\",\n        \"name\": \"API Deck5\",\n        \"description\": \"API89 Name1\",\n        \"createdAt\": \"2018-10-31T04:40:51.379Z\",\n        \"updatedAt\": \"2018-10-31T04:40:52.332Z\"\n    },\n    {\n        \"id\": \"5bd932556454ea00118971ba\",\n        \"name\": \"API Deck6\",\n        \"description\": \"\",\n        \"createdAt\": \"2018-10-31T04:40:53.307Z\",\n        \"updatedAt\": \"2018-10-31T04:40:54.268Z\"\n    },\n    {\n        \"id\": \"5bd932576454ea00118971bb\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-31T04:40:55.264Z\",\n        \"updatedAt\": \"2018-10-31T04:40:55.264Z\"\n    },\n    {\n        \"id\": \"5bd932596454ea00118971bc\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-31T04:40:57.228Z\",\n        \"updatedAt\": \"2018-10-31T04:40:57.228Z\"\n    },\n    {\n        \"id\": \"5bd9325e6454ea00118971bd\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-10-31T04:41:02.136Z\",\n        \"updatedAt\": \"2018-10-31T04:41:02.136Z\"\n    },\n    {\n        \"id\": \"5be917496454ea0011897e4f\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T06:01:45.236Z\",\n        \"updatedAt\": \"2018-11-12T06:01:45.236Z\"\n    },\n    {\n        \"id\": \"5be9174a6454ea0011897e50\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T06:01:46.793Z\",\n        \"updatedAt\": \"2018-11-12T06:01:46.793Z\"\n    },\n    {\n        \"id\": \"5be9174d6454ea0011897e51\",\n        \"name\": \"Science\",\n        \"description\": \"Always learning\",\n        \"createdAt\": \"2018-11-12T06:01:49.950Z\",\n        \"updatedAt\": \"2018-11-12T06:01:49.950Z\"\n    }\n]\n\n",
									"Response Headers are: \nServer=nginx\nDate=Tue, 05 Mar 2019 08:27:55 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nX-Application-Context=application:dev:8090\nX-Loadbalancer-Id=nginx-ingress-2j1v1\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Create All Type Question using Question Service - Negative Data Driven Test Specification2",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\03. Create All Type Question - Negative Data Driven Tests2.spec",
			"tags": [
				"create_question",
				"create_question_all_type",
				"create_question-negative_tests",
				"negative"
			],
			"executionTime": 17232,
			"executionStatus": "fail",
			"scenarios": [
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 910,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 910,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 40,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 20,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 850,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 523ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:27:57 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 910,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manua"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"creatoredType: Invalid value 'Manua'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 0
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 771,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 771,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 43,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 22,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 706,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 560ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:27:58 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 771,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"creatoredType: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 1
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 682,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 682,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 40,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 18,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 624,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 511ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:27:59 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 682,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"AL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value 'AL'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 2
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 683,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 683,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 41,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 21,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 621,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 507ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:27:59 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 683,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 3
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 693,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 693,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 45,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 21,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 627,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 513ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:00 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 693,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 4
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 684,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 684,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 44,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 1,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 19,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 620,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 501ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:01 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 684,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 5
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 700,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 700,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 40,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 19,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 641,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 511ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:02 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 700,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 6
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 690,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 690,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 42,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 18,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 630,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 510ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:02 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 690,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 7
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 750,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 750,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 39,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 19,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 692,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 579ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:03 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 750,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character (',' (code 44)): expected a value"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 8
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 829,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 829,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 37,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 19,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 773,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 659ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:04 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 829,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 9
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 823,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 823,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 37,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 20,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 766,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 645ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:05 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 823,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 10
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 671,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 671,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 43,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 18,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 610,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 500ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:05 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 671,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 11
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 708,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 708,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 38,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 20,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 650,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 530ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:06 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 708,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 12
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 675,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 675,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 37,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 23,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 615,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 496ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:07 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 675,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"@"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 13
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 689,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 689,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 44,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 17,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 627,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 513ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:07 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 689,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 14
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 725,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 725,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 43,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 19,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 663,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 533ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:08 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 725,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"a"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"Unrecognized token 'a': was expecting ('true', 'false' or 'null')"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 15
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 736,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 736,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 38,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 18,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 680,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 561ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:09 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 736,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"\"\""
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"'correctAnswers' cannot be null or empty"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 16
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 716,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 716,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 38,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 19,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 659,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 543ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:10 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 716,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"null"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"'correctAnswers' cannot be null or empty"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 17
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 641,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 641,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 34,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 16,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 591,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 492ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:10 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 641,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"\"a\""
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value 'a'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 18
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 710,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 710,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 48,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 28,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 634,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 525ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:11 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 710,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"\"@\""
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value '@'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 19
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 703,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 703,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 51,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 23,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 629,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 523ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:12 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 703,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"\"a\""
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value 'a'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 20
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 671,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 671,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 34,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 17,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 619,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 510ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:12 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 671,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"ALL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"\"@\""
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"answers: Invalid value '@'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 21
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 712,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 712,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 46,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 19,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 647,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 525ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:13 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 712,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											"AL"
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value 'AL'"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 22
				},
				{
					"scenarioHeading": "Create a question negative tests",
					"tags": [],
					"executionTime": 660,
					"executionStatus": "fail",
					"contexts": [
						{
							"itemType": "concept",
							"conceptStep": {
								"itemType": "step",
								"stepText": "Create a deck",
								"table": null,
								"beforeStepHookFailure": null,
								"afterStepHookFailure": null,
								"result": {
									"status": "fail",
									"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
									"screenshot": "",
									"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
									"executionTime": 660,
									"skippedReason": "",
									"messages": [],
									"errorType": "assertion"
								}
							},
							"items": [
								{
									"itemType": "step",
									"stepText": "Given that a user needs to invoke \"Create a Deck using Deck Service\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 34,
										"skippedReason": "",
										"messages": [
											"API Endpoint is: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request authentication configurations as follows",
									"table": {
										"headers": [
											"Configuration",
											"Configuration Value"
										],
										"rows": [
											{
												"cells": [
													"Is authentication required?",
													"Yes"
												]
											},
											{
												"cells": [
													"Do you need to retrieve the access token from the text file?",
													"Yes"
												]
											},
											{
												"cells": [
													"Provide the access token if you need to authorize the API manually",
													"N/A"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 0,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "And the user set the request attributes as follows",
									"table": {
										"headers": [
											"Attribute Value In JSON Template",
											"Attribute Value To Be Set"
										],
										"rows": [
											{
												"cells": [
													"#title",
													"API Deck3"
												]
											},
											{
												"cells": [
													"#description",
													"test description"
												]
											},
											{
												"cells": [
													"#tags1",
													"API tag1"
												]
											},
											{
												"cells": [
													"#subjectId",
													"2"
												]
											},
											{
												"cells": [
													"#subjectName",
													"API Testing3"
												]
											},
											{
												"cells": [
													"#bookTitle",
													"Automation3"
												]
											},
											{
												"cells": [
													"#bookAuthor",
													"Osanda Nimalarathna"
												]
											},
											{
												"cells": [
													"#bookChapter",
													"Chap. 04"
												]
											},
											{
												"cells": [
													"#purchasedDate",
													"1512021142001"
												]
											},
											{
												"cells": [
													"#purchaseInformationPrice",
													"777"
												]
											},
											{
												"cells": [
													"#purchaseInformationsku",
													"com.pearson.smartflashcards.test3"
												]
											},
											{
												"cells": [
													"#areNotificationsEnabled",
													"true"
												]
											},
											{
												"cells": [
													"#notificationTime",
													"08:00 AM"
												]
											},
											{
												"cells": [
													"#notificationFrequency",
													"5"
												]
											},
											{
												"cells": [
													"#examDate",
													"1512021142000"
												]
											},
											{
												"cells": [
													"#userId",
													"34"
												]
											},
											{
												"cells": [
													"#parentDeckId",
													"5"
												]
											},
											{
												"cells": [
													"#tempDeckId",
													"999"
												]
											},
											{
												"cells": [
													"#archived",
													"true"
												]
											},
											{
												"cells": [
													"#cardPreview",
													"true"
												]
											},
											{
												"cells": [
													"#noOfCards",
													"2"
												]
											},
											{
												"cells": [
													"#progress",
													"3"
												]
											},
											{
												"cells": [
													"#downloads",
													"12"
												]
											},
											{
												"cells": [
													"#deckAuthorName",
													"Osanda"
												]
											},
											{
												"cells": [
													"#deckAuthorId",
													"6"
												]
											},
											{
												"cells": [
													"#thumbnailUrl",
													"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
												]
											},
											{
												"cells": [
													"#status",
													"Closed"
												]
											},
											{
												"cells": [
													"#starred",
													"true"
												]
											},
											{
												"cells": [
													"#categoryId",
													"5a5db30a12ef181b0af109ba"
												]
											}
										]
									},
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 17,
										"skippedReason": "",
										"messages": [
											"The JSON request body that you are going to use for the API is:\n{\n  \"title\": \"API Deck3\",\n  \"description\": \"test description\",\n  \"tags\": [\n    \"API tag1\"\n  ],\n  \"subject\": {\n    \"id\": 2,\n    \"name\": \"API Testing3\"\n  },\n  \"book\": {\n    \"bookTitle\": \"Automation3\",\n    \"bookAuthor\": \"Osanda Nimalarathna\",\n    \"chapter\": \"Chap. 04\"\n  },\n  \"purchaseInfo\": {\n    \"purchasedDate\": 1512021142001,\n    \"price\": 777,\n    \"sku\": \"com.pearson.smartflashcards.test3\"\n  },\n  \"notificationSettings\": {\n    \"areNotificationsEnabled\": true,\n    \"notificationTime\": \"08:00 AM\",\n    \"notificationFrequency\": \"5\"\n  },\n  \"categoryId\": \"5a5db30a12ef181b0af109ba\",\n  \"examDate\": 1512021142000,\n  \"userId\": \"34\",\n  \"parentDeckId\": \"5\",\n  \"tempDeckId\": \"999\",\n  \"archived\": true,\n  \"cardPreview\": true,\n  \"noOfCards\": 2,\n  \"progress\": 3,\n  \"downloads\": 12,\n  \"deckAuthor\": \"Osanda\",\n  \"deckAuthorId\": \"6\",\n  \"thumbnailUrl\": \"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a154f35d5b71d1a8a54dd58/download/public?format=ORIGINAL\",\n  \"status\": \"Closed\",\n  \"starred\": true\n}"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "When the user invokes the API",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "pass",
										"stackTrace": "",
										"screenshot": "",
										"errorMessage": "",
										"executionTime": 609,
										"skippedReason": "",
										"messages": [
											"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
											"Invoked API Endpoint: \nhttp://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\n\n",
											"HTTP Method is: POST\n\n",
											"Response Time is: 507ms\n\n",
											"Response is: \n\u003chtml\u003e\n  \u003chead\u003e\n    \u003ctitle\u003e301 Moved Permanently\u003c/title\u003e\n  \u003c/head\u003e\n  \u003cbody bgcolor=\"white\"\u003e\n    \u003ccenter\u003e\n      \u003ch1\u003e301 Moved Permanently\u003c/h1\u003e\n    \u003c/center\u003e\n    \u003chr/\u003e\n    \u003ccenter\u003enginx\u003c/center\u003e\n  \u003c/body\u003e\n\u003c/html\u003e\n\n",
											"Response Headers are: \nContent-Type=text/html\nDate=Tue, 05 Mar 2019 08:28:14 GMT\nLocation=https://deckservice-pearson-prep-us1-dev.bite.pearsondev.tech/api/decks\nServer=nginx\nX-Content-Type-Options=nosniff\nX-XSS-Protection=1; mode=block\nContent-Length=178\nConnection=keep-alive"
										],
										"errorType": "assertion"
									}
								},
								{
									"itemType": "step",
									"stepText": "Then the status code for the request is \"201\"",
									"table": null,
									"beforeStepHookFailure": null,
									"afterStepHookFailure": null,
									"result": {
										"status": "fail",
										"stackTrace": "org.testng.Assert.fail(Assert.java:94)\norg.testng.Assert.failNotEquals(Assert.java:494)\norg.testng.Assert.assertEquals(Assert.java:123)\norg.testng.Assert.assertEquals(Assert.java:176)\ncom.maxsoft.intelliapi.api.Base.isResponseStatusCodeEqualTo(Base.java:1247)\ncom.maxsoft.intelliapi.api.ApiStepImpl.isResponseStatusCodeEqualTo(ApiStepImpl.java:411)\ncom.maxsoft.intelliapi.stepdefinition.AllStepsDefinitions.verifyResponseStatusCode(AllStepsDefinitions.java:195)\nsun.reflect.GeneratedMethodAccessor124.invoke(Unknown Source)\nsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\njava.lang.reflect.Method.invoke(Method.java:498)\ncom.thoughtworks.gauge.execution.MethodExecutor.execute(MethodExecutor.java:38)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStepMethod(StepExecutionStage.java:76)\ncom.thoughtworks.gauge.execution.StepExecutionStage.executeStep(StepExecutionStage.java:69)\ncom.thoughtworks.gauge.execution.StepExecutionStage.execute(StepExecutionStage.java:51)\ncom.thoughtworks.gauge.execution.AbstractExecutionStage.executeNext(AbstractExecutionStage.java:24)\ncom.thoughtworks.gauge.execution.HookExecutionStage.execute(HookExecutionStage.java:43)\ncom.thoughtworks.gauge.execution.ExecutionPipeline.start(ExecutionPipeline.java:29)\ncom.thoughtworks.gauge.processor.ExecuteStepProcessor.process(ExecuteStepProcessor.java:48)\ncom.thoughtworks.gauge.connection.MessageDispatcher.dispatchMessages(MessageDispatcher.java:92)\ncom.thoughtworks.gauge.GaugeRuntime.dispatchMessages(GaugeRuntime.java:98)\ncom.thoughtworks.gauge.GaugeRuntime.lambda$connectSynchronously$1(GaugeRuntime.java:81)\njava.lang.Thread.run(Thread.java:745)\n",
										"screenshot": "",
										"errorMessage": "java.lang.AssertionError: The expected status code for the request is not equal to the actual status code\n expected [201] but found [301]",
										"executionTime": 660,
										"skippedReason": "",
										"messages": [],
										"errorType": "assertion"
									}
								}
							],
							"result": {
								"status": "",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": null,
								"errorType": ""
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the JSON Path values in the response inside the data stores",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"deckId",
											"$.id"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \u003capi\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user set the request attributes using data stores as follows",
							"table": {
								"headers": [
									"Attribute Value In JSON Template",
									"Is Data Store Used?",
									"Data Store Type",
									"Data Store Variable Name",
									"Attribute Value To Be Set"
								],
								"rows": [
									{
										"cells": [
											"#creatorId",
											"n",
											"",
											"",
											"osanda12"
										]
									},
									{
										"cells": [
											"#creatorPlatform",
											"n",
											"",
											"",
											"Web"
										]
									},
									{
										"cells": [
											"#creatoredSource",
											"n",
											"",
											"",
											"App"
										]
									},
									{
										"cells": [
											"#creatoredType",
											"n",
											"",
											"",
											"Manual"
										]
									},
									{
										"cells": [
											"#deckId",
											"y",
											"scenario",
											"deckId",
											""
										]
									},
									{
										"cells": [
											"#kind",
											"n",
											"",
											"",
											""
										]
									},
									{
										"cells": [
											"#isDeleted",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tempQuestionId",
											"n",
											"",
											"",
											"testId"
										]
									},
									{
										"cells": [
											"#learningObjectives",
											"n",
											"",
											"",
											"learningObjective1"
										]
									},
									{
										"cells": [
											"#imageUrl",
											"n",
											"",
											"",
											"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL"
										]
									},
									{
										"cells": [
											"#media",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#questionPrompt",
											"n",
											"",
											"",
											"Who is the owner of MaxSoft?"
										]
									},
									{
										"cells": [
											"#promptType",
											"n",
											"",
											"",
											"TEX"
										]
									},
									{
										"cells": [
											"#timeout",
											"n",
											"",
											"",
											"60"
										]
									},
									{
										"cells": [
											"#rationale",
											"n",
											"",
											"",
											"rationale"
										]
									},
									{
										"cells": [
											"#boxId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAttempts",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#inCorrectAttempts",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#lastAswered",
											"n",
											"",
											"",
											"2018-01-01T12:00:00+01:00"
										]
									},
									{
										"cells": [
											"#questionId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#skips",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#userId",
											"n",
											"",
											"",
											"0"
										]
									},
									{
										"cells": [
											"#correctAnswerList",
											"n",
											"",
											"",
											"1,2"
										]
									},
									{
										"cells": [
											"#answer1Id",
											"n",
											"",
											"",
											"1"
										]
									},
									{
										"cells": [
											"#answer1Value",
											"n",
											"",
											"",
											"Red"
										]
									},
									{
										"cells": [
											"#answer1Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer1CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer2Id",
											"n",
											"",
											"",
											"2"
										]
									},
									{
										"cells": [
											"#answer2Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer2Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer2CaseSensitive",
											"n",
											"",
											"",
											"true"
										]
									},
									{
										"cells": [
											"#answer3Id",
											"n",
											"",
											"",
											"3"
										]
									},
									{
										"cells": [
											"#answer3Value",
											"n",
											"",
											"",
											"White"
										]
									},
									{
										"cells": [
											"#answer3Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer3CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer4Id",
											"n",
											"",
											"",
											"4"
										]
									},
									{
										"cells": [
											"#answer4Value",
											"n",
											"",
											"",
											"Blue"
										]
									},
									{
										"cells": [
											"#answer4Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer4CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#answer5Id",
											"n",
											"",
											"",
											"5"
										]
									},
									{
										"cells": [
											"#answer5Value",
											"n",
											"",
											"",
											"Orange"
										]
									},
									{
										"cells": [
											"#answer5Type",
											"n",
											"",
											"",
											"TEXT"
										]
									},
									{
										"cells": [
											"#answer5CaseSensitive",
											"n",
											"",
											"",
											"false"
										]
									},
									{
										"cells": [
											"#tags",
											"n",
											"",
											"",
											"MaxSoft"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"400\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path values of the response should contains the following",
							"table": {
								"headers": [
									"JSON Path",
									"Value"
								],
								"rows": [
									{
										"cells": [
											"$.message",
											"kind: Invalid value ''"
										]
									},
									{
										"cells": [
											"$.description",
											"null"
										]
									},
									{
										"cells": [
											"$.fieldErrors",
											"null"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "not executed",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": 23
				}
			],
			"isTableDriven": true,
			"datatable": {
				"headers": [
					"scenario",
					"api",
					"creatorId",
					"creatorPlatform",
					"creatoredSource",
					"creatoredType",
					"deckId",
					"tempQuestionId",
					"kind",
					"isDeleted",
					"learningObjectives",
					"imageUrl",
					"media",
					"prompt",
					"promptType",
					"timeout",
					"rationale",
					"boxId",
					"correctAttempts",
					"inCorrectAttempts",
					"lastAswered",
					"questionId",
					"skips",
					"userId",
					"correctAnswerList",
					"answer1Id",
					"answer1Value",
					"answer1Type",
					"answer1CaseSensitive",
					"answer2Id",
					"answer2Value",
					"answer2Type",
					"answer2CaseSensitive",
					"answer3Id",
					"answer3Value",
					"answer3Type",
					"answer3CaseSensitive",
					"answer4Id",
					"answer4Value",
					"answer4Type",
					"answer4CaseSensitive",
					"answer5Id",
					"answer5Value",
					"answer5Type",
					"answer5CaseSensitive",
					"tags",
					"message",
					"description",
					"fieldErrors"
				],
				"rows": [
					{
						"cells": [
							"Create a question using an invalid creatoredType",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manua",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"creatoredType: Invalid value 'Manua'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty creatoredType",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"creatoredType: Invalid value ''",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an invalid kind",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"AL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value 'AL'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty kind",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value ''",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string as the timeout",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"a",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the boxId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"a",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"a",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"@",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty value as the correctAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character (',' (code 44)): expected a value",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the inCorrectAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"@",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the inCorrectAttempts",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"a",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the questionId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"a",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the questionId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"@",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special characters value as the skips",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"@",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the skips",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"a",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the userId",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"a",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"Unrecognized token 'a': was expecting ('true', 'false' or 'null')",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty string as the correctAnswerList",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"\"\"",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"'correctAnswers' cannot be null or empty",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using null value as the correctAnswerList",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"null",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"'correctAnswers' cannot be null or empty",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the answer1Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"\"a\"",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value 'a'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special character as the answer1Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"\"@\"",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value '@'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a string value as the answer2Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"\"a\"",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value 'a'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using a special character as the answer2Id",
							"Create All Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"ALL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"\"@\"",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"answers: Invalid value '@'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an empty questionPrompt",
							"Create MCQ Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"AL",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"",
							"TEXT",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value 'AL'",
							"null",
							"null"
						]
					},
					{
						"cells": [
							"Create a question using an invalid promptType",
							"Create MCQ Type Question using Question Service",
							"osanda12",
							"Web",
							"App",
							"Manual",
							"5a964b2d2e02d845dec509ef",
							"testId",
							"",
							"false",
							"learningObjective1",
							"https://documentservice-qa.stg-prsn.com/api/v1/documents/5a155f35d5b71d1a8a54dd58/download/public?format=ORIGINAL",
							"TEXT",
							"Who is the owner of MaxSoft?",
							"TEX",
							"60",
							"rationale",
							"0",
							"1",
							"0",
							"2018-01-01T12:00:00+01:00",
							"0",
							"0",
							"0",
							"1,2",
							"1",
							"Red",
							"TEXT",
							"true",
							"2",
							"White",
							"TEXT",
							"true",
							"3",
							"White",
							"TEXT",
							"false",
							"4",
							"Blue",
							"TEXT",
							"false",
							"5",
							"Orange",
							"TEXT",
							"false",
							"MaxSoft",
							"kind: Invalid value ''",
							"null",
							"null"
						]
					}
				]
			},
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 0,
			"failedScenarioCount": 24,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Epoch Time Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Other\\08. Epoch Time.spec",
			"tags": [],
			"executionTime": 5,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Current Epoch time",
					"tags": [],
					"executionTime": 4,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user saves the current epoch time in \"Seconds\" inside data stores",
							"table": {
								"headers": [
									"Data Store Type",
									"Data Store Variable Name"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"currentEpochTime"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 3,
								"skippedReason": "",
								"messages": [
									"\"1551774508\" is successfully saved as a text in Scenario Data Store [currentEpochTime]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves the current epoch time in \"Milliseconds\" inside data stores",
							"table": {
								"headers": [
									"Data Store Type",
									"Data Store Variable Name"
								],
								"rows": [
									{
										"cells": [
											"suite",
											"currentEpochTime"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"1551774508735\" is successfully saved as a text in Suite Data Store [currentEpochTime]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				},
				{
					"scenarioHeading": "Epoch time for a given timestamp",
					"tags": [],
					"executionTime": 1,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "And the user converts the \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" formatted \"2018-09-25T11:56:00.000-0000\" timestamp into epoch time in \"Seconds\" and saves inside data stores",
							"table": {
								"headers": [
									"Data Store Type",
									"Data Store Variable Name"
								],
								"rows": [
									{
										"cells": [
											"scenario",
											"epochTime"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [
									"\"1537876560\" is successfully saved as a text in Scenario Data Store [epochTime]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user converts the \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\" formatted \"2018-09-25T11:56:00.000-0000\" timestamp into epoch time in \"Milliseconds\" and saves inside data stores",
							"table": {
								"headers": [
									"Data Store Type",
									"Data Store Variable Name"
								],
								"rows": [
									{
										"cells": [
											"suite",
											"epochTime"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"1537876560000\" is successfully saved as a text in Suite Data Store [epochTime]"
								],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 2,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		},
		{
			"specHeading": "Run GET API using Endpoint in Data Store Specification",
			"fileName": "C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\specs\\Data Stores\\04. Run GET API using Endpoint in Data Store.spec",
			"tags": [],
			"executionTime": 2366,
			"executionStatus": "pass",
			"scenarios": [
				{
					"scenarioHeading": "Run GET API using Endpoint in Data Store",
					"tags": [],
					"executionTime": 2366,
					"executionStatus": "pass",
					"contexts": [],
					"teardowns": [],
					"items": [
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke \"Get Staging PI Token\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 36,
								"skippedReason": "",
								"messages": [
									"API Endpoint is: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request payload as follows \u003cfile:/resources/payloads/login.txt\u003e",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"The JSON request body that you are going to use for the API is:\n{\r\n \"userName\": \"osanda12\",\r\n \"password\": \"Password1\"\r\n}"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes the API",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1448,
								"skippedReason": "",
								"messages": [
									"Invoked API Endpoint: \nhttps://int-piapi-internal.stg-openclass.com/tokens\n\n",
									"HTTP Method is: POST\n\n",
									"Response Time is: 1331ms\n\n",
									"Response is: \n{\n    \"status\": \"success\",\n    \"data\": \"eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjcwLCJpYXQiOjE1NTE3NzQ0NzAsInNlc3NpZCI6IjQ5OGU0NWU0LWMwYjYtNDZjMS1iZDhjLTQ1MDAyMjkyNDc1MyJ9.CAyGX4NptYSNa7I9BMh-U3pJ4qLOpqtXoaAWPuHp90nrpjOYDKVPlPn70Z4gy8q1S__zJ4Lwu5L6HdYlD1W2mF2UuvBSXWTtpewwxWuy0M6kqHtrCkCNlEtlP4pDGIICPLcp7KWucicfWZrrXc9SvffwNKtc-3wLiKs96xFHsTY\"\n}\n\n",
									"Response Headers are: \nDate=Tue, 05 Mar 2019 08:27:50 GMT\nContent-Type=application/json;charset=UTF-8\nTransfer-Encoding=chunked\nConnection=keep-alive\nSet-Cookie=AWSALB=phMYDDUWAag7x7ExoaMn0f809Z+flTYpUGnK6HgXK/yzc4k1azRNjbMdeBDtlaMDGxR0lsP2pGFHB9TKWGlifGNzIFVE3jYENc4hUmj+r5xTblE/coTWFfG8Akbr; Expires=Tue, 12 Mar 2019 08:27:50 GMT; Path=/\nServer=nginx/1.15.7\nCorrelation-Id=d0989e9b-fd5c-4e9c-b6b1-b8c6727edf7b\nLocation=https://int-piapi-internal.stg-openclass.com/tokens/eyJraWQiOiJrMTA2OTQ4MTkwIiwiYWxnIjoiUlM1MTIifQ.eyJzdWIiOiJmZmZmZmZmZjU5ZTg4NmI0ZTRiMDFjZWQyODNmMDY1NSIsImhjYyI6IkxLIiwidHlwZSI6ImF0IiwiZXhwIjoxNTUxNzg1MjcwLCJpYXQiOjE1NTE3NzQ0NzAsInNlc3NpZCI6IjQ5OGU0NWU0LWMwYjYtNDZjMS1iZDhjLTQ1MDAyMjkyNDc1MyJ9.CAyGX4NptYSNa7I9BMh-U3pJ4qLOpqtXoaAWPuHp90nrpjOYDKVPlPn70Z4gy8q1S__zJ4Lwu5L6HdYlD1W2mF2UuvBSXWTtpewwxWuy0M6kqHtrCkCNlEtlP4pDGIICPLcp7KWucicfWZrrXc9SvffwNKtc-3wLiKs96xFHsTY"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"201\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.status",
											"success"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And save the access token in the response which is located inside the JSON Path of \"$.data\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 2,
								"skippedReason": "",
								"messages": [
									"Successfully saved the access token into the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\""
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user saves the values inside data stores as follows",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name",
									"Value To Be Stored"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"invokingEndpoint",
											"http://aggregationservice-pearson-prep-us1-stg-blue.bite.pearsondev.tech/api/questions?deckId=5badc2027246d600100fe269"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"\"http://aggregationservice-pearson-prep-us1-stg-blue.bite.pearsondev.tech/api/questions?deckId=5badc2027246d600100fe269\" is successfully saved as a text in Scenario Data Store [invokingEndpoint]"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Given that a user needs to invoke GET API using the endpoint saved in the data store",
							"table": {
								"headers": [
									"DataStore Type",
									"Variable Name"
								],
								"rows": [
									{
										"cells": [
											"Scenario",
											"invokingEndpoint"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [
									"Text inside Scenario Data Store [invokingEndpoint] is: \"http://aggregationservice-pearson-prep-us1-stg-blue.bite.pearsondev.tech/api/questions?deckId=5badc2027246d600100fe269\"\n\n",
									"API Endpoint is: \nhttp://aggregationservice-pearson-prep-us1-stg-blue.bite.pearsondev.tech/api/questions?deckId=5badc2027246d600100fe269\n\n",
									"HTTP Method is: GET"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the user set the request authentication configurations as follows",
							"table": {
								"headers": [
									"Configuration",
									"Configuration Value"
								],
								"rows": [
									{
										"cells": [
											"Is authentication required?",
											"Yes"
										]
									},
									{
										"cells": [
											"Do you need to retrieve the access token from the text file?",
											"Yes"
										]
									},
									{
										"cells": [
											"Provide the access token if you need to authorize the API manually",
											"N/A"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "When the user invokes GET API using the endpoint saved in the data store",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 879,
								"skippedReason": "",
								"messages": [
									"Successfully read the access token from the text file in the directory of \"C:\\Users\\onimalarathna\\IdeaProjects\\MaxSoft-IntelliAPI\\resources/access_tokens/saved_valid_access_token.txt\"\n\n",
									"Invoked API Endpoint:\nhttp://aggregationservice-pearson-prep-us1-stg-blue.bite.pearsondev.tech/api/questions?deckId=5badc2027246d600100fe269\n\n",
									"HTTP Method is: GET\n\n",
									"Response Time is: 875ms\n\n",
									"Response is: \n{\n    \"questions\": [\n        \n    ]\n}\n\n",
									"Response Headers are: \nContent-Type=application/json;charset=UTF-8\ncorrelation-id=dbc9eb75-2576-4738-8c12-da5cc9ab0db1\nDate=Tue, 05 Mar 2019 08:27:51 GMT\nServer=nginx\nX-Content-Type-Options=nosniff\nX-Loadbalancer-Id=nginx-ingress-lxkkr\nX-XSS-Protection=1; mode=block\nContent-Length=16\nConnection=keep-alive"
								],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "Then the status code for the request is \"200\"",
							"table": null,
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 0,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						},
						{
							"itemType": "step",
							"stepText": "And the JSON Path Assertions for the response should be equal to the following",
							"table": {
								"headers": [
									"JSON Path",
									"Expected Result"
								],
								"rows": [
									{
										"cells": [
											"$.questions",
											"[]"
										]
									}
								]
							},
							"beforeStepHookFailure": null,
							"afterStepHookFailure": null,
							"result": {
								"status": "pass",
								"stackTrace": "",
								"screenshot": "",
								"errorMessage": "",
								"executionTime": 1,
								"skippedReason": "",
								"messages": [],
								"errorType": "assertion"
							}
						}
					],
					"beforeScenarioHookFailure": null,
					"afterScenarioHookFailure": null,
					"skipErrors": [],
					"tableRowIndex": -1
				}
			],
			"isTableDriven": false,
			"datatable": null,
			"beforeSpecHookFailure": null,
			"afterSpecHookFailure": null,
			"passedScenarioCount": 1,
			"failedScenarioCount": 0,
			"skippedScenarioCount": 0
		}
	],
	"beforeSuiteHookFailure": null,
	"afterSuiteHookFailure": null,
	"passedSpecsCount": 10,
	"failedSpecsCount": 4,
	"skippedSpecsCount": 0,
	"passedScenariosCount": 26,
	"failedScenariosCount": 35,
	"skippedScenariosCount": 0
}